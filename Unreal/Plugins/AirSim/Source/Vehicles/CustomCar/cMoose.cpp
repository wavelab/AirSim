#include "cMooose.h"
// BEGIN: Copied from cFullModel_Sept26:1..411
/***************************************************
 * Automatically generated by Maple.
 * Created On: Wed Sep 26 16:00:00 2018.
***************************************************/
#ifdef WMI_WINNT
#define EXP __declspec(dllexport)
#else
#ifdef X86_64_WINDOWS
#define EXP __declspec(dllexport)
#else
#define EXP
#endif
#endif
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#ifdef FROM_MAPLE
#include <mplshlib.h>
static MKernelVector kv;
EXP ALGEB M_DECL SetKernelVector(MKernelVector kv_in, ALGEB args) { ((void)(args)); kv=kv_in; return(kv->toMapleNULL()); }
#else
#include <string.h>
#include <stdarg.h>

#define MAXSTRINGLENGTH 1000
#define MAXNUMPART 20


void toMapleError(char *msg, ...)
{
	char fcpy[MAXSTRINGLENGTH+1],*offs[MAXNUMPART+1],
		*msg_pars[MAXNUMPART+1],res_str[MAXSTRINGLENGTH+1];
	int argref[MAXNUMPART],maxargref,npart,v,i,j,res_len;
	va_list argptr;

	if(strlen(msg)>MAXSTRINGLENGTH)
		strcpy(fcpy,"message string is too long");
	else
		strcpy(fcpy,msg);

	maxargref=0;
	npart=0;
	i=0;
	offs[npart]=&fcpy[i];
	for(j=0;fcpy[j]!='\0';j++)
		if(fcpy[j]=='%' && fcpy[j+1]!='%') {
			fcpy[j++]='\0';
			if(fcpy[j]=='-') j++;
			if(fcpy[j]=='\0') break;
			v=0;
			while(fcpy[j]>='0' && fcpy[j]<='9') v=10*v+(fcpy[j++]-'0');
			argref[npart]=v;
			if(v>maxargref) maxargref=v;
			i=j;
			npart++;
			offs[npart]=&fcpy[i];
		}

	va_start(argptr,msg);
	for(i=0;i<maxargref;i++) msg_pars[i] = va_arg(argptr, char*);
	va_end(argptr);

	strcpy(res_str,offs[0]);
	res_len=strlen(res_str);
	for(i=0;i<npart;i++) {
		res_len+=strlen(msg_pars[argref[i]-1]);
		if(res_len>MAXSTRINGLENGTH) {
			strcpy(res_str,"message string is too long");
			break;
		}
		else
			strcat(res_str,msg_pars[argref[i]-1]);

		res_len+=strlen(offs[i+1]);
		if(res_len>MAXSTRINGLENGTH) {
			strcpy(res_str,"message string is too long");
			break;
		}
		else
			strcat(res_str,offs[i+1]);
	}
	for(i=0;i<maxargref;i++) free(msg_pars[i]);
	fprintf(stderr,"Error: %s\n",res_str);
}

char* toMapleInteger(int i)
{
	char *str=malloc(21);
	sprintf(str,"%li",(long)i);
	return(str);
}

char* toMapleFloat(double f)
{
	char *str=malloc(20);
	sprintf(str,"%f",f);
	return(str);
}

char* toMapleString(const char *s)
{
	char *str=malloc(strlen(s)+1);
	strcpy(str,s);
	return(str);
}

char* toMapleBoolean(int b)
{
	char *str=malloc(6);
	switch(b) {
	case 0:
		strcpy(str,"false");
	default:
		strcpy(str,"true");
	return(str);
	}
}

void toMapleUserinfo(int level, char *name, char *msg)
{
	printf("Info: %s:%s\n",name,msg);
}

typedef struct MKernelVectorDesc {
    void (*error)(char *msg, /* char *par1, *par2, */ ...);
	char* (*toMapleInteger)(int i);
	char* (*toMapleFloat)(double f);
	char* (*toMapleString)(const char *s);
	char* (*toMapleBoolean)(int b);
	void (*userinfo)(int level, char *name, char *msg);
} MKernelVectorDesc, *MKernelVector;

MKernelVectorDesc mykv = {
	&toMapleError,
	&toMapleInteger,
	&toMapleFloat,
	&toMapleString,
	&toMapleBoolean,
	&toMapleUserinfo
};

MKernelVector kv= &mykv;
#ifdef WMI_WINNT
#define M_DECL __stdcall
#else
#define M_DECL
#endif
#endif

/***************************************************
* Variable Definition for System:

* State variable(s):
*    x[ 0] = `LSPMain.FullModel.SVM_1.FTSS1.TB2.hubFrameTire`(t)
*    x[ 1] = `LSPMain.FullModel.SVM_1.FTSS2.TB2.hubFrameTire`(t)
*    x[ 2] = `LSPMain.FullModel.SVM_1.FTSS3.TB2.hubFrameTire`(t)
*    x[ 3] = `LSPMain.FullModel.SVM_1.FTSS4.TB2.hubFrameTire`(t)
*    x[ 4] = `Main.FullModel.'Brake Clutch Mode'.C1.tau0_max`(t)
*    x[ 5] = `Main.FullModel.'Brake Clutch Mode'.C1.w_rel`(t)
*    x[ 6] = `Main.FullModel.'Brake Clutch Mode'.I3.w`(t)
*    x[ 7] = `Main.FullModel.'Brake Clutch Mode'.LE3.w_a`(t)
*    x[ 8] = `Main.FullModel.'Brake Clutch Mode'.P1.u1`(t)
*    x[ 9] = `Main.FullModel.'Brake Clutch Mode'.TS1.flange_b.phi`(t)
*    x[10] = `Main.FullModel.'Brake Clutch Mode'.TS2.flange_b.phi`(t)
*    x[11] = `Main.FullModel.SVM_1.B4.tau0_max`(t)
*    x[12] = `Main.FullModel.SVM_1.B6.tau0_max`(t)
*    x[13] = `Main.FullModel.SVM_1.Chassis.eta`(t)
*    x[14] = diff(`Main.FullModel.SVM_1.Chassis.eta`(t),t)
*    x[15] = `Main.FullModel.SVM_1.Chassis.x`(t)
*    x[16] = diff(`Main.FullModel.SVM_1.Chassis.x`(t),t)
*    x[17] = `Main.FullModel.SVM_1.Chassis.xi`(t)
*    x[18] = diff(`Main.FullModel.SVM_1.Chassis.xi`(t),t)
*    x[19] = `Main.FullModel.SVM_1.Chassis.y`(t)
*    x[20] = diff(`Main.FullModel.SVM_1.Chassis.y`(t),t)
*    x[21] = `Main.FullModel.SVM_1.Chassis.z`(t)
*    x[22] = diff(`Main.FullModel.SVM_1.Chassis.z`(t),t)
*    x[23] = `Main.FullModel.SVM_1.Chassis.zeta`(t)
*    x[24] = diff(`Main.FullModel.SVM_1.Chassis.zeta`(t),t)
*    x[25] = `Main.FullModel.SVM_1.I1.y[1]`(t)
*    x[26] = `Main.FullModel.SVM_1.I1.y[2]`(t)
*    x[27] = `Main.FullModel.SVM_1.I1.y[3]`(t)
*    x[28] = `Main.FullModel.SVM_1.I2.y[1]`(t)
*    x[29] = `Main.FullModel.SVM_1.I2.y[2]`(t)
*    x[30] = `Main.FullModel.SVM_1.I2.y[3]`(t)
*    x[31] = `Main.FullModel.SVM_1.I3.y[1]`(t)
*    x[32] = `Main.FullModel.SVM_1.I3.y[2]`(t)
*    x[33] = `Main.FullModel.SVM_1.I3.y[3]`(t)
*    x[34] = `Main.FullModel.SVM_1.I4.y[1]`(t)
*    x[35] = `Main.FullModel.SVM_1.I4.y[2]`(t)
*    x[36] = `Main.FullModel.SVM_1.I4.y[3]`(t)
*    x[37] = `Main.FullModel.SVM_1.I5.y[1]`(t)
*    x[38] = `Main.FullModel.SVM_1.I5.y[2]`(t)
*    x[39] = `Main.FullModel.SVM_1.I5.y[3]`(t)
*    x[40] = `Main.FullModel.SVM_1.I6.y[1]`(t)
*    x[41] = `Main.FullModel.SVM_1.I6.y[2]`(t)
*    x[42] = `Main.FullModel.SVM_1.I6.y[3]`(t)
*    x[43] = `Main.FullModel.SVM_1.PrisFL.s`(t)
*    x[44] = diff(`Main.FullModel.SVM_1.PrisFL.s`(t),t)
*    x[45] = `Main.FullModel.SVM_1.PrisFR.s`(t)
*    x[46] = diff(`Main.FullModel.SVM_1.PrisFR.s`(t),t)
*    x[47] = `Main.FullModel.SVM_1.PrisRL.s`(t)
*    x[48] = diff(`Main.FullModel.SVM_1.PrisRL.s`(t),t)
*    x[49] = `Main.FullModel.SVM_1.PrisRR.s`(t)
*    x[50] = diff(`Main.FullModel.SVM_1.PrisRR.s`(t),t)
*    x[51] = `Main.FullModel.SVM_1.SpinFL.theta`(t)
*    x[52] = diff(`Main.FullModel.SVM_1.SpinFL.theta`(t),t)
*    x[53] = `Main.FullModel.SVM_1.SpinFR.theta`(t)
*    x[54] = diff(`Main.FullModel.SVM_1.SpinFR.theta`(t),t)
*    x[55] = `Main.FullModel.SVM_1.SpinRL.theta`(t)
*    x[56] = diff(`Main.FullModel.SVM_1.SpinRL.theta`(t),t)
*    x[57] = `Main.FullModel.SVM_1.SpinRR.theta`(t)
*    x[58] = diff(`Main.FullModel.SVM_1.SpinRR.theta`(t),t)
*    x[59] = `Main.FullModel.w_rel`(t)
*    x[60] = `TSAMain.FullModel.SVM_1.FTSS1.TB2.hubFrameTire`(t)
*    x[61] = `TSAMain.FullModel.SVM_1.FTSS2.TB2.hubFrameTire`(t)
*    x[62] = `TSAMain.FullModel.SVM_1.FTSS3.TB2.hubFrameTire`(t)
*    x[63] = `TSAMain.FullModel.SVM_1.FTSS4.TB2.hubFrameTire`(t)
*
* Output variable(s):
*    y[ 0] = `Main.FullModel.ARA1[1]`(t)
*    y[ 1] = `Main.FullModel.ARA1[2]`(t)
*    y[ 2] = `Main.FullModel.ARA1[3]`(t)
*    y[ 3] = `Main.FullModel.SVM_1.I6.y[1]`(t)
*    y[ 4] = `Main.FullModel.SVM_1.I6.y[2]`(t)
*    y[ 5] = `Main.FullModel.SVM_1.I6.y[3]`(t)
*    y[ 6] = `Main.FullModel.AVRA1[1]`(t)
*    y[ 7] = `Main.FullModel.AVRA1[2]`(t)
*    y[ 8] = `Main.FullModel.AVRA1[3]`(t)
*    y[ 9] = `Main.FullModel.CA1[1]`(t)
*    y[10] = `Main.FullModel.CA1[2]`(t)
*    y[11] = `Main.FullModel.CA1[3]`(t)
*    y[12] = `Main.FullModel.SVM_1.I1.y[1]`(t)
*    y[13] = `Main.FullModel.SVM_1.I1.y[2]`(t)
*    y[14] = `Main.FullModel.SVM_1.I1.y[3]`(t)
*    y[15] = `Main.FullModel.CAV1[1]`(t)
*    y[16] = `Main.FullModel.CAV1[2]`(t)
*    y[17] = `Main.FullModel.CAV1[3]`(t)
*    y[18] = `Main.FullModel.SVM_1.Chasis_Velocity[1]`(t)
*    y[19] = `Main.FullModel.CV1[2]`(t)
*    y[20] = `Main.FullModel.CV1[3]`(t)
*    y[21] = `Main.FullModel.SVM_1.I2.y[1]`(t)
*    y[22] = `Main.FullModel.SVM_1.I2.y[2]`(t)
*    y[23] = `Main.FullModel.SVM_1.I2.y[3]`(t)
*    y[24] = `Main.FullModel.FLWP1[1]`(t)
*    y[25] = `Main.FullModel.FLWP1[2]`(t)
*    y[26] = `Main.FullModel.FLWP1[3]`(t)
*    y[27] = `Main.FullModel.SVM_1.FTSS1.RollingRes1.WheelSpeed`(t)
*    y[28] = `Main.FullModel.SVM_1.I3.y[1]`(t)
*    y[29] = `Main.FullModel.SVM_1.I3.y[2]`(t)
*    y[30] = `Main.FullModel.SVM_1.I3.y[3]`(t)
*    y[31] = `Main.FullModel.FRWP1[1]`(t)
*    y[32] = `Main.FullModel.FRWP1[2]`(t)
*    y[33] = `Main.FullModel.FRWP1[3]`(t)
*    y[34] = `Main.FullModel.SVM_1.FTSS3.RollingRes1.WheelSpeed`(t)
*    y[35] = `Main.FullModel.SVM_1.Chassis.x`(t)
*    y[36] = `Main.FullModel.SVM_1.Chassis.y`(t)
*    y[37] = `Main.FullModel.SVM_1.Chassis.z`(t)
*    y[38] = `Main.FullModel.GV1[1]`(t)
*    y[39] = `Main.FullModel.GV1[2]`(t)
*    y[40] = `Main.FullModel.GV1[3]`(t)
*    y[41] = `Main.FullModel.SVM_1.I5.y[1]`(t)
*    y[42] = `Main.FullModel.SVM_1.I5.y[2]`(t)
*    y[43] = `Main.FullModel.SVM_1.I5.y[3]`(t)
*    y[44] = `Main.FullModel.RLWP1[1]`(t)
*    y[45] = `Main.FullModel.RLWP1[2]`(t)
*    y[46] = `Main.FullModel.RLWP1[3]`(t)
*    y[47] = `Main.FullModel.SVM_1.FTSS2.RollingRes1.WheelSpeed`(t)
*    y[48] = `Main.FullModel.SVM_1.I4.y[1]`(t)
*    y[49] = `Main.FullModel.SVM_1.I4.y[2]`(t)
*    y[50] = `Main.FullModel.SVM_1.I4.y[3]`(t)
*    y[51] = `Main.FullModel.RRWP1[1]`(t)
*    y[52] = `Main.FullModel.RRWP1[2]`(t)
*    y[53] = `Main.FullModel.RRWP1[3]`(t)
*    y[54] = `Main.FullModel.SVM_1.FTSS4.RollingRes1.WheelSpeed`(t)
*    y[55] = `Main.FullModel.VRA1[1]`(t)
*    y[56] = `Main.FullModel.VRA1[2]`(t)
*    y[57] = `Main.FullModel.VRA1[3]`(t)
*    y[58] = `Main.FullModel.w_eng`(t)
*    y[59] = `Main.FullModel.w_mot`(t)
*    y[60] = `Main.FullModel.w_rel`(t)
*    y[61] = `LSPMain.FullModel.SVM_1.FTSS1.TB2.hubFrameTire`(t)
*    y[62] = `LSPMain.FullModel.SVM_1.FTSS2.TB2.hubFrameTire`(t)
*    y[63] = `LSPMain.FullModel.SVM_1.FTSS3.TB2.hubFrameTire`(t)
*    y[64] = `LSPMain.FullModel.SVM_1.FTSS4.TB2.hubFrameTire`(t)
*    y[65] = `Main.FullModel.'Brake Clutch Mode'.C1.tau0_max`(t)
*    y[66] = `Main.FullModel.'Brake Clutch Mode'.C1.w_rel`(t)
*    y[67] = `Main.FullModel.'Brake Clutch Mode'.I3.w`(t)
*    y[68] = `Main.FullModel.'Brake Clutch Mode'.LE3.w_a`(t)
*    y[69] = `Main.FullModel.'Brake Clutch Mode'.P1.u1`(t)
*    y[70] = `Main.FullModel.'Brake Clutch Mode'.TS1.flange_b.phi`(t)
*    y[71] = `Main.FullModel.'Brake Clutch Mode'.TS2.flange_b.phi`(t)
*    y[72] = `Main.FullModel.SVM_1.B4.tau0_max`(t)
*    y[73] = `Main.FullModel.SVM_1.B6.tau0_max`(t)
*    y[74] = `Main.FullModel.SVM_1.Chassis.eta`(t)
*    y[75] = `Main.FullModel.SVM_1.Chassis.x`(t)
*    y[76] = `Main.FullModel.SVM_1.Chassis.xi`(t)
*    y[77] = `Main.FullModel.SVM_1.Chassis.y`(t)
*    y[78] = `Main.FullModel.SVM_1.Chassis.z`(t)
*    y[79] = `Main.FullModel.SVM_1.Chassis.zeta`(t)
*    y[80] = `Main.FullModel.SVM_1.I1.y[1]`(t)
*    y[81] = `Main.FullModel.SVM_1.I1.y[2]`(t)
*    y[82] = `Main.FullModel.SVM_1.I1.y[3]`(t)
*    y[83] = `Main.FullModel.SVM_1.I2.y[1]`(t)
*    y[84] = `Main.FullModel.SVM_1.I2.y[2]`(t)
*    y[85] = `Main.FullModel.SVM_1.I2.y[3]`(t)
*    y[86] = `Main.FullModel.SVM_1.I3.y[1]`(t)
*    y[87] = `Main.FullModel.SVM_1.I3.y[2]`(t)
*    y[88] = `Main.FullModel.SVM_1.I3.y[3]`(t)
*    y[89] = `Main.FullModel.SVM_1.I4.y[1]`(t)
*    y[90] = `Main.FullModel.SVM_1.I4.y[2]`(t)
*    y[91] = `Main.FullModel.SVM_1.I4.y[3]`(t)
*    y[92] = `Main.FullModel.SVM_1.I5.y[1]`(t)
*    y[93] = `Main.FullModel.SVM_1.I5.y[2]`(t)
*    y[94] = `Main.FullModel.SVM_1.I5.y[3]`(t)
*    y[95] = `Main.FullModel.SVM_1.I6.y[1]`(t)
*    y[96] = `Main.FullModel.SVM_1.I6.y[2]`(t)
*    y[97] = `Main.FullModel.SVM_1.I6.y[3]`(t)
*    y[98] = `Main.FullModel.SVM_1.PrisFL.s`(t)
*    y[99] = `Main.FullModel.SVM_1.PrisFR.s`(t)
*    y[100] = `Main.FullModel.SVM_1.PrisRL.s`(t)
*    y[101] = `Main.FullModel.SVM_1.PrisRR.s`(t)
*    y[102] = `Main.FullModel.SVM_1.SpinFL.theta`(t)
*    y[103] = `Main.FullModel.SVM_1.SpinFR.theta`(t)
*    y[104] = `Main.FullModel.SVM_1.SpinRL.theta`(t)
*    y[105] = `Main.FullModel.SVM_1.SpinRR.theta`(t)
*    y[106] = `TSAMain.FullModel.SVM_1.FTSS1.TB2.hubFrameTire`(t)
*    y[107] = `TSAMain.FullModel.SVM_1.FTSS2.TB2.hubFrameTire`(t)
*    y[108] = `TSAMain.FullModel.SVM_1.FTSS3.TB2.hubFrameTire`(t)
*    y[109] = `TSAMain.FullModel.SVM_1.FTSS4.TB2.hubFrameTire`(t)
*
* Input variable(s):
*    u[ 0] = `Main.FullModel.APP`(t)
*    u[ 1] = `Main.FullModel.BPP`(t)
*    u[ 2] = `Main.FullModel.Steer`(t)
*
* Parameter(s):
*    p[ 0] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.I_eng` (default = .14)
*    p[ 1] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.I_gen` (default = .15e-1)
*    p[ 2] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.I_mot` (default = .15)
*    p[ 3] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.R_mot2wh` (default = 10.39)
*    p[ 4] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.R_ring2wh` (default = 4.08)
*    p[ 5] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.d` (default = 0.)
*    p[ 6] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.eff_2` (default = 1.)
*    p[ 7] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.eff_f` (default = 1.)
*    p[ 8] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.eff_r1` (default = .98)
*    p[ 9] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.eff_s` (default = .985)
*    p[10] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.n_p` (default = 3.)
*    p[11] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.rho` (default = .395)
*    p[12] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.w_eng0` (default = 25.)
*    p[13] = `Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.w_wh0` (default = .1e2)
*    p[14] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Tdsd_thresh` (default = .1e2)
*    p[15] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Teng_max` (default = .2e3)
*    p[16] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Teng_min` (default = -.1e3)
*    p[17] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Tgen_max` (default = .6e2)
*    p[18] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Tgen_min` (default = -.6e2)
*    p[19] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Tgen_thresh` (default = 3.)
*    p[20] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Tmot_max` (default = .3e3)
*    p[21] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Tmot_min` (default = -.25e3)
*    p[22] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.Ts` (default = .5e-1)
*    p[23] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.brake` (default = 1.)
*    p[24] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.ignite` (default = .95e3)
*    p[25] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.modeoffset` (default = .1)
*    p[26] = `Main.FullModel.'Powertrain Control Module_1'.parameters_3.wmot_thresh` (default = .1e2)
*
************************************************/

/* Set up fixed initial condition mask */
int icmask[64] = {
	1,1,1,1,0,1,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,
	1,1,1,1};

/* Set up visible initial condition mask */
int icvis[64] = {
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,
	1,1,1,1};

/* Configurable parameters */
#define CONITER 30
#define CONTOL 1.000000e-05
#define INITCONITER 100
#define INITCONTOL 1.000000e-10
#define INITITER 50
#define INITTOL 1.000000e-08
#define INITWEIGHT 2.000000e+01
#define EVTITER 10
#define EVTPROJ 1
#define EVTHYST 1.000000e-10
#define INCONTOL 1e200

/* Wordsize integer definition */
#ifndef M_INT
# if defined _MINGW64 || defined X86_64_WINDOWS
#  define M_INT long long
# elif defined __x86_64__ || defined __ppc64__
#  define M_INT long
# elif defined _M_X64
#  define M_INT long long
# else
#  define M_INT int
# endif
#endif
// END: Copied from cFullModel_Sept26:1..411

// BEGIN: Copied from cFullModel_Sept26:439..6167
static void SolverError(SolverStruct *S, int term, char *errmsg)
{
#ifdef FROM_MAPLE
	int i;
#endif
	if(term)
		sprintf(S->buf,"Simulation terminated at t=%20.16e: %s\n",S->w[0],errmsg);
	else
		sprintf(S->buf,"Error at t=%20.16e: %s\n",S->w[0],errmsg);
#ifdef FROM_MAPLE
	for(i=0;S->buf[i]!='\0';i++);
	S->buf[i-1]='\0';
	if(S->err==-1) kv->error(S->buf);
#endif
	S->err=1;
}

static double dsn_zero=0.0;
static unsigned char dsn_undefC[8] = { 0, 0, 0, 0, 0, 0, 0xF8, 0x7F };
static double *dsn_undef = (double *)&dsn_undefC;
static unsigned char dsn_posinfC[8] = { 0, 0, 0, 0, 0, 0, 0xF0, 0x7F };
static double *dsn_posinf = (double *)&dsn_posinfC;
static unsigned char dsn_neginfC[8] = { 0, 0, 0, 0, 0, 0, 0xF0, 0xFF };
static double *dsn_neginf = (double *)&dsn_neginfC;
#define trunc(v) ( (v>0.0) ? floor(v) : ceil(v) )
#define IS_UNDEF(a) (a-a!=0. || (a!=0. && a-2.*a==0.))
#define UNUSED(a) ((void)(a))
double avoidcompilerwarn() { return(dsn_zero+*dsn_undef+*dsn_posinf+*dsn_neginf); }
#ifndef M_INT
# if defined _MINGW64 || defined X86_64_WINDOWS
#  define M_INT long long
# elif defined __x86_64__ || defined __ppc64__
#  define M_INT long
# elif defined _M_X64
#  define M_INT long long
# else
#  define M_INT int
# endif
#endif


static const double _TID_T2[65] = {
-4.36331999999999998e-01, 2.47299999999999986e+00, 1.64199999999999990e+00, 4.54000000000000015e-01,
	7.19999999999999973e-01, -3.49065999999999987e-01, 2.47999999999999998e+00, 1.64799999999999991e+00,
	4.69999999999999973e-01, 7.19999999999999973e-01, -2.61799000000000004e-01, 2.97999999999999998e+00,
	1.71100000000000008e+00, 5.12000000000000011e-01, 7.18999999999999972e-01, -1.74532999999999994e-01,
	5.41999999999999993e+00, 1.82699999999999996e+00, 5.60000000000000053e-01, 7.10999999999999965e-01,
	-8.72664999999999969e-02, 6.01199999999999957e+00, 1.61299999999999999e+00, 6.72000000000000042e-01,
	6.38000000000000012e-01, -3.49066000000000029e-02, 7.55100000000000016e+00, 1.75000000000000000e+00,
	8.30999999999999961e-01, 6.80000000000000049e-01, 0.00000000000000000e+00, 7.55299999999999994e+00,
	1.75400000000000000e+00, 8.61999999999999988e-01, 7.20999999999999974e-01, 3.49066000000000029e-02,
	7.55100000000000016e+00, 1.75000000000000000e+00, 8.30999999999999961e-01, 6.80000000000000049e-01,
	8.72664999999999969e-02, 6.01199999999999957e+00, 1.61299999999999999e+00, 6.72000000000000042e-01,
	6.38000000000000012e-01, 1.74532999999999994e-01, 5.41999999999999993e+00, 1.82699999999999996e+00,
	5.60000000000000053e-01, 7.10999999999999965e-01, 2.61799000000000004e-01, 6.01199999999999957e+00,
	1.61299999999999999e+00, 6.72000000000000042e-01, 6.38000000000000012e-01, 3.49065999999999987e-01,
	2.47999999999999998e+00, 1.64799999999999991e+00, 4.69999999999999973e-01, 7.19999999999999973e-01,
	4.36331999999999998e-01, 2.47299999999999986e+00, 1.64199999999999990e+00, 4.54000000000000015e-01,
	7.19999999999999973e-01};

static const double _TID_T1[55] = {
-5.00000000000000000e-01, 5.21300000000000008e+00, 1.32000000000000006e+00, 8.35999999999999965e-01,
	1.23999999999999999e-01, -4.00000000000000022e-01, 5.21300000000000008e+00, 1.32000000000000006e+00,
	8.35999999999999965e-01, 1.23999999999999999e-01, -2.99999999999999989e-01, 6.12800000000000011e+00,
	1.38100000000000001e+00, 8.53999999999999981e-01, 2.56000000000000005e-01, -2.00000000000000011e-01,
	8.76399999999999935e+00, 1.52099999999999991e+00, 9.30000000000000049e-01, 9.12000000000000033e-01,
	-1.00000000000000006e-01, 9.01999999999999957e+00, 1.66999999999999993e+00, 9.79999999999999982e-01,
	9.51999999999999957e-01, 0.00000000000000000e+00, 9.48799999999999955e+00, 1.86499999999999999e+00,
	1.02000000000000002e+00, 1.18100000000000005e+00, 1.00000000000000006e-01, 9.01999999999999957e+00,
	1.66999999999999993e+00, 9.79999999999999982e-01, 9.51999999999999957e-01, 2.00000000000000011e-01,
	8.76399999999999935e+00, 1.52099999999999991e+00, 9.30000000000000049e-01, 9.12000000000000033e-01,
	2.99999999999999989e-01, 6.12800000000000011e+00, 1.38100000000000001e+00, 8.53999999999999981e-01,
	2.56000000000000005e-01, 4.00000000000000022e-01, 5.21300000000000008e+00, 1.32000000000000006e+00,
	8.35999999999999965e-01, 1.23999999999999999e-01, 5.00000000000000000e-01, 5.21300000000000008e+00,
	1.32000000000000006e+00, 8.35999999999999965e-01, 1.23999999999999999e-01};
static const M_INT _TID_NUMBER = 2;
static const double *_TID_TABLE[2] = {_TID_T1,_TID_T2};
static const M_INT _TID_D1[2] = {11,13};
static const M_INT _TID_D2[2] = {5,5};
static const M_INT _TID_SMOOTH[2] = {0,0};
static const M_INT _TID_EXTRA[2] = {2,2};


#ifdef MSVC
#pragma optimize( "gty", on)
#endif
static double Interp1Dsim(M_INT tid, M_INT c, double x, M_INT dx)
{
	double dx1, dx2, t0, t1, t2, x1, x2;
	M_INT nx, ny, extra, typ, i, i1, mi, l, r;
	const double *T;

	if( tid<1 || tid>_TID_NUMBER )
		return(*dsn_undef);
	T = _TID_TABLE[tid-1];
	nx = _TID_D1[tid-1];
	ny = _TID_D2[tid-1];
	typ = _TID_SMOOTH[tid-1];
	extra = _TID_EXTRA[tid-1];

	if( (typ!=-1 && typ!=0 && typ!=1) || ( extra<0 || extra>3 ) )
		return(*dsn_undef);
	if( (typ==-1 && dx>0) || (typ==0 && dx>1) || (typ==1 && dx>3) )
		return(0.);
	i = 1;
	i1 = nx;
	while( i-i1<-1 ) {
		mi = (i+i1)/2;
		if( x<T[(mi-1)*ny] ) i1 = mi; else i = mi;
	}
	if( typ==1 ) {
		if( i==1 || T[(i-2)*ny]==T[(i-1)*ny] )	l = 0; else l = 1;
		if( i==nx-1 || T[i*ny]==T[(i+1)*ny] ) r = 0; else r = 1;
	}
	else {
		l = 0.;
		r = 0.;
	}
	if( extra==0 && ( (i==1 && x<T[0]) || (i==nx-1 && T[(nx-1)*ny]<x) ) )
		return(*dsn_undef);
	else if( typ==-1 ) {
		if( x>=T[i*ny] ) return(T[i*ny+c-1]); else return (T[(i-1)*ny+c-1]);
	}
	else if( nx==1 ) {
		if( dx==0 )
			return(T[c-1]);
		else
			return(0.);
	}
	else if( T[(i-1)*ny]==T[i*ny] ) {
		if( x<T[(i-1)*ny] ) {
			if( dx==0 )
				return(T[(i-1)*ny+c-1]);
			else
				return(0.);
		}
		else {
			if( dx==0 )
				return(T[i*ny+c-1]);
			else
				return(0.);
		}
	}
	else if( (i==1 && x<T[0]) && (extra<2 || (typ==1 && extra==2) ) ) {
		if( extra==1 || T[0]==T[ny] ) {
			if( dx==0 ) return(T[c-1]); else return(0.);
		}
		else if( dx>=2 )
			return(0.);
		else {
			t1 = (T[c-1]-T[ny+c-1])/(T[0]-T[ny]);
			if( dx==0 )
				return(T[c-1]+t1*(x-T[0]));
			return(t1);
		}
	}
	else if( (i==nx-1 && T[(nx-1)*ny]<x) && ( extra<2 || (typ==1 && extra==2) ) ) {
		if( extra==1 || T[(nx-1)*ny]==T[(nx-2)*ny] ) {
			if( dx==0 ) return(T[(nx-1)*ny+c-1]); else return(0.);
		}
		else if( dx>=2 )
			return(0.);
		else {
			t1 = (T[(nx-1)*ny+c-1]-T[(nx-2)*ny+c-1])/(T[(nx-1)*ny]-T[(nx-2)*ny]);
			if( dx==0 )
				return(T[(nx-1)*ny+c-1]+t1*(x-T[(nx-1)*ny]));
			return(t1);
		}
	}
	else if( typ==0 || ( l==0 && r==0 ) ) {
		t0 = T[i*ny]-T[(i-1)*ny];
		if( t0==0. ) t0 = 1.; else t0 = 1./t0;
		if( dx==0 ) {
			t1 = t0*(T[i*ny]-x);
			t2 = -t1+1.;
			return(t1*T[(i-1)*ny+c-1]+t2*T[i*ny+c-1]);
		}
		else if( dx==1 )
			return(t0*(T[i*ny+c-1]-T[(i-1)*ny+c-1]));
		else
			return(0.);
	}
	else if( i==1 && extra==3 ) {
		if( dx==3 )
			return(0.);
		else {
			t0 = T[i*ny]-T[(i-1)*ny];
			t1 = T[(i+1)*ny]-T[i*ny];
			t2 = T[(i+1)*ny]-T[(i-1)*ny];
			dx2 = (t0*t0*T[(i+1)*ny+c-1]+t1*t2*T[i*ny+c-1]-t0*t2*T[i*ny+c-1]-t1*t1*T[(i-1)*ny+c-1])/(t0*t1*t2);
			t1 = 1./t0;
			t1 = t1*t1;
			if( dx==2 )
				return(2.*t1*(t0*dx2+T[(i-1)*ny+c-1]-T[i*ny+c-1]));
			else {
				x1 = x-T[(i-1)*ny];
				x2 = x-T[i*ny];
				if( dx==1 )
					return(t1*(t0*(x2+x1)*dx2-2.*x2*(T[i*ny+c-1]-T[(i-1)*ny+c-1])));
				else
					return(t1*(t0*x2*x1*dx2+x2*x2*T[(i-1)*ny+c-1]-x1*(-x1+2.*x2)*T[i*ny+c-1]));
			}
		}
	}
	else if( i==nx-1 && extra==3 ) {
		if( dx==3 )
			return(0.);
		else {
			t0 = T[i*ny]-T[(i-1)*ny];
			t1 = T[(i-1)*ny]-T[(i-2)*ny];
			t2 = T[i*ny]-T[(i-2)*ny];
			dx1 = (t1*t1*T[i*ny+c-1]+t0*t2*T[(i-1)*ny+c-1]-t1*t2*T[(i-1)*ny+c-1]-t0*t0*T[(i-2)*ny+c-1])/(t0*t1*t2);
			t1 = 1./t0;
			t1 = t1*t1;
			if( dx==2 )
				return(2.*t1*(T[i*ny+c-1]-t0*dx1-T[(i-1)*ny+c-1]));
			else {
				x1 = x-T[(i-1)*ny];
				x2 = x-T[i*ny];
				if( dx==1 )
					return(t1*(-t0*(x2+x1)*dx1+2.*x1*(T[i*ny+c-1]-T[(i-1)*ny+c-1])));
				else
					return(t1*(x1*x1*T[i*ny+c-1]-t0*x2*x1*dx1-x2*(-x2+2.*x1)*T[(i-1)*ny+c-1]));
			}
		}
	}
	else {
		t0 = T[i*ny]-T[(i-1)*ny];
		if( i==1 ) {
			if( extra==1 )
				dx1 = 0.;
			else
				dx1 = (T[c-1]-T[ny+c-1])/(T[0]-T[ny]);
		}
		else if( l==0 )
			dx1 = (T[(i-1)*ny+c-1]-T[i*ny+c-1])/(T[(i-1)*ny]-T[i*ny]);
		else {
			t1 = T[(i-1)*ny]-T[(i-2)*ny];
			t2 = T[i*ny]-T[(i-2)*ny];
			dx1 = (t1*t1*T[i*ny+c-1]+t0*t2*T[(i-1)*ny+c-1]-t1*t2*T[(i-1)*ny+c-1]-t0*t0*T[(i-2)*ny+c-1])/(t0*t1*t2);
		}
		if( i==nx-1 ) {
			if( extra==1 )
				dx2 = 0.;
			else
				dx2 = (T[(nx-1)*ny+c-1]-T[(nx-2)*ny+c-1])/(T[(nx-1)*ny]-T[(nx-2)*ny]);
		}
		else if( r==0 )
			dx2 = (T[(i-1)*ny+c-1]-T[i*ny+c-1])/(T[(i-1)*ny]-T[i*ny]);
		else {
			t1 = T[(i+1)*ny]-T[i*ny];
			t2 = T[(i+1)*ny]-T[(i-1)*ny];
			dx2 = (t0*t0*T[(i+1)*ny+c-1]+t1*t2*T[i*ny+c-1]-t0*t2*T[i*ny+c-1]-t1*t1*T[(i-1)*ny+c-1])/(t0*t1*t2);
		}
		t1 = 1./t0;
		t1 = t1*t1*t1;
		if( dx==3 )
			return(6.*t1*(t0*(dx1+dx2)+2.*(T[(i-1)*ny+c-1]-T[i*ny+c-1])));
		else {
			x1 = x-T[(i-1)*ny];
			x2 = x-T[i*ny];
			if( dx==2 )
				return(2.*t1*(t0*((x1+2.*x2)*dx1+(x2+2.*x1)*dx2)-3.*(x2+x1)*(T[i*ny+c-1]-T[(i-1)*ny+c-1])));
			else if( dx==1 )
				return(t1*(t0*(x2*(x2+2.*x1)*dx1+x1*(x1+2.*x2)*dx2)-6.*x2*x1*(T[i*ny+c-1]-T[(i-1)*ny+c-1])));
			else
				return(t1*(t0*x2*x1*(x2*dx1+x1*dx2)+x2*x2*(-x2+3.*x1)*T[(i-1)*ny+c-1]-x1*x1*(-x1+3.*x2)*T[i*ny+c-1]));
		}
	}
}
#ifdef MSVC
#pragma optimize( "", on)
#endif

#ifdef MSVC
#pragma optimize( "gty", on)
#endif
#ifndef INCONTOL
#define INCONTOL 1e-14
#endif

static void LSQDecompSolve(M_INT n, double *A, M_INT Ainc, M_INT *ip, double *b)
{
	M_INT i,j,k,r,c,lsq,cp;
	double s,t;

	for(i=0;i<n;i++) {
		if(b[i]-b[i]!=0.0 || (b[i]!=0. && b[i]-2.*b[i]==0.)) { ip[n-1]=0; A[0]=1.; for(j=0;j<n;j++) b[j]=*dsn_undef; return; }
		t = fabs(A[i*Ainc]);
		for(j=1;j<n;j++) {
			s = fabs(A[i*Ainc+j]);
			if(s>t) t = s;
		}
		if( t==0.0 )
			A[i*Ainc+n] = 1.0;
		else {
			t = 1.0/t;
			for(j=0;j<n;j++) A[i*Ainc+j] *= t;
			b[i] *= t;
			A[i*Ainc+n] = t;
		}
	}

	for(j=0;j<n;j++) {
		t = fabs(A[j]);
		for(i=1;i<n;i++) {
			s = fabs(A[i*Ainc+j]);
			if(s>t) t = s;
		}
		if( t==0.0 )
			A[n*Ainc+j] = 1.0;
		else {
			t = 1.0/t;
			for(i=0;i<n;i++) A[i*Ainc+j] *= t;
			A[n*Ainc+j] = t;
		}
	}

	ip[n-1] = 0;
	lsq = 0;
	cp = 0;
	for(k=0;k<n;k++) {
		r = 0; c = 0; t = 0.0;
		if( cp<n ) {
			for(cp=cp+1;cp<n;cp++) {
				for(i=k;i<n;i++) {
					s = fabs(A[i*Ainc+cp]);
					if(s>t) { r = i; c = cp; t = s; }
				}
				if( t>0.5 ) break;
			}
		}
		if( cp>=n ) {
			for(i=k;i<n;i++)
				for(j=k;j<n;j++) {
					s = fabs(A[i*Ainc+j]);
					if(s>t) { r = i; c = j; t = s; }
				}
		}
		if( t<1e-10 ) {
			if( k==0 ) { ip[n-1]=0; A[0]=2.; for(j=0;j<n;j++) b[j]=*dsn_undef; return; }
			if( lsq ) { ip[n-1]=0; A[0]=3.; for(j=0;j<n;j++) b[j]=*dsn_undef; return; }
			lsq = 1;
			t = 1e-16;
			for(i=0;i<k;i++) {
				s = fabs(b[i]);
				if(s>t) t = s;
			}
			for(i=k;i<n;i++) {
				if( fabs(b[i])/t>INCONTOL*n ) { ip[n-1]=0; A[0]=4.; for(j=0;j<n;j++) b[j]=*dsn_undef; return; }
				b[i] = 0.0;
			}

			for(r=k;r<n;r++) {
				for(i=k;i<n;i++) A[i*Ainc+n+r] = 0.0;
				A[r*Ainc+n+r] = 1.0;
				A[(k-1)*Ainc+n+r] = -A[(k-1)*Ainc+r]/A[(k-1)*Ainc+k-1];
				for(i=k-1;i>=0;i--) {
					A[i*Ainc+n+r] = A[i*Ainc+r];
					for(j=i+1;j<k;j++)
						A[i*Ainc+n+r] += A[i*Ainc+j]*A[j*Ainc+n+r];
					A[i*Ainc+n+r] = -A[i*Ainc+n+r]/A[i*(Ainc+1)];
				}
			}
			for(r=0;r<k;r++) {
				s = -1.0/A[r*(Ainc+1)];
				for(i=k;i<n;i++)
					if( A[r*Ainc+n+i]!=0.0 ) {
						t = s*A[r*Ainc+n+i];
						A[i*Ainc+r] += t;
						for(j=r+1;j<n;j++)
							A[j*Ainc+n+i] += t*A[r*Ainc+j];
						b[i] += t*b[r];
					}
			}
			for(i=k;i<n;i++)
				for(j=k;j<n;j++)
					A[i*Ainc+j] = A[j*Ainc+n+i];
			r = 0; c = 0; t = 0.0;
			for(i=k;i<n;i++)
				for(j=k;j<n;j++) {
					s = fabs(A[i*Ainc+j]);
					if(s>t) { r = i; c = j; t = s; }
				}
			if( t<1e-10 ) { ip[n-1]=0; A[0]=3.; for(j=0;j<n;j++) b[j]=*dsn_undef; return; }
		}
		if( !lsq ) ip[n-1]++;
		if( k==n-1 ) break;
		ip[k] = r;
		ip[n+k] = c;
		if( r>k ) {
			for(j=0;j<n;j++) {
				t = A[r*Ainc+j]; A[r*Ainc+j] = A[k*Ainc+j]; A[k*Ainc+j] = t;
			}
			t = b[r]; b[r] = b[k]; b[k] = t;
		}
		if( c>k )
			for(i=0;i<n;i++) {
				t = A[i*Ainc+c]; A[i*Ainc+c] = A[i*Ainc+k]; A[i*Ainc+k] = t;
			}
		s = -1.0/A[k*(Ainc+1)];
		for(i=k+1;i<n;i++)
			if( A[i*Ainc+k]!=0.0 ) {
				t = s*A[i*Ainc+k];
				A[i*Ainc+k] = t;
				for(j=k+1;j<n;j++)
					A[i*Ainc+j] += t*A[k*Ainc+j];
				b[i] += t*b[k];
			}
	}
	for(j=n-1;j>0;j--) {
		b[j] = b[j]/A[j*(Ainc+1)];
		t = -b[j];
		for(i=0;i<j;i++)
			b[i] += t*A[i*Ainc+j];
	}
	b[0] = b[0]/A[0];
	for(j=n-2;j>=0;j--) {
		i = ip[n+j];
		if(i!=j) {
			t = b[i]; b[i] = b[j]; b[j] = t;
		}
	}
	for(j=0;j<n;j++) b[j] *= A[n*Ainc+j];
}
#ifdef MSVC
#pragma optimize( "", on)
#endif

#ifdef MSVC
#pragma optimize( "gty", on)
#endif
static void DecompCInc(M_INT n, double *A, M_INT Ainc, M_INT *ip)
{
	M_INT i,j,k,m;
	double t;

	ip[n-1]=1;
	for(k=0;k<n-1;k++) {
		m=k;
		for(i=k+1;i<n;i++)
			if( fabs(A[i*Ainc+k])>fabs(A[m*Ainc+k]) ) m=i;
		ip[k]=m;
		if( m!=k ) ip[n-1]=-ip[n-1];
		t=A[m*Ainc+k]; A[m*Ainc+k]=A[(Ainc+1)*k]; A[(Ainc+1)*k]=t;
		if( t==0.0 ) { ip[n-1]=0; return; }
		t=-1.0/t;
		for(i=k+1;i<n;i++) A[i*Ainc+k]=A[i*Ainc+k]*t;
		for(j=k+1;j<n;j++) {
			t=A[m*Ainc+j]; A[m*Ainc+j]=A[k*Ainc+j]; A[k*Ainc+j]=t;
			if( t!=0.0 )
				for(i=k+1;i<n;i++) A[i*Ainc+j]+=A[i*Ainc+k]*t;
		}
	}
	if(A[(n-1)*(Ainc+1)]==0.0) ip[n-1]=0;
}
#ifdef MSVC
#pragma optimize( "", on)
#endif

#ifdef MSVC
#pragma optimize( "gty", on)
#endif
static void MultiSolveCInc(M_INT n, double *A, M_INT Ainc, M_INT *ip, M_INT nb, double *b, M_INT binc)
{
	M_INT i,j,k,m;
	double t;

	if( n>1 ) {
		for(j=0;j<n-1;j++) {
			m=ip[j];
			for(k=0;k<nb;k++) {
				t=b[m*binc+k]; b[m*binc+k]=b[j*binc+k]; b[j*binc+k]=t;
				for(i=j+1;i<n;i++) b[i*binc+k]+=A[i*Ainc+j]*t;
			}
		}
		for(j=n-1;j>0;j--) {
			for(k=0;k<nb;k++) {
				b[j*binc+k]=b[j*binc+k]/A[(Ainc+1)*j];
				t=-b[j*binc+k];
				for(i=0;i<=j-1;i++) b[i*binc+k]+=A[i*Ainc+j]*t;
			}
		}
	}
	for(k=0;k<nb;k++)
		b[k]=b[k]/A[0];
}
#ifdef MSVC
#pragma optimize( "", on)
#endif

static void fp(int N, double T, double *Y, double *YP)
{
	double M[3120], V[39], Z[366], td1;
	int ti1, ti2;
	M_INT P[77];

	UNUSED(N);
	UNUSED(T);
	YP[13] = Y[14];
	YP[15] = Y[16];
	YP[17] = Y[18];
	YP[19] = Y[20];
	YP[21] = Y[22];
	YP[23] = Y[24];
	YP[43] = Y[44];
	YP[45] = Y[46];
	YP[47] = Y[48];
	YP[49] = Y[50];
	YP[51] = Y[52];
	YP[53] = Y[54];
	YP[55] = Y[56];
	YP[57] = Y[58];
	if( Y[364]==1. )
		Y[114] = 0.6;
	else
		Y[114] = Y[317];
	if( Y[365]==1. )
		Y[83] = 0.1385;
	else
		Y[83] = Y[114];
	Z[0] = Y[340];
	Z[1] = Y[341];
	Z[2] = Y[344];
	Z[3] = 1.+exp(0.00008450763496000000139*Z[1]+0.000315278738799999998*Z[2]+0.0005037392528000000002*Z[0]-0.0019783356);
	Z[0] = 1.+exp(-0.0146045799800000007*Z[0]+0.03145354740000000086*Z[1]+1.984229856-0.0007411698689999999887*Z[2]);
	Z[1] = 1.0/Z[3];
	Z[0] = 1.0/Z[0];
	Z[0] = 563.9595015*Z[0]-11706.40861*Z[1]+5813.753691;
	if( Z[0]>2985. )
		Y[176] = 2985.;
	else
		Y[176] = Z[0];
	if( Y[368]==1. )
		Y[86] = 0.;
	else
		Y[86] = Y[176];
	Z[0] = Y[341];
	Z[1] = Y[343];
	Z[2] = Y[345];
	Y[158] = exp(-0.006509894979999999948*Z[1]-1.104309592999999974*Z[2]-0.00004049561058000000193*Y[86]-0.00407676428999999991*Z[0]+8.698917606399999846);
	Z[3] = Y[158]+1.;
	Z[3] = 1.0/Z[3];
	Y[159] = Z[3];
	Y[160] = exp(-0.01308644105999999952*Z[0]-6.78042825*Z[2]-0.0003326444279999999698*Z[1]-0.0007575064857999999843*Y[86]+8.074939774800000779);
	Z[3] = Y[160]+1.;
	Z[3] = 1.0/Z[3];
	Y[161] = Z[3];
	Y[162] = exp(0.001214909664000000081*Z[1]-0.005774924930000000014*Z[0]-1.338672356000000078*Z[2]+0.0004592437716000000222*Y[86]-1.659525665600000118);
	Z[0] = 1.+Y[162];
	Z[0] = 1.0/Z[0];
	Y[163] = Z[0];
	Y[164] = exp(-13.330746*Y[161]-1.882491648*Y[159]+9.012985301999999699+6.12882602*Y[163]);
	Y[165] = exp(3.534658292000000181*Y[161]-1.405248497000000007*Y[163]+5.409651545999999704-16.17475581000000135*Y[159]);
	Y[166] = exp(-7.111244464*Y[163]+18.34747718999999921*Y[159]-12.30903434+10.32570107*Y[161]);
	Z[0] = Y[164]+Y[165]+Y[166];
	Z[0] = 1.0/Z[0];
	Y[167] = Z[0];
	Y[91] = Y[164]*Y[167];
	Y[92] = Y[165]*Y[167];
	if( Y[92]<Y[91] )
		Y[93] = Y[91];
	else
		Y[93] = Y[92];
	Y[94] = Y[166]*Y[167];
	if( Y[369]==1. )
		Y[168] = 1.;
	else
		Y[168] = 2.;
	if( Y[370]==1. )
		Y[169] = Y[168];
	else
		Y[169] = 3.;
	Y[87] = fabs(Y[169]-3.);
	Y[88] = fabs(Y[169]-2.);
	Y[89] = fabs(1.-Y[169]);
	Y[90] = fabs(Y[345]-2.);
	if( Y[360]==1. )
		Y[157] = 2.;
	else
		Y[157] = Y[169];
	if( Y[359]==1. )
		Y[156] = 3.;
	else
		Y[156] = Y[157];
	if( Y[358]==1. )
		Y[170] = 1.;
	else
		Y[170] = Y[156];
	Z[0] = Y[341];
	Y[154] = exp(-0.0694599175*Z[0]-0.001172770010000000011*Y[86]+4.346906143999999919);
	Z[1] = 1.+Y[154];
	Z[1] = 1.0/Z[1];
	Y[146] = Z[1];
	Y[147] = exp(0.005362758708000000003*Y[86]+0.1416826747999999993*Z[0]-10.32393769600000021);
	Z[1] = Y[147]+1.;
	Z[1] = 1.0/Z[1];
	Y[148] = Z[1];
	Y[149] = exp(0.004251978384000000178*Y[86]-0.02152778822000000103*Z[0]+1.140205516799999893);
	Z[0] = Y[149]+1.;
	Z[0] = 1.0/Z[0];
	Y[150] = Z[0];
	Y[151] = exp(5.391837056*Y[150]-7.449609221999999872-6.406134936000000336*Y[146]+10.06095687000000039*Y[148]);
	Y[152] = exp(6.019258172000000288*Y[146]-11.02172041000000084*Y[148]+8.766283122999999789-6.57330262200000004*Y[150]);
	Z[0] = Y[151]+Y[152];
	Z[0] = 1.0/Z[0];
	Y[153] = Z[0];
	Y[84] = Y[151]*Y[153]-Y[470];
	Y[85] = Y[152]*Y[153]+Y[470];
	if( Y[379]==1. )
		Y[155] = 1.;
	else
		Y[155] = 2.;
	if( Y[377]==1. )
		Y[171] = 1.;
	else
		Y[171] = Y[155];
	if( Y[378]==1. )
		Y[82] = Y[170];
	else
		Y[82] = Y[171];
	if( Y[380]==1. )
		Y[70] = 1.;
	else
		Y[70] = 0.;
	Z[365] = fabs(1.-Y[82]);
	Y[75] = Z[365];
	Y[76] = fabs(Y[82]-2.);
	Z[0] = Y[343];
	Z[1] = Y[342];
	Y[137] = exp(-0.023422418*Y[82]-1.480977187000000037e-06*Z[1]+7.630147083999999984e-06*Z[0]+0.0004510015627999999912*Y[86]-0.1874543644135999964);
	Y[138] = exp(-0.000852900286000000071*Y[86]+4.940390030000000233*Y[82]+7.649075493999999985e-06*Z[1]-0.002044945318000000033*Z[0]-5.236141851967999733);
	Z[2] = Y[138]+1.;
	Z[2] = 1.0/Z[2];
	Y[139] = Z[2];
	Y[140] = exp(0.0005388736785999999701*Z[1]-0.002351850793999999966*Z[0]-1.725444265000000061*Y[82]+0.0004967711692000000315*Y[86]+6.512219151999999956);
	Z[2] = 1.+Y[140];
	Z[2] = 1.0/Z[2];
	Y[141] = Z[2];
	Y[142] = exp(0.01296364585000000006*Z[0]+11.18816088*Y[82]+0.0006675389727999999919*Z[1]-0.004988160068000000009*Y[86]-50.29154530080000014);
	Z[2] = 1.+Y[142];
	Z[2] = 1.0/Z[2];
	Y[143] = Z[2];
	Y[144] = exp(0.00273488415799999981*Y[86]-5.303485176000000159*Y[82]+0.0003078136158000000077*Z[1]-0.001044729023000000002*Z[0]+16.43925461887999997);
	Z[0] = 1.+Y[144];
	Z[0] = 1.0/Z[0];
	Y[145] = Z[0];
	Z[0] = Y[137]+1.;
	Z[0] = 1.0/Z[0];
	Y[79] = 22.8834652+3.167767011000000285*Y[145]-31.1664187*Y[141]-45.45661445*Z[0]-22.15198442*Y[139]+15.57240473*Y[143];
	if( Y[352]==1. )
		Y[131] = 0.;
	else
		Y[131] = -1.218955439388205472*Y[79]+2.723265917998220569*Y[139]+17.3375249375907092-18.70990944001188124*Y[143]+90.68710669938471643*Y[141]-106.3212786712270323*Y[145];
	if( Y[461]<Y[131] )
		Y[130] = Y[131];
	else
		Y[130] = Y[461];
	Z[364] = fabs(Y[86]);
	Y[81] = Z[364];
	if( Y[130]<Y[460] )
		Y[173] = Y[130];
	else
		Y[173] = Y[460];
	Y[80] = Z[365];
	if( Y[357]==1. )
		Y[136] = Y[464]-1.;
	else
		Y[136] = Y[79];
	if( Y[356]==1. )
		Y[135] = 0.;
	else
		Y[135] = Y[136];
	if( Y[463]<Y[135] )
		Y[134] = Y[135];
	else
		Y[134] = Y[463];
	Y[78] = Z[364];
	if( Y[134]<Y[462] )
		Y[174] = Y[134];
	else
		Y[174] = Y[462];
	Y[77] = Z[365];
	if( Y[355]==1. )
		Y[133] = 0.;
	else
		Y[133] = 19.95250828672305577*Y[79]-32.49955842738542988*Y[145]+47.18511896806133128-296.4914221895303092*Y[143]+413.4673298174100238*Y[139]+582.078241979230407*Y[141];
	if( Y[466]<Y[133] )
		Y[132] = Y[133];
	else
		Y[132] = Y[466];
	if( Y[132]<Y[465] )
		Y[175] = Y[132];
	else
		Y[175] = Y[465];
	Y[198] = atan(Y[60]);
	Z[357] = sin(Y[13]);
	Z[358] = cos(Y[17]);
	Z[359] = cos(Y[13]);
	Z[360] = sin(Y[17]);
	Z[361] = sin(Y[23]);
	Z[362] = cos(Y[23]);
	Z[363] = tan(Y[318]);
	Z[0] = Z[358];
	Z[1] = Z[357];
	Z[2] = Z[362];
	Z[3] = Z[360];
	Z[4] = Z[361];
	Z[5] = Z[359];
	Z[6] = Z[0]*Z[2];
	Z[7] = Z[3]*Z[4];
	Z[8] = Z[7]-Z[1]*Z[6];
	Z[9] = Z[3]*Z[2];
	Z[10] = Z[0]*Z[4];
	Z[11] = Z[9]*Z[1]+Z[10];
	Z[12] = Z[2]*Z[5];
	Z[13] = 0.7396;
	Z[14] = 1.3745;
	Z[15] = Z[363];
	Z[16] = -0.76*Z[15]+2.79;
	Z[16] = 1.0/Z[16];
	Z[17] = atan(2.79*Z[15]*Z[16]);
	Z[18] = sin(Z[17]);
	Z[17] = cos(Z[17]);
	Z[19] = Z[8]*Z[18]-Z[11]*Z[17];
	Z[20] = 1.-Z[19]*Z[19];
	Z[21] = fabs(Z[20])+1e-20;
	Z[9] = Z[10]*Z[1]+Z[9];
	Z[6] = Z[6]-Z[1]*Z[7];
	Z[7] = Y[18]*Z[1]+Y[24];
	Z[10] = Y[14]*Z[2];
	Z[22] = -500.;
	Z[12] = (Z[8]*Z[14]+Z[11]*Z[13]+Y[21]-Z[12]*Y[43]+0.25*Z[12])/sqrt(Z[21]);
	Z[2] = Z[22]*(Z[5]*(Z[2]*(Y[16]*Z[1]+Z[5]*(Z[2]*Y[22]-Z[4]*Y[20])-Y[44])+Y[43]*Z[4]*Z[7])+Z[8]*(Z[0]*Z[5]*Y[16]+Z[9]*Y[20]+Z[8]*Y[22])+Z[11]*(Z[6]*Y[20]+Z[11]*Y[22]-Z[3]*Z[5]*Y[16])+Z[7]*(Z[6]*Z[13]+Z[9]*Z[14]-0.25*Z[5]*Z[4])+(Y[43]*Z[1]-Z[5]*(Z[0]*Z[14]-Z[3]*Z[13])-0.25*Z[1])*(Z[10]-Y[18]*Z[5]*Z[4]))+107920.-304000.*Z[12];
	if( Z[2]>1. )
		Y[201] = Z[2];
	else
		Y[201] = 1.;
	Y[192] = Interp1Dsim(2,2,Y[198],0);
	Y[193] = Interp1Dsim(2,3,Y[198],0);
	Y[194] = Interp1Dsim(2,4,Y[198],0);
	Y[195] = Interp1Dsim(2,5,Y[198],0);
	Y[188] = Interp1Dsim(1,2,Y[0],0);
	Y[189] = Interp1Dsim(1,3,Y[0],0);
	Y[190] = Interp1Dsim(1,4,Y[0],0);
	Y[191] = Interp1Dsim(1,5,Y[0],0);
	Z[7] = Y[192]*Y[0];
	Y[199] = Y[194]*sin(Y[193]*atan(Z[7]-Y[195]*(Z[7]-atan(Z[7]))))*Y[201];
	Y[196] = -asin(Z[19]);
	Z[7] = Y[188]*(Y[198]-0.01);
	Y[200] = -(Y[190]*sin(Y[189]*atan(Y[191]*(atan(Z[7])-Z[7])+Z[7]))+0.17)*Y[201];
	Y[197] = Z[12];
	Z[7] = Z[15]*Z[15];
	Z[8] = 1.+7.7841*Z[7]*Z[16]*Z[16];
	Z[0] = Z[5]*(Z[18]*Z[0]+Z[3]*Z[17]);
	Z[3] = 1.0/Z[8];
	Z[3] = Y[314]*(1.+Z[7])*Z[16]*(2.79+2.1204*Z[15]*Z[16])*Z[3]+Y[18];
	Z[6] = Z[9]*Z[18]-Z[6]*Z[17];
	Z[7] = 1.0/Z[20];
	Y[99] = -(Z[0]*(Z[1]*Z[3]+Y[24]-Z[0]*Y[52])+(Z[10]-Z[3]*Z[4]*Z[5]-Z[6]*Y[52])*Z[6])*Z[7];
	Y[202] = 0.34*Y[201]*(0.0001003729355354288759*Y[200]+0.2918-2.7037*Y[196]);
	if( Y[437]==1. ) {
		Z[0] = fabs(Y[99]);
		Y[203] = (0.000229841937769589821*Y[201]*sqrt(Z[0]))/Y[197];
	}
	else {
		if( Y[99]>=0. )
			td1 = -0.000229841937769589821*sqrt(fabs(Y[99]));
		else
			td1 = 0.;
		Y[203] = (Y[201]*td1)/Y[197];
	}
	Y[214] = atan(Y[61]);
	Z[0] = Z[358];
	Z[1] = Z[357];
	Z[2] = Z[362];
	Z[3] = Z[360];
	Z[4] = Z[361];
	Z[5] = Z[359];
	Z[6] = Z[2]*Z[5];
	Z[7] = Z[0]*Z[2];
	Z[8] = Z[3]*Z[4];
	Z[9] = Z[1]*Z[7]-Z[8];
	Z[10] = Z[3]*Z[2];
	Z[11] = Z[0]*Z[4];
	Z[12] = Z[10]*Z[1]+Z[11];
	Z[13] = 0.7361;
	Z[14] = 1.4755;
	Z[15] = 0.25;
	Z[16] = 1.-Z[12]*Z[12];
	Z[17] = fabs(Z[16])+1e-20;
	Z[10] = Z[1]*Z[11]+Z[10];
	Z[7] = Z[1]*Z[8]-Z[7];
	Z[8] = Z[3]*Z[5];
	Z[11] = Y[18]*Z[1];
	Z[18] = Z[11]+Y[24];
	Z[19] = Y[18]*Z[5]*Z[4];
	Z[20] = Y[14]*Z[2];
	Z[21] = 500.;
	Z[6] = (Z[6]*Z[15]+Z[9]*Z[14]+Z[12]*Z[13]+Y[21]-Z[6]*Y[47])/sqrt(Z[17]);
	Z[0] = Z[21]*(Z[5]*(Z[2]*(Y[48]+Z[5]*(Z[4]*Y[20]-Z[2]*Y[22])-Y[16]*Z[1])-Y[47]*Z[4]*Z[18])+Z[9]*(Z[0]*Z[5]*Y[16]+Z[10]*Y[20]-Z[9]*Y[22])+Z[12]*(Z[8]*Y[16]+Z[7]*Y[20]-Z[12]*Y[22])+(Y[47]*Z[1]+Z[5]*(Z[0]*Z[14]+Z[3]*Z[13])-Z[1]*Z[15])*(Z[19]-Z[20])-Z[18]*(-(Z[4]*Z[5]*Z[15]+Z[7]*Z[13]+Z[10]*Z[14])))+107920.-304000.*Z[6];
	if( Z[0]>1. )
		Y[217] = Z[0];
	else
		Y[217] = 1.;
	Y[208] = Interp1Dsim(2,2,Y[214],0);
	Y[209] = Interp1Dsim(2,3,Y[214],0);
	Y[210] = Interp1Dsim(2,4,Y[214],0);
	Y[211] = Interp1Dsim(2,5,Y[214],0);
	Y[204] = Interp1Dsim(1,2,Y[1],0);
	Y[205] = Interp1Dsim(1,3,Y[1],0);
	Y[206] = Interp1Dsim(1,4,Y[1],0);
	Y[207] = Interp1Dsim(1,5,Y[1],0);
	Z[1] = Y[208]*Y[1];
	Y[215] = Y[210]*sin(Y[209]*atan(Z[1]-Y[211]*(Z[1]-atan(Z[1]))))*Y[217];
	Y[212] = asin(Z[12]);
	Z[1] = Y[204]*(Y[214]-0.01);
	Y[216] = -(Y[206]*sin(Y[205]*atan(Y[207]*(atan(Z[1])-Z[1])+Z[1]))+0.17)*Y[217];
	Y[213] = Z[6];
	Z[1] = 1.0/Z[16];
	Y[100] = (Z[7]*(Z[7]*Y[56]+Z[19]-Z[20])+Z[8]*(Z[8]*Y[56]-Y[24]-Z[11]))*Z[1];
	Y[218] = 0.34*Y[217]*(0.0001003729355354288759*Y[216]+0.2918-2.7037*Y[212]);
	if( Y[438]==1. ) {
		Z[0] = fabs(Y[100]);
		Y[219] = (0.000229841937769589821*Y[217]*sqrt(Z[0]))/Y[213];
	}
	else {
		if( Y[100]>=0. )
			td1 = -0.000229841937769589821*sqrt(fabs(Y[100]));
		else
			td1 = 0.;
		Y[219] = (Y[217]*td1)/Y[213];
	}
	Y[230] = atan(Y[62]);
	Z[0] = Z[358];
	Z[1] = Z[357];
	Z[2] = Z[362];
	Z[3] = Z[360];
	Z[4] = Z[361];
	Z[5] = Z[359];
	Z[6] = Z[0]*Z[2];
	Z[7] = Z[3]*Z[4];
	Z[8] = Z[1]*Z[6]-Z[7];
	Z[9] = Z[3]*Z[2];
	Z[10] = Z[0]*Z[4];
	Z[11] = Z[9]*Z[1]+Z[10];
	Z[12] = Z[2]*Z[5];
	Z[13] = 1.3745;
	Z[14] = 0.8424;
	Z[15] = Z[363];
	Z[16] = 0.76*Z[15]+2.79;
	Z[16] = 1.0/Z[16];
	Z[17] = atan(2.79*Z[15]*Z[16]);
	Z[18] = sin(Z[17]);
	Z[17] = cos(Z[17]);
	Z[19] = Z[8]*Z[18]+Z[11]*Z[17];
	Z[20] = 1.-Z[19]*Z[19];
	Z[21] = fabs(Z[20])+1e-20;
	Z[9] = Z[10]*Z[1]+Z[9];
	Z[6] = Z[1]*Z[7]-Z[6];
	Z[7] = Y[18]*Z[1]+Y[24];
	Z[10] = Y[14]*Z[2];
	Z[22] = 500.;
	Z[12] = (Y[21]-Z[12]*Y[45]-Z[8]*Z[13]-Z[11]*Z[14]+0.25*Z[12])/sqrt(Z[21]);
	Z[2] = Z[22]*(Z[5]*(Z[2]*(Y[46]+Z[5]*(Z[4]*Y[20]-Z[2]*Y[22])-Y[16]*Z[1])-Y[45]*Z[4]*Z[7])+Z[8]*(Z[0]*Z[5]*Y[16]+Z[9]*Y[20]-Z[8]*Y[22])+Z[11]*(Z[3]*Z[5]*Y[16]+Z[6]*Y[20]-Z[11]*Y[22])+(Y[45]*Z[1]-Z[5]*(Z[0]*Z[13]+Z[3]*Z[14])-0.25*Z[1])*(Y[18]*Z[5]*Z[4]-Z[10])-Z[7]*(Z[6]*Z[14]+Z[9]*Z[13]-0.25*Z[5]*Z[4]))+107920.-304000.*Z[12];
	if( Z[2]>1. )
		Y[233] = Z[2];
	else
		Y[233] = 1.;
	Y[224] = Interp1Dsim(2,2,Y[230],0);
	Y[225] = Interp1Dsim(2,3,Y[230],0);
	Y[226] = Interp1Dsim(2,4,Y[230],0);
	Y[227] = Interp1Dsim(2,5,Y[230],0);
	Y[220] = Interp1Dsim(1,2,Y[2],0);
	Y[221] = Interp1Dsim(1,3,Y[2],0);
	Y[222] = Interp1Dsim(1,4,Y[2],0);
	Y[223] = Interp1Dsim(1,5,Y[2],0);
	Z[7] = Y[224]*Y[2];
	Y[231] = Y[226]*sin(Y[225]*atan(Z[7]-Y[227]*(Z[7]-atan(Z[7]))))*Y[233];
	Y[228] = asin(Z[19]);
	Z[7] = Y[220]*(Y[230]-0.01);
	Y[232] = -(Y[222]*sin(Y[221]*atan(Z[7]-Y[223]*(Z[7]-atan(Z[7]))))+0.17)*Y[233];
	Y[229] = Z[12];
	Z[7] = Z[15]*Z[15];
	Z[8] = 1.+7.7841*Z[7]*Z[16]*Z[16];
	Z[0] = Z[5]*(Z[18]*Z[0]+Z[3]*Z[17]);
	Z[3] = 1.0/Z[8];
	Z[3] = Y[314]*(1.+Z[7])*Z[16]*(2.79-2.1204*Z[15]*Z[16])*Z[3]+Y[18];
	Z[6] = Z[6]*Z[17]+Z[9]*Z[18];
	Z[7] = 1.0/Z[20];
	Y[101] = 1.*((Z[3]*Z[4]*Z[5]+Z[6]*Y[54]-Z[10])*Z[6]-Z[0]*(Z[1]*Z[3]+Y[24]-Z[0]*Y[54]))*Z[7];
	Y[234] = 0.34*Y[233]*(-0.0001003729355354288759*Y[232]-0.2918+2.7037*Y[228]);
	if( Y[439]==1. ) {
		Z[0] = fabs(Y[101]);
		Y[235] = (0.000229841937769589821*Y[233]*sqrt(Z[0]))/Y[229];
	}
	else {
		if( Y[101]>=0. )
			td1 = -0.000229841937769589821*sqrt(fabs(Y[101]));
		else
			td1 = 0.;
		Y[235] = (Y[233]*td1)/Y[229];
	}
	Y[246] = atan(Y[63]);
	Z[0] = Z[358];
	Z[1] = Z[357];
	Z[2] = Z[362];
	Z[3] = Z[360];
	Z[4] = Z[361];
	Z[5] = Z[359];
	Z[6] = Z[0]*Z[2];
	Z[7] = Z[3]*Z[4];
	Z[8] = Z[1]*Z[6]-Z[7];
	Z[9] = Z[3]*Z[2];
	Z[10] = Z[0]*Z[4];
	Z[11] = Z[9]*Z[1]+Z[10];
	Z[12] = Z[2]*Z[5];
	Z[13] = 0.8389;
	Z[14] = 1.4755;
	Z[15] = 1.-Z[11]*Z[11];
	Z[16] = fabs(Z[15])+1e-20;
	Z[9] = Z[10]*Z[1]+Z[9];
	Z[10] = Z[0]*Z[5]*Y[16]+Z[9]*Y[20]-Z[8]*Y[22];
	Z[6] = Z[1]*Z[7]-Z[6];
	Z[7] = Z[3]*Z[5];
	Z[17] = Z[7]*Y[16]+Z[6]*Y[20]-Z[11]*Y[22];
	Z[18] = Z[5]*(Z[4]*Y[20]-Z[2]*Y[22])-Y[16]*Z[1];
	Z[19] = Y[18]*Z[1];
	Z[20] = Z[19]+Y[24];
	Z[21] = Y[18]*Z[5]*Z[4];
	Z[22] = Y[14]*Z[2];
	Z[23] = Z[8]*Z[10];
	Z[24] = Z[11]*Z[17];
	Z[25] = 500.;
	Z[8] = (Z[8]*Z[14]+Y[21]-Z[12]*Y[49]-Z[11]*Z[13]+0.25*Z[12])/sqrt(Z[16]);
	Z[2] = Z[25]*(Z[5]*(Z[2]*(Y[50]+Z[18])-Y[49]*Z[4]*Z[20])+(Y[49]*Z[1]-Z[5]*(Z[3]*Z[13]-Z[0]*Z[14])-0.25*Z[1])*(Z[21]-Z[22])+Z[23]+Z[24]-Z[20]*(Z[6]*Z[13]-Z[9]*Z[14]-0.25*Z[5]*Z[4]))+107920.-304000.*Z[8];
	if( Z[2]>1. )
		Y[249] = Z[2];
	else
		Y[249] = 1.;
	Y[240] = Interp1Dsim(2,2,Y[246],0);
	Y[241] = Interp1Dsim(2,3,Y[246],0);
	Y[242] = Interp1Dsim(2,4,Y[246],0);
	Y[243] = Interp1Dsim(2,5,Y[246],0);
	Y[236] = Interp1Dsim(1,2,Y[3],0);
	Y[237] = Interp1Dsim(1,3,Y[3],0);
	Y[238] = Interp1Dsim(1,4,Y[3],0);
	Y[239] = Interp1Dsim(1,5,Y[3],0);
	Z[13] = Y[240]*Y[3];
	Y[247] = Y[242]*sin(Y[241]*atan(Z[13]-Y[243]*(Z[13]-atan(Z[13]))))*Y[249];
	Y[244] = asin(Z[11]);
	Z[11] = Y[236]*(Y[246]-0.01);
	Y[248] = -(Y[238]*sin(Y[237]*atan(Z[11]-Y[239]*(Z[11]-atan(Z[11]))))+0.17)*Y[249];
	Y[245] = Z[8];
	Z[8] = 1.0/Z[15];
	Y[102] = (Z[6]*(Z[6]*Y[58]+Z[21]-Z[22])+Z[7]*(Z[7]*Y[58]-Y[24]-Z[19]))*Z[8];
	Y[250] = 0.34*Y[249]*(-0.0001003729355354288759*Y[248]-0.2918+2.7037*Y[244]);
	Y[185] = Z[5]*(Z[0]*Z[10]+Z[3]*Z[17])-Z[1]*Z[18];
	Y[186] = Z[4]*Z[5]*Z[18]+Z[6]*Z[17]+Z[9]*Z[10];
	Y[187] = -(Z[12]*Z[18]+Z[23]+Z[24]);
	if( Y[440]==1. ) {
		Z[0] = fabs(Y[102]);
		Y[251] = (0.000229841937769589821*Y[249]*sqrt(Z[0]))/Y[245];
	}
	else {
		if( Y[102]>=0. )
			td1 = -0.000229841937769589821*sqrt(fabs(Y[102]));
		else
			td1 = 0.;
		Y[251] = (Y[249]*td1)/Y[245];
	}
	Z[0] = fabs(Y[185]*Y[185]+Y[186]*Y[186]+Y[187]*Y[187]);
	Y[184] = sqrt(Z[0]);
	Y[182] = -0.97745445*Y[185]*Y[184];
	Y[183] = -0.97745445*Y[186]*Y[184];
	Y[252] = Z[357]*Y[18]+Y[24];
	for(ti1=0;ti1<=38;ti1++)
		for(ti2=0;ti2<=38;ti2++)
			M[ti1*78+ti2] = 0.;
	for(ti1=0;ti1<=38;ti1++)
		V[ti1] = 0.;
	M[2357] = -1.;
	if( Y[319]==1. ) {
		M[1039] = 0.0001;
		V[13] = -0.0001*Y[56];
		M[2363] = -1.;
	}
	else {
		M[1037] = -1.;
		M[2365] = 0.0001;
		if( Y[366]!=1. ) {
			if( Y[328]==1. ) {
				V[13] = Y[11];
				V[30] = -Y[11];
			}
			else if( Y[327]==1. ) {
				V[13] = -Y[11];
				V[30] = Y[11];
			}
			else if( Y[320]==1. ) {
				V[13] = Y[11];
				V[30] = -Y[11];
			}
			else {
				V[13] = -Y[11];
				V[30] = Y[11];
			}
		}
	}
	M[2436] = -1.;
	if( Y[321]==1. ) {
		M[1196] = 0.0001;
		V[15] = -0.0001*Y[58];
		M[2442] = -1.;
	}
	else {
		M[1194] = -1.;
		M[2444] = 0.0001;
		if( Y[366]!=1. ) {
			if( Y[330]==1. ) {
				V[15] = Y[11];
				V[31] = -Y[11];
			}
			else if( Y[329]==1. ) {
				V[15] = -Y[11];
				V[31] = Y[11];
			}
			else if( Y[322]==1. ) {
				V[15] = Y[11];
				V[31] = -Y[11];
			}
			else {
				V[15] = -Y[11];
				V[31] = Y[11];
			}
		}
	}
	M[2515] = -1.;
	if( Y[323]==1. ) {
		M[1509] = 0.0001;
		V[19] = -0.0001*Y[52];
		M[2517] = -1.;
		M[2534] = -1.;
	}
	else {
		M[1503] = -1.;
		M[1520] = -1.;
		M[2523] = 0.0001;
		if( Y[367]!=1. ) {
			if( Y[332]==1. ) {
				V[19] = Y[12];
				V[32] = -Y[12];
			}
			else if( Y[331]==1. ) {
				V[19] = -Y[12];
				V[32] = Y[12];
			}
			else if( Y[324]==1. ) {
				V[19] = Y[12];
				V[32] = -Y[12];
			}
			else {
				V[19] = -Y[12];
				V[32] = Y[12];
			}
		}
	}
	M[2594] = -1.;
	if( Y[325]==1. ) {
		M[1666] = 0.0001;
		V[21] = -0.0001*Y[54];
		M[2596] = -1.;
		M[2612] = -1.;
	}
	else {
		M[1660] = -1.;
		M[1676] = -1.;
		M[2602] = 0.0001;
		if( Y[367]!=1. ) {
			if( Y[334]==1. ) {
				V[21] = Y[12];
				V[33] = -Y[12];
			}
			else if( Y[333]==1. ) {
				V[21] = -Y[12];
				V[33] = Y[12];
			}
			else if( Y[326]==1. ) {
				V[21] = Y[12];
				V[33] = -Y[12];
			}
			else {
				V[21] = -Y[12];
				V[33] = Y[12];
			}
		}
	}
	M[2682] = -1.;
	if( Y[335]==1. ) {
		M[1823] = 0.0001;
		V[23] = -0.01*Y[5];
		M[2690] = 2.;
	}
	else {
		M[1832] = 2.;
		M[2681] = 0.0001;
		if( Y[363]!=1. ) {
			if( Y[339]==1. ) {
				V[23] = Y[4];
				V[34] = -Y[4];
			}
			else if( Y[338]==1. ) {
				V[23] = -Y[4];
				V[34] = Y[4];
			}
			else if( Y[336]==1. ) {
				V[23] = Y[4];
				V[34] = -Y[4];
			}
			else {
				V[23] = -Y[4];
				V[34] = Y[4];
			}
		}
	}
	Z[0] = 1.0/Y[448];
	M[1903] = Z[0];
	M[1904] = Y[449]*Z[0];
	if( ( (Y[415]==1.) && (Y[405]==1.) ) || ( (Y[415]==0.) && (Y[405]==0.) ) )
		M[1908] = Y[448]*Y[451]*Z[0];
	else
		M[1908] = Y[448]*((1.-Y[451])/Y[451]+1.)*Z[0];
	M[1909] = -Z[0];
	M[2059] = 1.;
	if( ( (Y[416]==1.) && (Y[412]==1.) ) || ( (Y[416]==0.) && (Y[412]==0.) ) )
		M[2065] = Y[452]-1.;
	else
		M[2065] = (1.-Y[452])/Y[452];
	if( ( (Y[413]==1.) && (Y[406]==1.) ) || ( (Y[413]==0.) && (Y[406]==0.) ) ) {
		Z[0] = 1.-Y[453];
		Z[1] = Y[456]*Y[456];
		Z[2] = 1.-Z[1];
		Z[3] = 1.-Y[456];
		Z[4] = 1.0/Z[3];
		Z[2] = 1.0/Z[2];
		M[2762] = 1.*Y[456]*(1.-(((Z[0]-1.)*Y[456]+1.-Z[0])*Y[456]+1.-Z[0])*Y[456]-Z[0])*Z[2]*Z[4];
	}
	else {
		Z[0] = ((Y[456]-1.)*Y[456]-1.)*Y[456];
		Z[1] = Y[456]*Y[456];
		Z[2] = 1.-Z[1];
		Z[3] = 1.-Y[456];
		Z[4] = 1.0/Z[3];
		Z[2] = 1.0/Z[2];
		M[2762] = Y[456]*(((Z[0]+1.)*(1.-Y[453]))/Y[453]+Z[0]+1.)*Z[2]*Z[4];
	}
	Z[0] = ((-(Z[3]*Y[456]+1.))*Y[456]+1.)*Z[2]*Z[4];
	M[2763] = -Z[0];
	M[2764] = -Z[0];
	V[35] = 4.*Y[450]*Y[455]*Z[1]*(Y[7]*Y[449]-Y[6])*Z[2]*Z[4];
	if( ( (Y[414]==1.) && (Y[404]==1.) ) || ( (Y[414]==0.) && (Y[404]==0.) ) )
		M[2841] = 1.-Y[454];
	else
		M[2841] = (1.*(Y[454]-1.))/Y[454];
	M[2842] = 1.;
	M[2921] = 1.;
	if( Y[381]==1. )
		V[37] = Y[173];
	else {
		M[2918] = 1.;
		M[2919] = 1.;
		Z[0] = Y[456]+1.;
		Z[0] = 1.0/Z[0];
		V[37] = -(Y[6]*Y[456]+Y[7]*Y[449])*Z[0];
	}
	Z[0] = Z[357];
	Z[1] = Z[358];
	Z[2] = Z[359];
	Z[3] = Z[360];
	Z[4] = Z[2]*Z[2];
	Z[5] = Z[3]*Z[3];
	Z[6] = Z[0]*Z[0];
	Z[7] = Z[1]*Z[1];
	Z[8] = Z[4]*(Z[5]+Z[7])+Z[6];
	Z[9] = Z[361];
	Z[10] = Z[362];
	Z[11] = Z[0]*Z[1];
	Z[12] = Z[11]*Z[9];
	Z[13] = Z[3]*Z[10];
	Z[14] = Z[13]+Z[12];
	Z[15] = Z[0]*Z[3];
	Z[16] = Z[10]*Z[1];
	Z[17] = Z[16]-Z[9]*Z[15];
	Z[18] = Z[0]*Z[9];
	Z[19] = (Z[1]*Z[14]-Z[3]*Z[17]-Z[18])*Z[2];
	Z[20] = Z[11]*Z[10];
	Z[21] = Z[3]*Z[9];
	Z[22] = Z[21]-Z[20];
	Z[23] = Z[9]*Z[1];
	Z[24] = Z[15]*Z[10]+Z[23];
	Z[25] = Z[0]*Z[10];
	Z[26] = (Z[1]*Z[22]+Z[25]-Z[3]*Z[24])*Z[2];
	Z[27] = Z[0]*Z[8]+Z[2]*(Z[10]*Z[26]-Z[9]*Z[19]);
	Z[28] = 15.*Z[27];
	M[0] = -Z[28];
	Z[29] = 0.8424;
	Z[30] = Z[29]*Z[24];
	Z[31] = 1.3745*Z[22];
	Z[32] = 0.25*Z[2];
	Z[33] = Z[32]*Z[10];
	Z[34] = Z[31]+Z[33]-Z[30];
	Z[35] = 1.3745*Z[14];
	Z[32] = Z[32]*Z[9];
	Z[36] = Z[35]-Z[17]*Z[29]-Z[32];
	Z[37] = Z[2]*(Z[9]*Z[34]+Z[10]*Z[36]);
	Z[38] = 1.3745*Z[1];
	Z[39] = 0.25*Z[0];
	Z[29] = Z[2]*(Z[3]*Z[29]+Z[38])+Z[39];
	Z[40] = Z[2]*Z[10];
	Z[41] = Z[0]*Z[34]-Z[29]*Z[40];
	Z[42] = Z[2]*Z[9];
	Z[43] = Z[0]*Z[36]+Z[29]*Z[42];
	Z[44] = 15.*(Z[0]*Z[37]-Z[2]*(Z[9]*Z[41]+Z[10]*Z[43]));
	M[1] = Z[44];
	Z[45] = Z[9]*Z[9];
	Z[46] = Z[17]*Z[17];
	Z[47] = Z[4]*Z[45]+Z[14]*Z[14]+Z[46];
	Z[48] = Z[4]*Z[9];
	Z[49] = Z[17]*Z[24];
	Z[50] = Z[14]*Z[22]+Z[49]-Z[10]*Z[48];
	Z[51] = Z[10]*Z[50];
	Z[52] = Z[0]*Z[19]+Z[2]*(Z[51]-Z[9]*Z[47]);
	Z[53] = 15.*Z[52];
	M[2] = -Z[53];
	Z[54] = Z[24]*Z[24];
	Z[55] = Z[10]*Z[10];
	Z[56] = Z[4]*Z[55]+Z[22]*Z[22]+Z[54];
	Z[57] = Z[0]*Z[26]+Z[2]*(Z[10]*Z[56]-Z[9]*Z[50]);
	Z[58] = 15.*Z[57];
	M[3] = -Z[58];
	Z[45] = Z[55]+Z[45];
	Z[6] = Z[4]*Z[45]+Z[6];
	Z[55] = 15.*Z[6];
	M[5] = Z[55];
	Z[45] = Z[45]*Z[2];
	Z[59] = Z[10]*Z[34]-Z[45]*Y[45]-Z[9]*Z[36];
	Z[60] = Z[29]-Z[0]*Y[45];
	Z[61] = Z[9]*Z[60];
	Z[62] = Z[10]*Z[60];
	M[8] = 15.*(Z[2]*(Z[9]*Z[61]+Z[10]*Z[62])-Z[0]*Z[59]);
	Z[63] = Z[30]+Z[40]*(Y[45]-0.25)-Z[31];
	Z[64] = 20.6175*Z[14];
	Z[65] = Z[64]+Z[42]*(15.*Y[45]-3.75)-12.636*Z[17];
	Z[66] = 15.*Z[63];
	M[9] = Z[2]*(Z[9]*Z[66]-Z[10]*Z[65]);
	Z[67] = Z[363];
	Z[68] = 0.76*Z[67];
	Z[69] = Z[68]+2.79;
	Z[69] = 1.0/Z[69];
	Z[70] = 2.79*Z[67];
	Z[71] = atan(Z[70]*Z[69]);
	Z[72] = sin(Z[71]);
	Z[71] = cos(Z[71]);
	Z[73] = Z[2]*(Z[1]*Z[72]+Z[3]*Z[71]);
	Z[74] = Z[22]*Z[72]-Z[24]*Z[71];
	Z[75] = Z[74]*Z[74];
	Z[76] = 1.-Z[75];
	if( Z[76]<=0. ) {
		YP[0] = (*dsn_undef);
		return;
	}
	Z[77] = (1.0/(sqrt(Z[76])));
	Z[78] = -Z[73]*Z[77];
	Z[79] = Z[40]*Y[45];
	Z[76] = fabs(Z[76])+1e-20;
	Z[80] = (1.0/(sqrt(Z[76])));
	Z[30] = (Y[21]+Z[31]+Z[33]-Z[79]-Z[30])*Z[80];
	Z[81] = Z[14]*Z[72]-Z[17]*Z[71];
	Z[77] = -Z[81]*Z[77];
	Z[82] = Z[1]*Z[2];
	Z[83] = Z[82]*Y[16]+Z[14]*Y[20]+Z[22]*Y[22];
	Z[84] = Z[3]*Z[2];
	Z[85] = Z[17]*Y[20]+Z[24]*Y[22]-Z[84]*Y[16];
	Z[86] = Z[10]*Y[22]-Z[9]*Y[20];
	Z[87] = Z[0]*Y[16];
	Z[88] = Z[2]*Z[86]+Z[87];
	Z[89] = Y[18]*Z[0];
	Z[90] = Z[89]+Y[24];
	Z[91] = Y[14]*Z[10];
	Z[92] = Z[42]*Y[18];
	Z[93] = Z[91]-Z[92];
	Z[94] = Y[45]*Z[9]*Z[90];
	Z[95] = Z[24]*Z[85];
	Z[96] = Z[90]*Z[36];
	Z[97] = Z[22]*Z[83];
	Z[98] = Z[2]*(Z[10]*(Z[88]-Y[46])+Z[94])+Z[95]+Z[96]+Z[97]-Z[60]*Z[93];
	Z[99] = ( (500.*Z[98]-107919.+304000.*Z[30]<0.) ? -500.*Z[98]+107920.-304000.*Z[30] : 1. );
	Z[100] = Y[14]*Z[9];
	Z[101] = Z[40]*Y[18];
	Z[102] = Z[100]+Z[101];
	Z[103] = Z[9]*Z[102]+Z[10]*Z[93];
	Z[104] = Z[2]*Y[45];
	Z[105] = Z[104]*Z[103];
	Z[106] = Z[0]*Y[46]+Z[105];
	Z[107] = Z[102]*Z[0];
	Z[108] = Z[2]*(Z[10]*Z[90]*Y[45]+Z[9]*Y[46])-Z[107]*Y[45];
	Z[109] = Z[93]*Z[0];
	Z[94] = Z[2]*(Z[94]-Z[10]*Y[46])+Z[109]*Y[45];
	Z[110] = Z[1]*Z[85]+Z[3]*Z[83];
	Z[111] = Z[88]*Y[14]-Z[110]*Y[18];
	Z[112] = Z[1]*Z[83]-Z[3]*Z[85];
	Z[113] = Z[42]*Z[90]+Z[109];
	Z[114] = Z[40]*Z[90]-Z[107];
	Z[115] = Z[0]*Y[24];
	Z[116] = Z[115]+Y[18];
	Z[117] = (Z[1]*(-(Z[42]*Y[14]+Z[10]*Z[116]))+Z[21]*Z[90])*Y[20];
	Z[23] = (Z[10]*(Z[3]*Z[90]-Z[82]*Y[14])+Z[23]*Z[116])*Y[22];
	Z[118] = (Z[11]*Y[14]+Z[84]*Y[18])*Y[16]+Z[117]-Z[23];
	Z[119] = (Z[9]*(Z[84]*Y[14]+Z[1]*Z[90])+Z[13]*Z[116])*Y[20];
	Z[16] = (Z[3]*(Z[40]*Y[14]-Z[9]*Z[116])+Z[16]*Z[90])*Y[22];
	Z[120] = (Z[82]*Y[18]-Z[15]*Y[14])*Y[16]+Z[119]-Z[16];
	Z[121] = (Z[10]*Y[20]+Z[9]*Y[22])*Y[24];
	Z[122] = Y[14]*Y[16];
	Z[86] = Y[14]*Z[86]*Z[0];
	Z[123] = Z[2]*(Z[122]-Z[121])-Z[86];
	Z[124] = Z[101]*Y[24];
	Z[125] = Y[14]*(Z[89]-Y[24]);
	Z[126] = Z[125]*Z[9];
	Z[127] = Z[124]-Z[126];
	Z[128] = Z[92]*Y[24];
	Z[129] = Z[125]*Z[10];
	Z[130] = Z[128]+Z[129];
	Z[79] = Z[79]-Z[34];
	Z[131] = Z[42]*Y[45]+Z[36];
	Z[96] = Z[96]-Z[113]*Y[45]-Z[29]*Z[93];
	Z[132] = Z[114]*Y[45]+Z[34]*Z[90]-Z[29]*Z[102];
	Z[133] = (Z[123]-Y[14]*Z[112])*Z[0];
	Z[134] = (Z[3]*Z[120]+Z[111]-Z[1]*Z[118])*Z[2];
	Z[135] = Z[79]*Z[127]+Z[93]*Z[96]+Z[102]*Z[132]+Z[130]*Z[131]+Z[133]+Z[134];
	Z[136] = Z[93]*Z[94]-Z[102]*Z[108];
	Z[137] = 2.;
	Z[138] = Z[136]*Z[137]+Z[135];
	Z[139] = Z[85]*Y[24]-Z[2]*Z[83]*Y[14];
	Z[140] = Z[83]*Y[24];
	Z[141] = Z[3]*(Z[2]*Z[85]*Y[14]+Z[140]);
	Z[142] = Z[2]*Z[88];
	Z[143] = Y[18]*Z[112]+(Z[0]*Z[112]-Z[142])*Y[24];
	Z[123] = Z[2]*Z[123];
	Z[105] = Z[36]*Z[102]-Z[34]*Z[93]-Z[105];
	Z[144] = Z[14]*Z[118];
	Z[145] = Z[17]*Z[120];
	Z[146] = Z[10]*Z[143];
	Z[147] = (Z[1]*Z[139]+Z[123]+Z[141]-Z[0]*Z[111])*Z[9];
	Z[148] = Y[14]*Y[18];
	Z[149] = Z[148]*Z[2];
	Z[79] = Z[60]*Z[130]+Z[90]*Z[96]+Z[102]*Z[105]+Z[144]+Z[145]+Z[147]-Z[79]*Z[149]-Z[146];
	Z[96] = Z[90]*Z[94]+Z[102]*Z[106];
	Z[150] = -(Z[96]*Z[137]+Z[79]);
	Z[120] = Z[24]*Z[120];
	Z[143] = Z[143]*Z[9];
	Z[118] = Z[22]*Z[118];
	Z[111] = (Z[0]*Z[111]-Z[1]*Z[139]-Z[123]-Z[141])*Z[10];
	Z[123] = 30.;
	Z[139] = Z[123]*(Z[90]*Z[108]+Z[93]*Z[106]);
	Z[105] = 15.*(Z[90]*Z[132]+Z[111]+Z[118]+Z[120]-Z[60]*Z[127]-Z[93]*Z[105]-Z[131]*Z[149]-Z[143]);
	Z[131] = Z[139]-Z[105]+147.15;
	Z[132] = Z[77]*Y[231]+Z[78]*Y[232];
	Z[141] = Z[78]*Y[231]-Z[77]*Y[232];
	Z[151] = -5616.;
	Z[152] = 29806.14;
	V[0] = Z[151]*(Z[0]*Z[106]+Z[2]*(Z[9]*Z[108]-Z[10]*Z[94]))+Z[152]-Z[0]*Z[132]-Z[2]*(Z[9]*Z[141]+Z[10]*(Z[99]-Z[131]))+15.*(Z[0]*Z[138]-Z[42]*Z[150])-54590.*Y[45];
	M[78] = -Z[28];
	Z[94] = 0.7361;
	Z[106] = 1.4755*Z[22];
	Z[108] = Z[94]*Z[24];
	Z[153] = Z[108]+Z[33]-Z[106];
	Z[154] = 1.4755*Z[14];
	Z[155] = Z[17]*Z[94]-Z[32]-Z[154];
	Z[156] = Z[2]*(Z[9]*Z[153]+Z[10]*Z[155]);
	Z[157] = 1.4755*Z[1];
	Z[94] = Z[39]-Z[2]*(Z[3]*Z[94]+Z[157]);
	Z[158] = Z[0]*Z[153]-Z[40]*Z[94];
	Z[159] = Z[0]*Z[155]+Z[42]*Z[94];
	Z[160] = 15.*(Z[0]*Z[156]-Z[2]*(Z[9]*Z[158]+Z[10]*Z[159]));
	M[79] = Z[160];
	M[80] = -Z[53];
	M[81] = -Z[58];
	M[84] = Z[55];
	Z[161] = Z[10]*Z[153]-Z[45]*Y[47]-Z[9]*Z[155];
	Z[162] = Z[94]-Z[0]*Y[47];
	Z[163] = Z[9]*Z[162];
	Z[164] = Z[10]*Z[162];
	M[86] = 15.*(Z[2]*(Z[9]*Z[163]+Z[10]*Z[164])-Z[0]*Z[161]);
	Z[165] = Z[106]+Z[40]*(Y[47]-0.25)-Z[108];
	Z[166] = -22.1325*Z[14];
	Z[167] = Z[166]+Z[42]*(15.*Y[47]-3.75)+11.0415*Z[17];
	Z[168] = 15.*Z[165];
	M[87] = Z[2]*(Z[9]*Z[168]-Z[10]*Z[167]);
	Z[169] = Z[2];
	Z[170] = Z[3];
	Z[171] = 1.-Z[54];
	if( Z[171]<=0. ) {
		YP[0] = (*dsn_undef);
		return;
	}
	Z[172] = (1.0/(sqrt(Z[171])));
	Z[173] = Z[17]/sqrt(Z[171]);
	Z[174] = Z[40]*Y[47];
	Z[171] = fabs(Z[171])+1e-20;
	Z[175] = (1.0/(sqrt(Z[171])));
	Z[108] = (Y[21]+Z[108]+Z[33]-Z[174]-Z[106])*Z[175];
	Z[176] = Y[47]*Z[9]*Z[90];
	Z[177] = Z[90]*Z[155];
	Z[178] = Z[2]*(Z[10]*(Z[88]-Y[48])+Z[176])+Z[95]+Z[97]+Z[177]-Z[93]*Z[162];
	Z[179] = ( (500.*Z[178]-107919.+304000.*Z[108]<0.) ? -500.*Z[178]+107920.-304000.*Z[108] : 1. );
	Z[180] = Z[2]*Y[47];
	Z[181] = Z[180]*Z[103];
	Z[182] = Z[0]*Y[48]+Z[181];
	Z[183] = Z[2]*(Z[10]*Z[90]*Y[47]+Z[9]*Y[48])-Z[107]*Y[47];
	Z[176] = Z[2]*(Z[176]-Z[10]*Y[48])+Z[109]*Y[47];
	Z[184] = -(Z[42]*Y[47]+Z[155]);
	Z[174] = Z[153]-Z[174];
	Z[177] = Z[113]*Y[47]+Z[93]*Z[94]-Z[177];
	Z[185] = Z[94]*Z[102]-Z[114]*Y[47]-Z[90]*Z[153];
	Z[186] = Z[93]*Z[177]+Z[102]*Z[185]+Z[127]*Z[174]+Z[130]*Z[184]-Z[133]-Z[134];
	Z[187] = Z[93]*Z[176]-Z[102]*Z[183];
	Z[188] = Z[137]*Z[187]-Z[186];
	Z[181] = Z[102]*Z[155]-Z[93]*Z[153]-Z[181];
	Z[174] = Z[102]*Z[181]+Z[130]*Z[162]+Z[149]*Z[174]+Z[144]+Z[145]+Z[147]-Z[90]*Z[177]-Z[146];
	Z[177] = Z[90]*Z[176]+Z[102]*Z[182];
	Z[189] = -(Z[137]*Z[177]+Z[174]);
	Z[190] = Z[123]*(Z[90]*Z[183]+Z[93]*Z[182]);
	Z[162] = 15.*(Z[90]*Z[185]+Z[93]*Z[181]+Z[127]*Z[162]+Z[143]-Z[149]*Z[184]-Z[111]-Z[118]-Z[120]);
	Z[181] = Z[190]+Z[162]+147.15;
	Z[184] = Z[173]*Y[215]-Z[169]*Z[170]*Z[172]*Y[216];
	Z[185] = Z[169]*Z[170]*Z[172]*Y[215]+Z[173]*Y[216];
	Z[191] = -3806.;
	Z[192] = 30712.5;
	V[1] = Z[191]*(Z[0]*Z[182]+Z[2]*(Z[9]*Z[183]-Z[10]*Z[176]))+Z[192]-Z[0]*Z[184]-Z[2]*(Z[10]*(Z[179]-Z[181])-Z[9]*Z[185])+15.*(Z[0]*Z[188]-Z[42]*Z[189])-56250.*Y[47];
	M[156] = -Z[28];
	Z[176] = 0.8389;
	Z[182] = Z[176]*Z[24];
	Z[183] = Z[33]-Z[106]-Z[182];
	Z[154] = -(Z[17]*Z[176]+Z[32]+Z[154]);
	Z[193] = Z[2]*(Z[9]*Z[183]+Z[10]*Z[154]);
	Z[157] = Z[2]*(Z[3]*Z[176]-Z[157])+Z[39];
	Z[176] = Z[0]*Z[183]-Z[40]*Z[157];
	Z[194] = Z[0]*Z[154]+Z[42]*Z[157];
	Z[195] = 15.*(Z[0]*Z[193]-Z[2]*(Z[9]*Z[176]+Z[10]*Z[194]));
	M[157] = Z[195];
	M[158] = -Z[53];
	M[159] = -Z[58];
	M[163] = Z[55];
	Z[196] = Z[10]*Z[183]-Z[45]*Y[49]-Z[9]*Z[154];
	Z[197] = Z[157]-Z[0]*Y[49];
	Z[198] = Z[9]*Z[197];
	Z[199] = Z[10]*Z[197];
	M[164] = 15.*(Z[2]*(Z[9]*Z[198]+Z[10]*Z[199])-Z[0]*Z[196]);
	Z[200] = Z[106]+Z[182]+Z[40]*(Y[49]-0.25);
	Z[166] = Z[166]+Z[42]*(15.*Y[49]-3.75)-12.5835*Z[17];
	Z[201] = 15.*Z[200];
	M[165] = Z[2]*(Z[9]*Z[201]-Z[10]*Z[166]);
	Z[202] = Z[40]*Y[49];
	Z[106] = (Y[21]+Z[33]-Z[202]-Z[106]-Z[182])*Z[175];
	Z[182] = Y[49]*Z[9]*Z[90];
	Z[203] = Z[90]*Z[154];
	Z[204] = Z[2]*(Z[10]*(Z[88]-Y[50])+Z[182])+Z[95]+Z[97]+Z[203]-Z[93]*Z[197];
	Z[205] = ( (500.*Z[204]-107919.+304000.*Z[106]<0.) ? -500.*Z[204]+107920.-304000.*Z[106] : 1. );
	Z[206] = Z[2]*Y[49];
	Z[207] = Z[206]*Z[103];
	Z[208] = Z[0]*Y[50]+Z[207];
	Z[209] = Z[2]*(Z[10]*Z[90]*Y[49]+Z[9]*Y[50])-Z[107]*Y[49];
	Z[182] = Z[2]*(Z[182]-Z[10]*Y[50])+Z[109]*Y[49];
	Z[210] = Z[42]*Y[49]+Z[154];
	Z[202] = Z[202]-Z[183];
	Z[203] = Z[203]-Z[113]*Y[49]-Z[93]*Z[157];
	Z[211] = Z[114]*Y[49]+Z[90]*Z[183]-Z[102]*Z[157];
	Z[212] = Z[93]*Z[203]+Z[102]*Z[211]+Z[127]*Z[202]+Z[130]*Z[210]+Z[133]+Z[134];
	Z[213] = Z[93]*Z[182]-Z[102]*Z[209];
	Z[214] = Z[137]*Z[213]+Z[212];
	Z[207] = Z[102]*Z[154]-Z[93]*Z[183]-Z[207];
	Z[202] = Z[90]*Z[203]+Z[102]*Z[207]+Z[130]*Z[197]+Z[144]+Z[145]+Z[147]-Z[149]*Z[202]-Z[146];
	Z[203] = Z[90]*Z[182]+Z[102]*Z[208];
	Z[215] = -(Z[137]*Z[203]+Z[202]);
	Z[216] = Z[123]*(Z[90]*Z[209]+Z[93]*Z[208]);
	Z[207] = 15.*(Z[93]*Z[207]+Z[127]*Z[197]+Z[149]*Z[210]+Z[143]-Z[90]*Z[211]-Z[111]-Z[118]-Z[120]);
	Z[210] = Z[216]+Z[207]+147.15;
	Z[211] = Z[173]*Y[247]-Z[169]*Z[170]*Z[172]*Y[248];
	Z[217] = Z[169]*Z[170]*Z[172]*Y[247]+Z[173]*Y[248];
	V[2] = Z[191]*(Z[0]*Z[208]+Z[2]*(Z[9]*Z[209]-Z[10]*Z[182]))+Z[192]-Z[0]*Z[211]-Z[2]*(Z[10]*(Z[205]-Z[210])-Z[9]*Z[217])+15.*(Z[0]*Z[214]-Z[42]*Z[215])-56250.*Y[49];
	Z[182] = 0.7396;
	Z[38] = Z[2]*(Z[38]-Z[3]*Z[182])+Z[39];
	Z[39] = Z[182]*Z[24];
	Z[191] = Z[39]+Z[31]+Z[33];
	Z[192] = Z[8]*Z[40]-Z[0]*Z[26];
	Z[32] = Z[17]*Z[182]+Z[35]-Z[32];
	Z[35] = Z[0]*Z[19]+Z[8]*Z[42];
	Z[182] = Z[192]*Y[43]+Z[192]*Y[45]+Z[192]*Y[47]+Z[192]*Y[49]+Z[26]*Z[29]+Z[26]*Z[38]+Z[26]*Z[94]+Z[26]*Z[157]-Z[8]*Z[34]-Z[8]*Z[153]-Z[8]*Z[183]-Z[8]*Z[191];
	Z[35] = Z[35]*Y[43]+Z[35]*Y[45]+Z[35]*Y[47]+Z[35]*Y[49]+Z[8]*Z[32]+Z[8]*Z[36]+Z[8]*Z[154]+Z[8]*Z[155]-Z[19]*Z[29]-Z[19]*Z[38]-Z[19]*Z[94]-Z[19]*Z[157];
	M[234] = -15.*(Z[9]*Z[35]+Z[10]*Z[182]);
	Z[192] = cos(Y[55]);
	Z[208] = sin(Y[55]);
	Z[209] = Z[14]*Z[192]+Z[42]*Z[208];
	Z[218] = Z[0]*Z[208]-Z[82]*Z[192];
	Z[219] = Z[14]*Z[208]-Z[42]*Z[192];
	Z[220] = Z[0]*Z[192]+Z[82]*Z[208];
	Z[221] = 0.78;
	Z[222] = 1.4;
	Z[223] = Z[84]*Z[222];
	Z[224] = Z[223]*Z[17];
	Z[225] = -(Z[221]*(Z[209]*Z[218]-Z[219]*Z[220])+Z[224]);
	Z[46] = Z[222]*Z[46];
	Z[226] = Z[221]*(Z[209]*Z[209]+Z[219]*Z[219])+Z[46];
	Z[227] = Z[22]*Z[192]-Z[40]*Z[208];
	Z[192] = Z[22]*Z[208]+Z[40]*Z[192];
	Z[49] = Z[49]*Z[222];
	Z[208] = Z[221]*(Z[192]*Z[219]+Z[209]*Z[227])+Z[49];
	Z[228] = Z[0]*Z[225]+Z[2]*(Z[10]*Z[208]-Z[9]*Z[226]);
	Z[223] = Z[223]*Z[24];
	Z[229] = -(Z[221]*(Z[218]*Z[227]-Z[192]*Z[220])+Z[223]);
	Z[230] = Z[221]*(Z[192]*Z[219]+Z[209]*Z[227])+Z[49];
	Z[54] = Z[222]*Z[54];
	Z[231] = Z[221]*(Z[192]*Z[192]+Z[227]*Z[227])+Z[54];
	Z[232] = Z[0]*Z[229]+Z[2]*(Z[10]*Z[231]-Z[9]*Z[230]);
	Z[233] = Z[0]*Z[32]+Z[38]*Z[42];
	Z[234] = Z[2]*(Z[9]*Z[191]+Z[32]*Z[10]);
	Z[235] = Z[0]*Z[191]-Z[38]*Z[40];
	Z[236] = cos(Y[57]);
	Z[237] = sin(Y[57]);
	Z[238] = Z[22]*Z[236]-Z[40]*Z[237];
	Z[239] = Z[0]*Z[237]-Z[82]*Z[236];
	Z[240] = Z[22]*Z[237]+Z[40]*Z[236];
	Z[241] = Z[0]*Z[236]+Z[82]*Z[237];
	Z[242] = -(Z[221]*(Z[238]*Z[239]-Z[240]*Z[241])+Z[223]);
	Z[243] = Z[14]*Z[236]+Z[42]*Z[237];
	Z[236] = Z[14]*Z[237]-Z[42]*Z[236];
	Z[237] = Z[221]*(Z[236]*Z[240]+Z[238]*Z[243])+Z[49];
	Z[54] = Z[221]*(Z[238]*Z[238]+Z[240]*Z[240])+Z[54];
	Z[244] = Z[0]*Z[242]+Z[2]*(Z[10]*Z[54]-Z[9]*Z[237]);
	Z[68] = -Z[68]+2.79;
	Z[68] = 1.0/Z[68];
	Z[70] = atan(Z[70]*Z[68]);
	Z[245] = cos(Z[70]);
	Z[246] = cos(Y[51]);
	Z[70] = sin(Z[70]);
	Z[247] = sin(Y[51]);
	Z[248] = Z[14]*Z[245]+Z[17]*Z[70];
	Z[249] = Z[42]*Z[247]+Z[246]*Z[248];
	Z[250] = Z[3]*Z[70]-Z[1]*Z[245];
	Z[251] = Z[2]*Z[246]*Z[250]+Z[0]*Z[247];
	Z[252] = Z[2]*(Z[1]*Z[70]+Z[3]*Z[245]);
	Z[253] = Z[14]*Z[70]-Z[17]*Z[245];
	Z[248] = Z[247]*Z[248]-Z[42]*Z[246];
	Z[250] = Z[0]*Z[246]-Z[2]*Z[247]*Z[250];
	Z[254] = Z[222]*Z[252];
	Z[255] = Z[254]*Z[253];
	Z[256] = Z[255]-Z[221]*(Z[249]*Z[251]-Z[248]*Z[250]);
	Z[257] = Z[221]*(Z[248]*Z[248]+Z[249]*Z[249])+Z[222]*Z[253]*Z[253];
	Z[258] = Z[22]*Z[245]+Z[24]*Z[70];
	Z[259] = Z[246]*Z[258]-Z[40]*Z[247];
	Z[70] = Z[22]*Z[70]-Z[24]*Z[245];
	Z[245] = Z[40]*Z[246]+Z[247]*Z[258];
	Z[246] = Z[222]*Z[253]*Z[70];
	Z[247] = Z[221]*(Z[245]*Z[248]+Z[249]*Z[259])+Z[246];
	Z[258] = Z[0]*Z[256]+Z[2]*(Z[10]*Z[247]-Z[9]*Z[257]);
	Z[254] = Z[254]*Z[70];
	Z[260] = Z[254]-Z[221]*(Z[251]*Z[259]-Z[245]*Z[250]);
	Z[246] = Z[221]*(Z[245]*Z[248]+Z[249]*Z[259])+Z[246];
	Z[261] = Z[70]*Z[70];
	Z[262] = Z[221]*(Z[245]*Z[245]+Z[259]*Z[259])+Z[222]*Z[261];
	Z[263] = Z[0]*Z[260]+Z[2]*(Z[10]*Z[262]-Z[9]*Z[246]);
	Z[264] = -(Z[221]*(Z[239]*Z[243]-Z[236]*Z[241])+Z[224]);
	Z[46] = Z[221]*(Z[236]*Z[236]+Z[243]*Z[243])+Z[46];
	Z[49] = Z[221]*(Z[236]*Z[240]+Z[238]*Z[243])+Z[49];
	Z[265] = Z[0]*Z[264]+Z[2]*(Z[10]*Z[49]-Z[9]*Z[46]);
	Z[266] = cos(Y[53]);
	Z[267] = sin(Y[53]);
	Z[268] = Z[14]*Z[71]+Z[17]*Z[72];
	Z[269] = Z[42]*Z[267]+Z[266]*Z[268];
	Z[270] = Z[3]*Z[72]-Z[1]*Z[71];
	Z[271] = Z[2]*Z[266]*Z[270]+Z[0]*Z[267];
	Z[268] = Z[267]*Z[268]-Z[42]*Z[266];
	Z[270] = Z[0]*Z[266]-Z[2]*Z[267]*Z[270];
	Z[272] = Z[222]*Z[73];
	Z[273] = Z[272]*Z[81];
	Z[274] = Z[273]-Z[221]*(Z[269]*Z[271]-Z[268]*Z[270]);
	Z[275] = Z[221]*(Z[268]*Z[268]+Z[269]*Z[269])+Z[222]*Z[81]*Z[81];
	Z[71] = Z[22]*Z[71]+Z[24]*Z[72];
	Z[72] = Z[71]*Z[266]-Z[40]*Z[267];
	Z[71] = Z[40]*Z[266]+Z[71]*Z[267];
	Z[266] = Z[222]*Z[81]*Z[74];
	Z[267] = Z[221]*(Z[71]*Z[268]+Z[72]*Z[269])+Z[266];
	Z[276] = Z[0]*Z[274]+Z[2]*(Z[10]*Z[267]-Z[9]*Z[275]);
	Z[272] = Z[272]*Z[74];
	Z[277] = Z[221]*(Z[71]*Z[270]-Z[72]*Z[271])+Z[272];
	Z[266] = Z[221]*(Z[71]*Z[268]+Z[72]*Z[269])+Z[266];
	Z[75] = Z[75]*Z[222]+Z[221]*(Z[71]*Z[71]+Z[72]*Z[72]);
	Z[278] = Z[0]*Z[277]+Z[2]*(Z[10]*Z[75]-Z[9]*Z[266]);
	Z[279] = Z[228]+Z[258]+Z[265]+Z[276];
	Z[280] = Z[232]+Z[244]+Z[263]+Z[278];
	Z[281] = Z[38]*Z[233]+Z[191]*Z[234]+Z[94]*Z[159]+Z[153]*Z[156]+Z[157]*Z[194]+Z[183]*Z[193]+Z[29]*Z[43]+Z[34]*Z[37]-Y[43]*(Z[0]*Z[233]+Z[40]*Z[234])-Y[47]*(Z[0]*Z[159]+Z[40]*Z[156])-Y[49]*(Z[0]*Z[194]+Z[40]*Z[193])-Y[45]*(Z[0]*Z[43]+Z[37]*Z[40]);
	Z[282] = Z[38]*Z[235]+Z[157]*Z[176]+Z[94]*Z[158]+Z[29]*Z[41]-Z[32]*Z[234]-Z[154]*Z[193]-Y[43]*(Z[0]*Z[235]+Z[42]*Z[234])-Y[47]*(Z[0]*Z[158]+Z[42]*Z[156])-Z[155]*Z[156]-Z[36]*Z[37]-Y[45]*(Z[0]*Z[41]+Z[37]*Z[42])-Y[49]*(Z[0]*Z[176]+Z[42]*Z[193]);
	M[235] = Z[9]*Z[280]+Z[10]*Z[279]-15.*(Z[9]*Z[282]+Z[10]*Z[281]);
	Z[283] = Z[38]*Z[50];
	Z[284] = Z[191]*Z[19];
	Z[285] = Z[0]*Z[50];
	Z[286] = Z[19]*Z[40]-Z[285];
	Z[287] = Z[94]*Z[50];
	Z[288] = Z[153]*Z[19];
	Z[289] = Z[0]*Z[47]+Z[19]*Z[42];
	Z[290] = Z[157]*Z[50];
	Z[291] = Z[183]*Z[19];
	Z[292] = Z[29]*Z[50];
	Z[293] = Z[34]*Z[19];
	Z[289] = Z[289]*Y[43]+Z[289]*Y[45]+Z[289]*Y[47]+Z[289]*Y[49]+Z[19]*Z[32]+Z[19]*Z[36]+Z[19]*Z[154]+Z[19]*Z[155]-Z[29]*Z[47]-Z[38]*Z[47]-Z[47]*Z[94]-Z[47]*Z[157];
	Z[286] = Z[286]*Y[43]+Z[286]*Y[45]+Z[286]*Y[47]+Z[286]*Y[49]+Z[283]+Z[287]+Z[290]+Z[292]-Z[284]-Z[288]-Z[291]-Z[293];
	M[236] = -15.*(Z[9]*Z[289]+Z[10]*Z[286]);
	Z[294] = Z[154]*Z[26];
	Z[295] = Z[26]*Z[40]-Z[0]*Z[56];
	Z[296] = Z[32]*Z[26];
	Z[285] = Z[26]*Z[42]+Z[285];
	Z[297] = Z[155]*Z[26];
	Z[298] = Z[36]*Z[26];
	Z[283] = Z[285]*Y[43]+Z[285]*Y[45]+Z[285]*Y[47]+Z[285]*Y[49]+Z[294]+Z[296]+Z[297]+Z[298]-Z[283]-Z[287]-Z[290]-Z[292];
	Z[285] = Z[295]*Y[43]+Z[295]*Y[45]+Z[295]*Y[47]+Z[295]*Y[49]+Z[29]*Z[56]+Z[38]*Z[56]+Z[56]*Z[94]+Z[56]*Z[157]-Z[26]*Z[34]-Z[26]*Z[153]-Z[26]*Z[183]-Z[26]*Z[191];
	M[237] = -15.*(Z[9]*Z[283]+Z[10]*Z[285]);
	Z[287] = Z[10]*Z[235]-Z[9]*Z[233];
	M[238] = -15.*Z[287];
	Z[290] = Z[9]*Z[43]-Z[10]*Z[41];
	M[239] = 15.*Z[290];
	Z[292] = Z[10]*Z[158]-Z[9]*Z[159];
	M[240] = -15.*Z[292];
	Z[295] = Z[9]*Z[194]-Z[10]*Z[176];
	M[241] = 15.*Z[295];
	Z[299] = Z[9]*Z[208]+Z[10]*Z[226];
	Z[300] = Z[9]*Z[231]+Z[10]*Z[230];
	Z[301] = Z[38]-Z[0]*Y[43];
	Z[302] = Z[10]*Z[301];
	Z[45] = Z[10]*Z[191]-Z[45]*Y[43]-Z[32]*Z[9];
	Z[7] = 1919.3*Z[7];
	Z[303] = -Z[7]-1786.5;
	Z[304] = Z[9]*Z[301];
	Z[305] = Z[9]*Z[54]+Z[10]*Z[237];
	Z[306] = Z[9]*Z[247]+Z[10]*Z[257];
	Z[307] = Z[9]*Z[262]+Z[10]*Z[246];
	Z[308] = Z[9]*Z[49]+Z[10]*Z[46];
	Z[309] = Z[9]*Z[267]+Z[10]*Z[275];
	Z[310] = Z[9]*Z[75]+Z[10]*Z[266];
	Z[311] = Z[38]*Z[304]+Z[157]*Z[198]+Z[94]*Z[163]+Z[29]*Z[61]-Z[32]*Z[45]-Z[154]*Z[196]-Y[43]*(Z[0]*Z[304]+Z[42]*Z[45])-Y[47]*(Z[0]*Z[163]+Z[42]*Z[161])-Z[155]*Z[161]-Z[36]*Z[59]-Y[45]*(Z[0]*Z[61]+Z[42]*Z[59])-Y[49]*(Z[0]*Z[198]+Z[42]*Z[196]);
	Z[312] = Z[38]*Z[302]+Z[45]*Z[191]+Z[94]*Z[164]+Z[153]*Z[161]+Z[157]*Z[199]+Z[183]*Z[196]+Z[29]*Z[62]+Z[34]*Z[59]-Y[43]*(Z[0]*Z[302]+Z[40]*Z[45])-Y[47]*(Z[0]*Z[164]+Z[40]*Z[161])-Y[49]*(Z[0]*Z[199]+Z[40]*Z[196])-Y[45]*(Z[0]*Z[62]+Z[40]*Z[59]);
	Z[20] = Z[300]+Z[305]+Z[307]+Z[310]-Z[9]*Z[303]+1919.3*Z[20]*Z[3];
	Z[12] = Z[299]+Z[306]+Z[308]+Z[309]-Z[10]*Z[303]-1919.3*Z[12]*Z[3];
	M[242] = Z[9]*Z[20]+Z[10]*Z[12]+15.*(Z[9]*Z[311]+Z[10]*Z[312]);
	Z[64] = Z[64]+Z[42]*(15.*Y[43]-3.75)+11.094*Z[17];
	Z[303] = Z[40]*(Y[43]-0.25)-Z[39]-Z[31];
	Z[313] = 15.*Z[303];
	Z[314] = -Z[7]-494.2;
	Z[315] = 1919.3*Z[13]*Z[1];
	Z[316] = 1919.3*Z[21]*Z[1];
	Z[317] = Z[313]*Y[43]+Z[66]*Y[45]+Z[168]*Y[47]+Z[201]*Y[49];
	Z[318] = Y[43]*Z[64];
	Z[319] = Y[47]*Z[167];
	Z[320] = Z[157]*Z[201];
	Z[321] = Z[94]*Z[168];
	Z[25] = Z[2]*(Z[25]*Z[314]+Z[316]);
	Z[322] = Z[29]*Z[66];
	Z[18] = Z[2]*(Z[18]*Z[314]-Z[315]);
	Z[323] = Z[94]*Z[167];
	M[243] = Z[9]*(Z[38]*Z[313]+Z[320]+Z[321]+Z[322]-Z[25])+Z[10]*(Z[18]-Z[38]*Z[64]-Z[323])+Z[9]*(Z[229]+Z[242]+Z[260]+Z[277]-Z[0]*Z[317])+Z[10]*(Z[0]*(Z[318]+Z[319])+Z[225]+Z[256]+Z[264]+Z[274]-Z[60]*Z[65]-Z[166]*Z[197]);
	Z[60] = Z[70]*Z[247]+Z[252]*Z[256]+Z[253]*Z[257];
	Z[197] = Z[70]*Z[262]+Z[246]*Z[253]+Z[252]*Z[260];
	M[244] = -(Z[9]*Z[197]+Z[10]*Z[60]);
	Z[324] = Z[73]*Z[274]+Z[74]*Z[267]+Z[81]*Z[275];
	Z[325] = Z[73]*Z[277]+Z[74]*Z[75]+Z[81]*Z[266];
	M[245] = -(Z[9]*Z[325]+Z[10]*Z[324]);
	Z[326] = Z[17]*Z[226]+Z[24]*Z[208]-Z[84]*Z[225];
	Z[327] = Z[17]*Z[230]+Z[24]*Z[231]-Z[84]*Z[229];
	M[246] = Z[9]*Z[327]+Z[10]*Z[326];
	Z[328] = Z[17]*Z[237]+Z[24]*Z[54]-Z[84]*Z[242];
	Z[329] = Z[17]*Z[46]+Z[24]*Z[49]-Z[84]*Z[264];
	M[247] = Z[9]*Z[328]+Z[10]*Z[329];
	Z[330] = Z[108]*Z[24];
	Z[331] = Z[330]*Z[173];
	Z[332] = Z[106]*Z[24];
	Z[333] = Z[332]*Z[173];
	Z[330] = -Z[330]*Z[170]*Z[169]*Z[172];
	Z[332] = -Z[332]*Z[170]*Z[169]*Z[172];
	Z[171] = Z[171]*Z[175];
	Z[175] = -Z[108]*Z[171];
	Z[171] = -Z[106]*Z[171];
	Z[334] = Z[30]*Z[74];
	Z[335] = -Z[334]*Z[78];
	Z[334] = -Z[334]*Z[77];
	Z[76] = -Z[30]*Z[76]*Z[80];
	Z[80] = 1.-Z[261];
	if( Z[80]<=0. ) {
		YP[0] = (*dsn_undef);
		return;
	}
	Z[261] = (1.0/(sqrt(Z[80])));
	Z[336] = -Z[252]*Z[261];
	Z[337] = Z[40]*Y[43];
	Z[80] = fabs(Z[80])+1e-20;
	Z[338] = (1.0/(sqrt(Z[80])));
	Z[31] = (Y[21]+Z[39]+Z[31]+Z[33]-Z[337])*Z[338];
	Z[33] = -Z[253]*Z[261];
	Z[39] = Y[43]*Z[9]*Z[90];
	Z[261] = Z[90]*Z[32];
	Z[95] = Z[2]*(Z[10]*(Z[88]-Y[44])+Z[39])+Z[95]+Z[97]+Z[261]-Z[93]*Z[301];
	Z[80] = -Z[31]*Z[80]*Z[338];
	Z[97] = Z[31]*Z[70];
	Z[338] = -Z[97]*Z[336];
	Z[97] = -Z[97]*Z[33];
	Z[339] = ( (500.*Z[95]-107919.+304000.*Z[31]<0.) ? -500.*Z[95]+107920.-304000.*Z[31] : 1. );
	Z[340] = Z[67]*Z[67];
	Z[341] = 1.+Z[340];
	Z[342] = Z[341]+Z[340];
	Z[343] = Z[69]*Z[69];
	Z[344] = Y[314]*Y[314];
	Z[345] = Z[344]*Z[341];
	Z[346] = 2.1204*Z[67];
	Z[347] = -Z[346]*Z[69]+2.79;
	Z[348] = Z[341]*Z[343];
	Z[349] = Z[69]*Z[341];
	Z[340] = 7.7841*Z[340];
	Z[350] = Z[340]*Z[343]+1.;
	Z[351] = 11.831832*Z[67];
	Z[350] = 1.0/Z[350];
	Z[352] = Z[349]*Y[314]*Z[347]*Z[350];
	Z[69] = Z[350]*(Z[349]*(Z[347]*Y[315]+Z[67]*(5.58+3.223008*Z[348])*Z[344])-Z[352]*Z[348]*Z[67]*Y[314]*(-Z[351]*Z[69]+15.5682)-4.2408*Z[345]*Z[343]*Z[342]);
	Z[343] = Y[18]+Z[352];
	Z[347] = Z[42]*Z[343];
	Z[348] = Z[347]-Z[91];
	Z[349] = Z[40]*Z[343];
	Z[350] = Z[100]+Z[349];
	Z[353] = (Z[74]*Z[348]+Z[81]*Z[350])*Y[54]+Z[0]*Z[69]+Z[2]*(Z[103]*Z[352]+Z[148]);
	Z[343] = Z[343]*Z[0];
	Z[354] = Z[343]+Y[24];
	Z[69] = Z[125]-Z[2]*Z[69];
	Z[350] = (Z[74]*Z[354]-Z[73]*Z[350])*Y[54]+Z[9]*Z[69]-Z[124]-Z[352]*Z[114];
	Z[69] = (Z[73]*Z[348]+Z[81]*Z[354])*Y[54]+Z[10]*Z[69]+Z[128]+Z[352]*Z[113];
	Z[343] = Z[73]*Y[54]-Y[24]-Z[343];
	Z[347] = Z[81]*Y[54]+Z[347]-Z[91];
	Z[348] = Z[74]*Y[54]-Z[100]-Z[349];
	Z[349] = Z[75]*Z[348]+Z[266]*Z[347]+Z[277]*Z[343];
	Z[352] = Z[271]*Z[271];
	Z[354] = Z[270]*Z[270];
	Z[355] = Z[73]*Z[73];
	Z[356] = Z[221]*(Z[352]+Z[354])+Z[222]*Z[355];
	Z[268] = Z[221]*(Z[268]*Z[270]-Z[269]*Z[271])+Z[273];
	Z[71] = Z[272]-Z[221]*(Z[72]*Z[271]-Z[71]*Z[270]);
	Z[72] = Z[71]*Z[348]+Z[268]*Z[347]+Z[343]*Z[356];
	Z[269] = Z[72]*Z[348]+Z[274]*Z[353]+Z[275]*Z[350]-Z[69]*Z[267]-Z[343]*Z[349];
	Z[267] = Z[348]*Z[267]+Z[274]*Z[343]+Z[275]*Z[347];
	Z[72] = Z[266]*Z[350]+Z[267]*Z[343]+Z[277]*Z[353]-Z[69]*Z[75]-Z[72]*Z[347];
	Z[75] = Z[68]*Z[68];
	Z[266] = Z[346]*Z[68]+2.79;
	Z[270] = Z[341]*Z[75];
	Z[271] = Z[68]*Z[341];
	Z[272] = Z[75]*Z[340]+1.;
	Z[272] = 1.0/Z[272];
	Z[273] = Z[271]*Y[314]*Z[266]*Z[272];
	Z[67] = Z[272]*(Z[271]*(Z[266]*Y[315]+Z[67]*(5.58+3.223008*Z[270])*Z[344])-Z[273]*Z[270]*Z[67]*Y[314]*(Z[351]*Z[68]+15.5682)+4.2408*Z[345]*Z[75]*Z[342]);
	Z[68] = Y[18]+Z[273];
	Z[75] = Z[42]*Z[68];
	Z[266] = Z[75]-Z[91];
	Z[270] = Z[40]*Z[68];
	Z[271] = Z[100]+Z[270];
	Z[148] = (Z[70]*Z[266]+Z[253]*Z[271])*Y[52]+Z[0]*Z[67]+Z[2]*(Z[103]*Z[273]+Z[148]);
	Z[68] = Z[68]*Z[0];
	Z[272] = Z[68]+Y[24];
	Z[67] = Z[125]-Z[2]*Z[67];
	Z[124] = (Z[70]*Z[272]-Z[252]*Z[271])*Y[52]+Z[9]*Z[67]-Z[124]-Z[273]*Z[114];
	Z[67] = (Z[252]*Z[266]+Z[253]*Z[272])*Y[52]+Z[10]*Z[67]+Z[128]+Z[273]*Z[113];
	Z[68] = Z[252]*Y[52]-Y[24]-Z[68];
	Z[75] = Z[253]*Y[52]+Z[75]-Z[91];
	Z[125] = Z[70]*Y[52]-Z[100]-Z[270];
	Z[128] = Z[68]*Z[260]+Z[75]*Z[246]+Z[125]*Z[262];
	Z[266] = Z[251]*Z[251];
	Z[270] = Z[250]*Z[250];
	Z[271] = Z[252]*Z[252];
	Z[272] = Z[221]*(Z[266]+Z[270])+Z[222]*Z[271];
	Z[248] = Z[255]-Z[221]*(Z[249]*Z[251]-Z[248]*Z[250]);
	Z[245] = Z[254]-Z[221]*(Z[251]*Z[259]-Z[245]*Z[250]);
	Z[249] = Z[68]*Z[272]+Z[75]*Z[248]+Z[125]*Z[245];
	Z[250] = Z[67]*Z[247]+Z[68]*Z[128]-Z[124]*Z[257]-Z[125]*Z[249]-Z[148]*Z[256];
	Z[247] = Z[68]*Z[256]+Z[75]*Z[257]+Z[125]*Z[247];
	Z[68] = Z[68]*Z[247]+Z[124]*Z[246]+Z[148]*Z[260]-Z[67]*Z[262]-Z[75]*Z[249];
	Z[246] = Z[169]*Z[170]*Z[172]*Y[250]+Z[173]*Y[251]+Z[171]*Z[211]-Z[205]*Z[332];
	Z[249] = Z[217]*Z[332]-Z[211]*Z[333];
	Z[107] = Z[2]*(Z[10]*Z[90]*Y[43]+Z[9]*Y[44])-Z[107]*Y[43];
	Z[251] = Z[2]*Y[43];
	Z[103] = Z[251]*Z[103];
	Z[254] = Z[0]*Y[44]+Z[103];
	Z[255] = Z[42]*Y[43]+Z[32];
	Z[114] = Z[114]*Y[43]+Z[90]*Z[191]-Z[38]*Z[102];
	Z[103] = Z[93]*Z[191]+Z[103]-Z[32]*Z[102];
	Z[257] = Z[123]*(Z[90]*Z[107]+Z[93]*Z[254]);
	Z[111] = 15.*(Z[90]*Z[114]+Z[93]*Z[103]+Z[111]+Z[118]+Z[120]-Z[127]*Z[301]-Z[149]*Z[255]-Z[143]);
	Z[118] = Z[257]-Z[339]-Z[111]+147.15;
	Z[39] = Z[2]*(Z[39]-Z[10]*Y[44])+Z[109]*Y[43];
	Z[109] = Z[337]-Z[191];
	Z[113] = Z[261]-Z[113]*Y[43]-Z[38]*Z[93];
	Z[114] = Z[93]*Z[113]+Z[102]*Z[114]+Z[109]*Z[127]+Z[130]*Z[255]+Z[133]+Z[134];
	Z[120] = Z[39]*Z[93]-Z[102]*Z[107];
	Z[127] = Z[33]*Y[199]+Z[336]*Y[200];
	Z[133] = Z[120]*Z[123]-Z[127]+15.*Z[114];
	Z[134] = Z[38]*Z[118]-Z[133]*Z[191];
	Z[143] = Y[43]*(Z[40]*Z[133]-Z[0]*Z[118]);
	Z[255] = Z[336]*Y[199]-Z[33]*Y[200];
	Z[259] = Z[97]*Z[127]+Z[255]*Z[338];
	Z[261] = Z[33]*Y[203]+Z[80]*Z[127]-Z[336]*Y[202]-Z[338]*Z[339];
	Z[262] = Z[185]*Z[330]-Z[184]*Z[331];
	Z[273] = Z[169]*Z[170]*Z[172]*Y[218]+Z[173]*Y[219]+Z[175]*Z[184]-Z[179]*Z[330];
	Z[275] = Z[132]*Z[334]+Z[141]*Z[335];
	Z[337] = Z[78]*Y[234]+Z[99]*Z[335]-Z[77]*Y[235]-Z[76]*Z[132];
	Z[103] = Z[90]*Z[113]+Z[130]*Z[301]+Z[144]+Z[145]+Z[147]-Z[102]*Z[103]-Z[109]*Z[149]-Z[146];
	Z[109] = Z[39]*Z[90]+Z[102]*Z[254];
	Z[113] = Z[255]-Z[109]*Z[123]-15.*Z[103];
	Z[130] = Z[32]*Z[133]-Z[38]*Z[113];
	Z[133] = Y[43]*(Z[0]*Z[113]+Z[42]*Z[133]);
	Z[144] = Z[216]+Z[207]-Z[205]+147.15;
	Z[145] = Z[123]*Z[213]-Z[211]+15.*Z[212];
	Z[146] = Y[49]*(Z[40]*Z[145]-Z[0]*Z[144]);
	Z[147] = Z[144]*Z[157]-Z[145]*Z[183];
	Z[202] = -(Z[123]*Z[203]+Z[217])-15.*Z[202];
	Z[203] = Z[157]*Z[202]-Z[145]*Z[154];
	Z[174] = -(Z[123]*Z[177]+Z[185])-15.*Z[174];
	Z[177] = Z[123]*Z[187]-Z[184]-15.*Z[186];
	Z[186] = Y[47]*(Z[0]*Z[174]+Z[42]*Z[177]);
	Z[187] = Z[94]*Z[174]-Z[155]*Z[177];
	Z[145] = Y[49]*(Z[0]*Z[202]+Z[42]*Z[145]);
	Z[162] = Z[190]+Z[162]-Z[179]+147.15;
	Z[190] = Y[47]*(Z[40]*Z[177]-Z[0]*Z[162]);
	Z[94] = Z[94]*Z[162]-Z[153]*Z[177];
	Z[79] = Z[141]-Z[96]*Z[123]-15.*Z[79];
	Z[96] = Z[123]*Z[136]-Z[132]+15.*Z[135];
	Z[123] = Z[36]*Z[96]-Z[29]*Z[79];
	Z[135] = Y[45]*(Z[0]*Z[79]+Z[42]*Z[96]);
	Z[105] = Z[139]-Z[99]-Z[105]+147.15;
	Z[136] = Z[29]*Z[105]-Z[34]*Z[96];
	Z[96] = Y[45]*(Z[40]*Z[96]-Z[0]*Z[105]);
	Z[139] = Z[24]*Z[93]-Z[17]*Z[102];
	Z[177] = Z[139]*Y[56]+Z[149];
	Z[207] = Y[18]*Y[24];
	Z[212] = Z[207]*Z[10];
	Z[213] = Y[56]*Z[3];
	Z[216] = Z[24]*Y[56];
	Z[301] = Z[2]*(Z[102]*Z[213]+Z[212])+Z[216]*Z[90]-Z[126];
	Z[340] = Z[207]*Z[9];
	Z[341] = Z[17]*Y[56];
	Z[213] = Z[2]*(Z[340]-Z[93]*Z[213])+Z[129]-Z[341]*Z[90];
	Z[342] = Y[24]+Z[89]-Z[84]*Y[56];
	Z[341] = Z[91]+Z[341]-Z[92];
	Z[216] = Z[100]+Z[101]+Z[216];
	Z[343] = Z[216]*Z[231]+Z[229]*Z[342]+Z[230]*Z[341];
	Z[344] = Z[218]*Z[218];
	Z[345] = Z[220]*Z[220];
	Z[346] = Z[222]*Z[5]*Z[4];
	Z[351] = Z[221]*(Z[344]+Z[345])+Z[346];
	Z[209] = -(Z[221]*(Z[209]*Z[218]-Z[219]*Z[220])+Z[224]);
	Z[192] = -(Z[221]*(Z[218]*Z[227]-Z[192]*Z[220])+Z[223]);
	Z[218] = Z[192]*Z[216]+Z[209]*Z[341]+Z[342]*Z[351];
	Z[219] = Z[208]*Z[213]+Z[226]*Z[301]+Z[342]*Z[343]-Z[177]*Z[225]-Z[216]*Z[218];
	Z[208] = Z[216]*Z[208]+Z[225]*Z[342]+Z[226]*Z[341];
	Z[218] = Z[177]*Z[229]+Z[208]*Z[342]-Z[213]*Z[231]-Z[218]*Z[341]-Z[230]*Z[301];
	Z[220] = Y[14]*Y[14];
	Z[226] = 0.5;
	Z[226] = Z[226]*(Y[24]*Y[24]-Z[220])+Z[207]*Z[0];
	Z[227] = -2280.7;
	Z[230] = -494.2*Z[115];
	Z[227] = Y[18]*Z[227]+Z[230]-Z[7]*(Z[137]*Y[18]+Z[115]);
	Z[231] = 3059.65;
	Z[342] = Z[89]*(Z[231]-Z[7])-646.15*Y[24];
	Z[316] = -(Z[2]*(-Z[9]*Z[227]*Y[24]+3838.6*Z[13]*Z[226]*Z[1])+Z[137]*Y[14]*(Z[4]*Z[10]*Z[314]*Y[24]+Z[316]*Y[18]+Z[10]*Z[342]));
	Z[21] = Z[137]*Y[14]*(Z[48]*Z[314]*Y[24]+Z[9]*Z[342]-Z[315]*Y[18])-Z[2]*(-Z[10]*Z[227]*Y[24]-3838.6*Z[21]*Z[226]*Z[1]);
	Z[48] = Z[139]*Y[58]+Z[149];
	Z[139] = Y[58]*Z[3];
	Z[149] = Z[24]*Y[58];
	Z[102] = Z[2]*(Z[102]*Z[139]+Z[212])+Z[149]*Z[90]-Z[126];
	Z[126] = Z[17]*Y[58];
	Z[90] = Z[2]*(Z[93]*Z[139]-Z[340])+Z[126]*Z[90]-Z[129];
	Z[89] = Y[24]+Z[89]-Z[84]*Y[58];
	Z[91] = Z[91]+Z[126]-Z[92];
	Z[92] = Z[100]+Z[101]+Z[149];
	Z[93] = Z[46]*Z[91]+Z[49]*Z[92]+Z[89]*Z[264];
	Z[100] = Z[239]*Z[239];
	Z[101] = Z[241]*Z[241];
	Z[126] = Z[221]*(Z[100]+Z[101])+Z[346];
	Z[129] = -(Z[221]*(Z[239]*Z[243]-Z[236]*Z[241])+Z[224]);
	Z[139] = -(Z[221]*(Z[238]*Z[239]-Z[240]*Z[241])+Z[223]);
	Z[149] = Z[89]*Z[126]+Z[91]*Z[129]+Z[92]*Z[139];
	Z[212] = Z[48]*Z[242]+Z[54]*Z[90]+Z[89]*Z[93]-Z[91]*Z[149]-Z[102]*Z[237];
	Z[54] = Z[54]*Z[92]+Z[89]*Z[242]+Z[91]*Z[237];
	Z[46] = Z[48]*Z[264]+Z[49]*Z[90]+Z[92]*Z[149]-Z[46]*Z[102]-Z[54]*Z[89];
	V[3] = Z[9]*(Z[130]+Z[133]+Z[186]+Z[145]-Z[275]-Z[203]-Z[187])+Z[10]*(Z[273]+Z[146]+Z[147]-Z[337])+Z[9]*(Z[249]+Z[262]+Z[123]+Z[135]-Z[72]-Z[68]-Z[259]-Z[218]-Z[316]-Z[212])+Z[10]*(Z[250]+Z[246]+Z[134]+Z[143]+Z[261]+Z[190]+Z[94]+Z[136]+Z[96]+Z[219]-Z[269]-Z[21]-Z[46]);
	Z[49] = 60.;
	Z[89] = 2153.5;
	M[312] = -(Z[49]*(Z[8]*Z[84]-Z[17]*Z[19]-Z[24]*Z[26])+Z[84]*Z[89]);
	Z[149] = Z[43]+Z[159]+Z[194]+Z[233];
	Z[223] = -(Z[41]+Z[158]+Z[176]+Z[235]);
	Z[224] = Z[37]+Z[156]+Z[193]+Z[234];
	M[313] = 15.*(Z[223]*Z[17]+Z[24]*Z[149]+Z[84]*Z[224]);
	M[314] = Z[17]*Z[89]-Z[49]*(Z[19]*Z[84]-Z[17]*Z[47]-Z[24]*Z[50]);
	M[315] = Z[24]*Z[89]-Z[49]*(Z[26]*Z[84]-Z[17]*Z[50]-Z[24]*Z[56]);
	Z[15] = 15.*(Z[24]*Z[10]-Z[9]*Z[17]-Z[15])*Z[2];
	M[316] = -Z[15];
	M[317] = -Z[15];
	M[318] = -Z[15];
	M[319] = -Z[15];
	Z[15] = Z[59]+Z[161]+Z[196]+Z[45];
	Z[59] = -(Z[61]+Z[163]+Z[198]+Z[304]);
	Z[161] = Z[62]+Z[164]+Z[199]+Z[302];
	M[320] = -15.*(Z[15]*Z[84]+Z[17]*Z[59]+Z[24]*Z[161]);
	Z[196] = Z[65]+Z[167]+Z[166]+Z[64];
	Z[226] = Z[63]+Z[165]+Z[200]+Z[303];
	M[321] = Z[24]*Z[196]+15.*Z[17]*Z[226];
	Z[111] = Z[257]-Z[111]+147.15;
	Z[103] = -(Z[109]*Z[137]+Z[103]);
	Z[109] = Z[120]*Z[137]+Z[114];
	Z[87] = Z[88]-Z[87];
	Z[114] = Y[16]*Y[18];
	Z[120] = Z[138]+Z[188]+Z[214]+Z[109];
	Z[138] = -(Z[150]+Z[189]+Z[215]+Z[103]);
	Z[131] = Z[131]+Z[181]+Z[210]+Z[111]-Z[99]-Z[179]-Z[205]-Z[339];
	Z[132] = Y[182]+Z[132]+Z[184]+Z[211]+Z[127];
	Z[150] = Z[141]+Z[255]-Y[183]-Z[185]-Z[217];
	V[4] = Z[89]*(Z[0]*(-Z[140]-9.81*Z[13])+Z[1]*(Z[142]*Y[24]+Z[114]*Z[2]-9.81*Z[9])+Z[119]+Z[87]*Z[3]*Y[14]-Y[18]*Z[83]-Z[16])-Z[17]*Z[150]-Z[24]*Z[131]-Z[84]*Z[132]+15.*(Z[17]*Z[138]+Z[84]*Z[120]);
	M[390] = Z[49]*(Z[8]*Z[82]+Z[14]*Z[19]+Z[22]*Z[26])+Z[82]*Z[89];
	M[391] = 15.*(Z[14]*Z[223]+Z[22]*Z[149]-Z[82]*Z[224]);
	M[392] = Z[14]*Z[89]+Z[49]*(Z[14]*Z[47]+Z[19]*Z[82]+Z[22]*Z[50]);
	M[393] = Z[22]*Z[89]+Z[49]*(Z[14]*Z[50]+Z[22]*Z[56]+Z[26]*Z[82]);
	Z[8] = 15.*(Z[10]*Z[22]+Z[11]-Z[9]*Z[14])*Z[2];
	M[394] = -Z[8];
	M[395] = -Z[8];
	M[396] = -Z[8];
	M[397] = -Z[8];
	M[398] = 15.*(Z[15]*Z[82]-Z[14]*Z[59]-Z[22]*Z[161]);
	M[399] = Z[22]*Z[196]+15.*Z[14]*Z[226];
	V[5] = Z[89]*(Z[85]*Z[116]+Z[117]+Z[84]*(Z[88]*Y[24]+Z[114])-Z[87]*Z[1]*Y[14]-Z[23])+Z[82]*Z[132]-Z[14]*Z[150]-Z[22]*Z[131]+15.*(Z[14]*Z[138]-Z[82]*Z[120])-21125.835*Z[22];
	Z[8] = Z[9]*Z[26]+Z[10]*Z[19];
	M[468] = 15.*(Z[0]*(Z[8]*Z[104]+Z[8]*Z[180]+Z[8]*Z[206]+Z[8]*Z[251]+Z[294]+Z[296]+Z[297]+Z[298]-Z[284]-Z[288]-Z[291]-Z[293])+Z[2]*(Z[9]*Z[182]-Z[10]*Z[35]));
	Z[8] = Z[0]*Z[272]+Z[2]*(Z[10]*Z[245]-Z[9]*Z[248]);
	Z[13] = Z[155]*Z[159];
	Z[14] = Z[153]*Z[158];
	Z[16] = Z[0]*Z[356]+Z[2]*(Z[10]*Z[71]-Z[9]*Z[268]);
	Z[22] = Z[0]*Z[126]+Z[2]*(Z[10]*Z[139]-Z[9]*Z[129]);
	Z[23] = Z[0]*Z[351]+Z[2]*(Z[10]*Z[192]-Z[9]*Z[209]);
	Z[35] = Z[34]*Z[41];
	Z[83] = Z[36]*Z[43];
	Z[85] = Z[154]*Z[194];
	Z[87] = Z[183]*Z[176];
	Z[88] = Z[32]*Z[233];
	Z[114] = Z[191]*Z[235];
	M[469] = Z[0]*(Z[8]+Z[16]+Z[22]+Z[23])+Z[2]*(Z[10]*Z[280]-Z[9]*Z[279])+15.*(Z[0]*(Z[104]*Z[290]+Z[206]*Z[295]+Z[13]+Z[14]+Z[35]+Z[83]+Z[85]+Z[87]+Z[88]+Z[114]-Z[180]*Z[292]-Z[251]*Z[287])+Z[2]*(Z[9]*Z[281]-Z[10]*Z[282]))+4200.*Z[6];
	Z[6] = Z[9]*Z[50]+Z[10]*Z[47];
	M[470] = 15.*(Z[0]*(Z[6]*Z[104]+Z[6]*Z[180]+Z[6]*Z[206]+Z[6]*Z[251]+Z[32]*Z[50]+Z[36]*Z[50]+Z[50]*Z[154]+Z[50]*Z[155]-Z[34]*Z[47]-Z[47]*Z[153]-Z[47]*Z[183]-Z[47]*Z[191])+Z[2]*(Z[9]*Z[286]-Z[10]*Z[289]));
	Z[6] = Z[9]*Z[56]+Z[51];
	M[471] = -15.*(Z[0]*(Z[34]*Z[50]+Z[50]*Z[153]+Z[50]*Z[183]+Z[50]*Z[191]-Z[6]*Z[104]-Z[6]*Z[180]-Z[6]*Z[206]-Z[6]*Z[251]-Z[32]*Z[56]-Z[36]*Z[56]-Z[56]*Z[154]-Z[56]*Z[155])+Z[2]*(Z[10]*Z[283]-Z[9]*Z[285]));
	Z[6] = 15.*(Z[2]*(Z[9]*Z[235]+Z[10]*Z[233])-Z[0]*Z[234]);
	M[472] = Z[6];
	M[473] = -Z[44];
	M[474] = -Z[160];
	M[475] = -Z[195];
	Z[44] = Z[9]*Z[245]+Z[10]*Z[248];
	Z[51] = Z[155]*Z[164];
	Z[116] = Z[153]*Z[163];
	Z[117] = Z[9]*Z[71]+Z[10]*Z[268];
	Z[119] = Z[9]*Z[139]+Z[10]*Z[129];
	Z[140] = Z[9]*Z[192]+Z[10]*Z[209];
	Z[142] = Z[36]*Z[62];
	Z[160] = Z[34]*Z[61];
	Z[181] = Z[154]*Z[199];
	Z[182] = Z[183]*Z[198];
	Z[184] = Z[32]*Z[302];
	Z[188] = Z[191]*Z[304];
	M[476] = Z[0]*(Z[44]+Z[117]+Z[119]+Z[140])+Z[2]*(Z[10]*Z[20]-Z[9]*Z[12])+15.*(Z[0]*(-(Z[51]+Z[116]+Z[180]*(Z[9]*Z[164]-Z[10]*Z[163])+Z[142]+Z[160]+Z[104]*(Z[9]*Z[62]-Z[10]*Z[61])+Z[181]+Z[182]+Z[206]*(Z[9]*Z[199]-Z[10]*Z[198])+Z[184]+Z[188]+Z[251]*(Z[9]*Z[302]-Z[10]*Z[304])))+Z[2]*(Z[10]*Z[311]-Z[9]*Z[312]))-1919.3*Z[84]*Z[11];
	Z[11] = Z[155]*Z[167];
	Z[12] = Z[153]*Z[168];
	Z[20] = -Z[314]*Z[4];
	Z[189] = Z[36]*Z[65];
	Z[195] = Z[34]*Z[66];
	Z[196] = Z[154]*Z[166];
	Z[210] = Z[183]*Z[201];
	Z[211] = Z[32]*Z[64];
	Z[214] = Z[191]*Z[313];
	Z[215] = Z[9]*Z[64]+Z[10]*Z[313];
	Z[226] = Z[65]*Y[45]+Z[166]*Y[49]+Z[318]+Z[319];
	M[477] = Z[2]*Z[215]*Z[38]-Z[0]*(Z[2]*(Z[9]*Z[226]+Z[10]*Z[317])-Z[126]-Z[351]-Z[356])-Z[2]*(Z[9]*(-(Z[29]*Z[65]+Z[157]*Z[166]+Z[323]))+Z[10]*(-(Z[320]+Z[321]+Z[322])))-Z[0]*(Z[12]+Z[20]+Z[195]+Z[210]+Z[214]-Z[272]-Z[11]-Z[180]*(Z[9]*Z[167]+Z[10]*Z[168])-Z[189]-Z[104]*(Z[9]*Z[65]+Z[10]*Z[66])-Z[196]-Z[206]*(Z[9]*Z[166]+Z[10]*Z[201])-Z[211]-Z[251]*Z[215]-4200.)-Z[2]*(Z[9]*(Z[274]+Z[264]+Z[256]+Z[225]+Z[18])+Z[10]*(Z[25]-Z[277]-Z[260]-Z[242]-Z[229]));
	Z[18] = Z[272]*Z[252];
	Z[25] = Z[70]*Z[245]+Z[248]*Z[253]+Z[18];
	M[478] = Z[2]*(Z[9]*Z[60]-Z[10]*Z[197])-Z[0]*Z[25];
	Z[29] = Z[356]*Z[73];
	Z[38] = Z[71]*Z[74]+Z[81]*Z[268]+Z[29];
	M[479] = Z[2]*(Z[9]*Z[324]-Z[10]*Z[325])-Z[0]*Z[38];
	Z[66] = Z[84]*Z[351];
	Z[157] = Z[66]-Z[17]*Z[209]-Z[24]*Z[192];
	M[480] = -(Z[0]*Z[157]+Z[2]*(Z[9]*Z[326]-Z[10]*Z[327]));
	Z[168] = Z[84]*Z[126];
	Z[201] = Z[168]-Z[17]*Z[129]-Z[24]*Z[139];
	M[481] = -(Z[0]*Z[201]+Z[2]*(Z[9]*Z[329]-Z[10]*Z[328]));
	Z[69] = Z[71]*Z[69];
	Z[215] = Z[356]*Z[353];
	Z[227] = Z[268]*Z[350];
	Z[236] = Z[347]*Z[349];
	Z[237] = Z[348]*Z[267];
	Z[238] = Z[69]+Z[237]-Z[215]-Z[227]-Z[236];
	Z[148] = Z[272]*Z[148];
	Z[124] = Z[248]*Z[124];
	Z[67] = Z[245]*Z[67];
	Z[75] = Z[75]*Z[128];
	Z[125] = Z[125]*Z[247];
	Z[128] = Z[148]+Z[124]+Z[75]-Z[67]-Z[125];
	Z[239] = Z[333]*Z[205];
	Z[217] = Z[171]*Z[217];
	Z[240] = Z[173]*Y[250]+Z[239]-Z[169]*Z[170]*Z[172]*Y[251]-Z[217];
	Z[241] = Z[32]*Z[118];
	Z[243] = Z[191]*Z[113];
	Z[247] = Y[202]*Z[33];
	Z[257] = Y[203]*Z[336];
	Z[267] = Z[97]*Z[339];
	Z[279] = Z[80]*Z[255];
	Z[280] = Z[247]+Z[257]+Z[267]+Z[279];
	Z[281] = Z[331]*Z[179];
	Z[185] = Z[175]*Z[185];
	Z[282] = Z[173]*Y[218]+Z[281]-Z[169]*Z[170]*Z[172]*Y[219]-Z[185];
	Z[283] = Z[334]*Z[99];
	Z[284] = Y[234]*Z[77];
	Z[285] = Y[235]*Z[78];
	Z[141] = Z[76]*Z[141];
	Z[286] = Z[283]+Z[284]+Z[285]+Z[141];
	Z[287] = Z[155]*Z[162];
	Z[288] = Z[153]*Z[174];
	Z[162] = Z[180]*(Z[9]*Z[162]+Z[10]*Z[174]);
	Z[174] = Z[154]*Z[144];
	Z[180] = Z[183]*Z[202];
	Z[289] = Z[36]*Z[105];
	Z[290] = Z[34]*Z[79];
	Z[48] = Z[126]*Z[48];
	Z[102] = Z[129]*Z[102];
	Z[90] = Z[139]*Z[90];
	Z[54] = Z[91]*Z[54];
	Z[91] = Z[92]*Z[93];
	Z[92] = Z[48]+Z[90]+Z[54]-Z[102]-Z[91];
	Z[7] = Z[137]*Y[14]*(Z[230]-Y[18]*Z[231]-Z[7]*(Z[115]-Y[18]))*Z[2];
	Z[1] = (3838.6*Z[207]*Z[4]+1919.3*Z[220]*Z[0])*Z[3]*Z[1];
	Z[93] = Z[351]*Z[177];
	Z[115] = Z[209]*Z[301];
	Z[137] = Z[192]*Z[213];
	Z[177] = Z[341]*Z[343];
	Z[207] = Z[216]*Z[208];
	Z[208] = Z[93]+Z[177]-Z[115]-Z[137]-Z[207];
	Z[21] = Z[9]*(Z[190]+Z[94]+Z[219]-Z[21]-Z[46])+Z[10]*(Z[203]+Z[218]+Z[316]+Z[212]);
	V[6] = -(Z[2]*Z[21]+Z[2]*(Z[9]*(Z[246]+Z[134]+Z[143]+Z[261]+Z[273]+Z[146]+Z[147]+Z[136]+Z[96]-Z[337])+Z[10]*(Z[259]+Z[275]+Z[187]-Z[249]-Z[262]-Z[130]-Z[133]-Z[186]-Z[145]-Z[123]-Z[135]))+Z[0]*(Z[128]+Z[241]+Z[251]*(Z[9]*Z[118]+Z[10]*Z[113])+Z[287]+Z[162]+Z[174]+Z[206]*(Z[9]*Z[144]+Z[10]*Z[202])+Z[289]+Z[104]*(Z[9]*Z[105]+Z[10]*Z[79])+Z[92]+Z[1]+Z[208]-Z[238]-Z[240]-Z[243]-Z[280]-Z[282]-Z[286]-Z[288]-Z[180]-Z[290]-Z[7])+Z[2]*(Z[9]*(Z[250]-Z[269])+Z[10]*(Z[72]+Z[68])));
	M[546] = -Z[28];
	M[547] = -Z[6];
	M[548] = -Z[53];
	M[549] = -Z[58];
	M[550] = Z[55];
	M[554] = 15.*(Z[2]*(Z[9]*Z[304]+Z[10]*Z[302])-Z[0]*Z[45]);
	M[555] = Z[2]*(-Z[10]*Z[64]+15.*Z[9]*Z[303]);
	V[7] = Z[151]*(Z[0]*Z[254]+Z[2]*(Z[9]*Z[107]-Z[10]*Z[39]))+Z[152]-Z[0]*Z[127]-Z[2]*(Z[9]*Z[255]+Z[10]*(Z[339]-Z[111]))+15.*(Z[0]*Z[109]-Z[42]*Z[103])-54590.*Y[43];
	M[624] = Z[0]*Z[89]+Z[27]*Z[49];
	M[625] = -15.*(Z[0]*Z[224]+Z[2]*(Z[9]*Z[223]-Z[10]*Z[149]));
	M[626] = Z[49]*Z[52]-Z[42]*Z[89];
	M[627] = Z[40]*Z[89]+Z[49]*Z[57];
	M[628] = -Z[55];
	M[629] = -Z[55];
	M[630] = -Z[55];
	M[631] = -Z[55];
	M[632] = 15.*(Z[0]*Z[15]+Z[2]*(Z[9]*Z[59]-Z[10]*Z[161]));
	M[633] = Z[40]*(Z[65]+Z[167]+Z[166]+Z[64])-15.*Z[42]*(Z[63]+Z[165]+Z[200]+Z[303]);
	V[8] = Z[0]*Z[132]+Z[2]*(Z[9]*Z[150]-Z[10]*Z[131])-Z[89]*(Z[2]*(Y[24]*Z[110]+Z[122]-Z[121]+9.81*Z[10])-Y[14]*Z[112]-Z[86])-15.*(Z[0]*Z[120]+Z[42]*Z[138]);
	Z[6] = Y[43]+Y[45]+Y[47]+Y[49];
	Z[15] = Z[6]*Z[40]-Z[34]-Z[153]-Z[183]-Z[191];
	Z[6] = Z[6]*Z[42]+Z[32]+Z[36]+Z[154]+Z[155];
	M[702] = 15.*(Z[6]*Z[26]+Z[15]*Z[19]);
	Z[19] = Z[71]+Z[245]+Z[192]+Z[139];
	Z[21] = -(Z[268]+Z[248]+Z[209]+Z[129]);
	M[703] = Z[0]*(Z[356]+Z[272]+Z[351]+Z[126])+Z[2]*(Z[9]*Z[21]+Z[10]*Z[19])+15.*(Z[35]+Z[85]+Z[87]+Z[88]+Z[114]+Z[13]+Z[14]+Z[83]+Z[42]*(Z[233]*Y[43]+Z[43]*Y[45]+Z[159]*Y[47]+Z[194]*Y[49])-Z[40]*(Z[235]*Y[43]+Z[41]*Y[45]+Z[158]*Y[47]+Z[176]*Y[49]))+4200.*Z[0];
	M[704] = 15.*(Z[6]*Z[50]+Z[15]*Z[47]);
	M[705] = 15.*(Z[6]*Z[56]+Z[15]*Z[50]);
	M[706] = -15.*Z[234];
	M[707] = -15.*Z[37];
	M[708] = -15.*Z[156];
	M[709] = -15.*Z[193];
	M[710] = Z[9]*Z[19]-Z[10]*Z[21]+15.*(Z[40]*(Z[304]*Y[43]+Z[61]*Y[45]+Z[163]*Y[47]+Z[198]*Y[49])-Z[184]-Z[188]-Z[142]-Z[160]-Z[181]-Z[182]-Z[51]-Z[116]-Z[42]*(Z[302]*Y[43]+Z[62]*Y[45]+Z[164]*Y[47]+Z[199]*Y[49]))-1919.3*Z[82]*Z[3];
	M[711] = Z[221]*(Z[100]+Z[344]+Z[352]+Z[266]+Z[270]+Z[354]+Z[101]+Z[345])+Z[222]*(Z[271]+Z[355])+Z[40]*Z[317]+Z[42]*Z[226]+Z[11]+Z[189]+Z[196]+Z[211]-Z[12]-Z[20]-Z[195]-Z[210]-Z[214]+4200.+2.8*Z[5]*Z[4];
	M[712] = -Z[25];
	M[713] = -Z[38];
	M[714] = -Z[157];
	M[715] = -Z[201];
	V[9] = (-(Y[219]+Y[251]))*Z[172]*Z[170]*Z[169]+Z[173]*(Y[250]+Y[218])+Z[2]*(Z[9]*(-(Z[118]*Y[43]+Z[105]*Y[45]+Z[144]*Y[49]))+Z[10]*(-(Z[113]*Y[43]+Z[79]*Y[45]+Z[202]*Y[49])))+Z[290]+Z[288]+Z[285]+Z[283]+Z[284]+Z[281]+Z[279]+Z[267]+Z[257]+Z[247]+Z[243]+Z[239]+Z[237]+Z[207]+Z[180]+Z[141]+Z[137]+Z[125]+Z[115]+Z[102]+Z[91]+Z[69]+Z[67]+Z[7]-Z[287]-Z[289]-Z[241]-Z[236]-Z[227]-Z[217]-Z[215]-Z[185]-Z[177]-Z[174]-Z[162]-Z[148]-Z[124]-Z[93]-Z[90]-Z[75]-Z[54]-Z[48]-Z[1];
	M[781] = Z[17]*Z[265]+Z[24]*Z[244]-Z[22]*Z[84];
	M[788] = Z[17]*Z[308]+Z[24]*Z[305]-Z[84]*Z[119];
	M[789] = Z[17]*Z[264]+Z[24]*Z[242]-Z[168];
	M[793] = Z[17]*Z[329]+Z[24]*Z[328]+Z[84]*Z[201];
	M[804] = -1.;
	V[10] = -(Z[17]*(Z[46]-Z[246])+Z[24]*(Z[212]-Z[249])+Z[84]*(Z[240]-Z[92]));
	M[870] = -1.;
	M[883] = 1.;
	M[937] = Z[17]*Z[228]+Z[24]*Z[232]-Z[23]*Z[84];
	M[944] = Z[17]*Z[299]+Z[24]*Z[300]-Z[84]*Z[140];
	M[945] = Z[17]*Z[225]+Z[24]*Z[229]-Z[66];
	M[948] = Z[17]*Z[326]+Z[24]*Z[327]+Z[84]*Z[157];
	M[959] = -1.;
	V[12] = Z[17]*(Z[273]+Z[219])+Z[24]*(Z[262]-Z[218])+Z[84]*(Z[208]-Z[282]);
	M[1105] = -1.;
	M[1118] = 1.;
	M[1249] = -(Z[16]*Z[73]+Z[74]*Z[278]+Z[81]*Z[276]);
	M[1256] = -(Z[73]*Z[117]+Z[74]*Z[310]+Z[81]*Z[309]);
	M[1257] = -(Z[74]*Z[277]+Z[81]*Z[274]+Z[29]);
	M[1259] = Z[38]*Z[73]+Z[74]*Z[325]+Z[81]*Z[324];
	M[1270] = -1.;
	V[16] = Z[73]*(-(Z[238]+Z[286]))+Z[74]*(Z[72]+Z[275])+Z[81]*(Z[269]+Z[337]);
	M[1336] = -1.;
	M[1353] = 1.;
	M[1405] = -(Z[8]*Z[252]+Z[70]*Z[263]+Z[253]*Z[258]);
	M[1412] = -(Z[44]*Z[252]+Z[70]*Z[307]+Z[253]*Z[306]);
	M[1413] = -(Z[70]*Z[260]+Z[253]*Z[256]+Z[18]);
	M[1414] = Z[25]*Z[252]+Z[60]*Z[253]+Z[70]*Z[197];
	M[1425] = -1.;
	V[18] = Z[70]*(Z[68]+Z[259])+Z[252]*(Z[128]-Z[280])+Z[253]*(-(Z[250]+Z[261]));
	M[1571] = -1.;
	M[1588] = 1.;
	M[1731] = 1.;
	M[1745] = -1.;
	M[1966] = 1.;
	Z[0] = Y[456]+1.;
	Z[1] = 1.0/Y[445];
	Z[2] = 1.0/Y[449];
	Z[3] = Z[1]*Z[2];
	Z[4] = Z[0]*Z[3];
	M[1982] = -Z[4];
	Z[5] = 1.0/Z[0];
	Z[6] = 1.0/Y[446];
	M[1983] = -(Z[5]*Z[6]*Y[456]+Z[1])*Z[2]*Z[0];
	M[1985] = -Z[4];
	V[25] = -Y[456]*Z[6]*Y[174]*Z[2];
	M[2143] = 0.001;
	M[2144] = -0.002;
	V[27] = Y[8]*Y[59];
	M[2198] = -1.;
	M[2199] = 1.;
	M[2272] = -0.5;
	M[2273] = -0.5;
	M[2276] = 1.;
	M[2278] = 1.;
	Z[1] = 1.0/Y[447];
	Z[0] = Z[3]*Y[446]*Y[447]*Y[448]*Z[0]*Z[1]*Z[6];
	M[2996] = Z[0];
	Z[2] = Y[448]*Y[447];
	M[2997] = Z[3]*Z[2]*((Y[456]+1.)*Y[446]+Y[456]*Y[445])*Z[1]*Z[6];
	M[2999] = Z[0];
	M[3000] = -Z[1];
	V[38] = Z[3]*Y[445]*(Z[2]*Y[174]*Y[456]+Y[175]*Y[446]*Y[449])*Z[1]*Z[6];
	LSQDecompSolve(39,M,78,P,V);
	if( P[38]==0 ) {
		YP[0] = (*dsn_undef);
		return;
	}
	YP[16] = V[0];
	YP[18] = V[1];
	YP[20] = V[2];
	YP[22] = V[3];
	YP[44] = V[4];
	YP[46] = V[5];
	YP[48] = V[6];
	YP[50] = V[7];
	YP[14] = V[8];
	YP[24] = V[9];
	YP[52] = V[10];
	YP[54] = V[11];
	YP[56] = V[12];
	YP[58] = V[13];
	YP[59] = V[14];
	YP[5] = V[15];
	YP[7] = V[16];
	Y[95] = V[17];
	Y[96] = V[18];
	Y[97] = V[19];
	Y[98] = V[20];
	Y[270] = V[21];
	Y[271] = V[22];
	Y[272] = V[23];
	Y[273] = V[24];
	Y[177] = V[25];
	Y[178] = V[26];
	Y[179] = V[27];
	Y[180] = V[28];
	Y[104] = V[29];
	Y[65] = V[30];
	Y[107] = V[31];
	Y[68] = V[32];
	Y[69] = V[33];
	Y[110] = V[34];
	Y[111] = V[35];
	Y[64] = V[36];
	Y[67] = V[37];
	Y[105] = V[38];
	Z[0] = Z[362];
	Z[1] = Z[359];
	Z[2] = Z[361];
	Z[3] = Y[14]*Z[0];
	Z[4] = Y[18]*Z[1];
	Z[5] = Z[3]-Z[2]*Z[4];
	Y[253] = Z[5];
	YP[25] = Y[252];
	Z[6] = Y[14]*Z[2];
	Z[4] = Z[0]*Z[4]+Z[6];
	Y[254] = Z[4];
	YP[26] = Y[253];
	Z[7] = Z[357];
	Z[8] = Z[363];
	Z[9] = Z[8]*Z[8];
	Z[10] = 0.76*Z[8];
	Z[11] = -Z[10]+2.79;
	Z[11] = 1.0/Z[11];
	Z[12] = 2.1204*Z[8];
	Z[13] = Y[314]*(1.+Z[9]);
	Z[9] = 7.7841*Z[9];
	Z[14] = Z[9]*Z[11]*Z[11]+1.;
	Z[8] = 2.79*Z[8];
	Z[15] = atan(Z[8]*Z[11]);
	Z[16] = sin(Z[15]);
	Z[17] = Z[358];
	Z[15] = cos(Z[15]);
	Z[18] = Z[360];
	Z[14] = 1.0/Z[14];
	Z[11] = Z[11]*Z[13]*(Z[12]*Z[11]+2.79)*Z[14]+Y[18];
	Y[255] = Z[7]*Z[11]+Y[24]-Z[1]*(Z[15]*Z[18]+Z[16]*Z[17])*Y[52];
	YP[27] = Y[254];
	Z[14] = Z[17]*Z[2];
	Z[19] = Z[18]*Z[0];
	Z[20] = Z[7]*Z[14]+Z[19];
	Z[21] = Z[18]*Z[2];
	Z[22] = Z[17]*Z[0];
	Z[23] = Z[22]-Z[7]*Z[21];
	Z[2] = Z[1]*Z[2];
	Y[256] = Z[3]-(Z[16]*Z[20]-Z[15]*Z[23])*Y[52]-Z[2]*Z[11];
	YP[28] = Y[255];
	Z[21] = Z[21]-Z[7]*Z[22];
	Z[14] = Z[7]*Z[19]+Z[14];
	Z[0] = Z[0]*Z[1];
	Y[257] = Z[6]+Z[0]*Z[11]-(Z[16]*Z[21]-Z[14]*Z[15])*Y[52];
	YP[29] = Y[256];
	Z[10] = Z[10]+2.79;
	Z[10] = 1.0/Z[10];
	Z[9] = Z[9]*Z[10]*Z[10]+1.;
	Z[8] = atan(Z[8]*Z[10]);
	Z[11] = sin(Z[8]);
	Z[8] = cos(Z[8]);
	Z[9] = 1.0/Z[9];
	Z[9] = Z[13]*Z[10]*(-Z[10]*Z[12]+2.79)*Z[9]+Y[18];
	Y[258] = Z[7]*Z[9]+Y[24]-Z[1]*(Z[8]*Z[18]+Z[11]*Z[17])*Y[54];
	YP[30] = Y[257];
	Y[259] = Z[3]-(Z[11]*Z[20]-Z[8]*Z[23])*Y[54]-Z[2]*Z[9];
	YP[31] = Y[258];
	Y[260] = Z[6]+Z[0]*Z[9]-(Z[11]*Z[21]-Z[8]*Z[14])*Y[54];
	YP[32] = Y[259];
	Z[0] = Z[7]*Y[18]+Y[24];
	Y[261] = Z[0];
	YP[33] = Y[260];
	Y[262] = Z[5];
	YP[34] = Y[261];
	Y[263] = Z[4];
	YP[35] = Y[262];
	Y[264] = Z[0];
	YP[36] = Y[263];
	Y[265] = Z[5];
	YP[37] = Y[264];
	Y[266] = Z[4];
	YP[38] = Y[265];
	Y[267] = Z[0];
	YP[39] = Y[266];
	Y[268] = Z[5];
	YP[40] = Y[267];
	Y[269] = Z[4];
	YP[41] = Y[268];
	Y[181] = Z[1]*Z[17]*Y[16]+Z[20]*Y[20]+Z[21]*Y[22];
	YP[6] = (1.*(Y[174]-Y[69]))/Y[446];
	YP[42] = Y[269];
	Y[116] = exp(0.2432856897999999983*Y[181]+10.0796158700000004-49.97929146000000156*Y[83]);
	Z[0] = Y[116]+1.;
	Z[0] = 1.0/Z[0];
	Y[117] = Z[0];
	Y[121] = exp(-0.02812856950000000153*Y[181]-76.55028944*Y[83]+21.56605852);
	Z[0] = 1.+Y[121];
	Z[0] = 1.0/Z[0];
	Y[122] = Z[0];
	Y[118] = exp(-7.239079096000000587*Y[122]+2.71471066500000017-7.00272036*Y[117]);
	Y[119] = exp(-0.6107030660000000201+3.313240363999999869*Y[117]+6.73137902*Y[122]);
	Z[0] = Y[118]+Y[119];
	Z[0] = 1.0/Z[0];
	Y[120] = Z[0];
	Y[71] = Y[118]*Y[120];
	Y[72] = Y[120]*Y[119];
	Y[126] = exp(0.01241087923000000106*Y[181]+21.5722487*Y[83]-6.272946396000000213);
	Y[125] = exp(6.7963375-0.2838676995999999849*Y[181]-11.09524043*Y[83]);
	Z[0] = Y[126]+1.;
	Z[1] = Y[125]+1.;
	Z[1] = 1.0/Z[1];
	Z[0] = 1.0/Z[0];
	Y[74] = -777.8647008*Z[1]-2929.728568*Z[0]+2540.738686;
	if( Y[391]==1. )
		Y[129] = 0.;
	else
		Y[129] = Y[74];
	if( Y[390]==1. )
		Y[127] = 0.;
	else
		Y[127] = Y[129];
	Y[123] = exp(-7.974254557999999552+28.12302425999999872*Y[83]-0.0003008746441999999843*Y[181]);
	YP[11] = 25.*Y[127]-50.*Y[11];
	Y[124] = exp(0.4441051494000000178*Y[181]-22.40944005999999913+83.70368844*Y[83]);
	Z[0] = Y[124]+1.;
	Z[1] = Y[123]+1.;
	Z[0] = 1.0/Z[0];
	Z[1] = 1.0/Z[1];
	Y[73] = 4428.883585-4592.896108*Z[1]-244.0444174*Z[0];
	if( Y[392]==1. )
		Y[128] = 0.;
	else
		Y[128] = Y[73];
	Y[66] = fabs(9.54929658551372013*Y[448]*Y[7]);
	Z[0] = Z[363];
	Z[1] = -0.76*Z[0]+2.79;
	Z[1] = 1.0/Z[1];
	Z[2] = atan(2.79*Z[0]*Z[1]);
	Z[3] = sin(Z[2]);
	Z[4] = Z[358];
	Z[5] = Z[357];
	Z[6] = Z[362];
	Z[7] = Z[360];
	Z[8] = Z[361];
	Z[9] = Z[4]*Z[6];
	Z[10] = Z[7]*Z[8];
	Z[11] = Z[10]-Z[5]*Z[9];
	Z[2] = cos(Z[2]);
	Z[12] = Z[7]*Z[6];
	Z[13] = Z[4]*Z[8];
	Z[14] = Z[5]*Z[12]+Z[13];
	Z[15] = Z[3]*Z[11]-Z[2]*Z[14];
	Z[16] = -asin(Z[15]);
	Z[17] = Z[359];
	Z[18] = Z[17]*(Z[2]*Z[7]+Z[3]*Z[4]);
	Z[19] = 1.-Z[15]*Z[15];
	Z[20] = (1.0/(sqrt(Z[19])));
	Z[21] = -Z[18]*Z[20];
	Z[22] = Z[6]*Z[17];
	Z[23] = Z[22]*Y[43];
	Z[24] = 0.7396;
	Z[25] = 1.3745;
	Z[26] = Z[24]*Z[14];
	Z[27] = Z[25]*Z[11];
	Z[28] = 0.25*Z[22];
	Z[19] = fabs(Z[19])+1e-20;
	Z[19] = (Z[26]+Z[27]+Z[28]+Y[21]-Z[23])/sqrt(Z[19]);
	Z[12] = Z[5]*Z[13]+Z[12];
	Z[9] = Z[9]-Z[5]*Z[10];
	Z[2] = Z[12]*Z[3]-Z[2]*Z[9];
	Z[3] = -Z[2]*Z[20];
	Z[10] = Z[4]*Z[17]*Y[16]+Z[12]*Y[20]+Z[11]*Y[22];
	Z[13] = Z[9]*Y[20]+Z[14]*Y[22]-Z[7]*Z[17]*Y[16];
	Z[20] = Z[5]*Y[18]+Y[24];
	Z[29] = Z[9]*Z[24]+Z[12]*Z[25]-0.25*Z[17]*Z[8];
	Z[30] = Y[14]*Z[6];
	Z[31] = Z[30]-Z[8]*Z[17]*Y[18];
	Z[24] = Y[43]*Z[5]-Z[17]*(Z[4]*Z[25]-Z[7]*Z[24])-0.25*Z[5];
	Z[25] = Y[16]*Z[5]+Z[17]*(Z[6]*Y[22]-Z[8]*Y[20])-Y[44];
	Z[32] = Y[43]*Z[8];
	Z[11] = Z[11]*Z[10]+Z[13]*Z[14]+Z[17]*(Z[6]*Z[25]+Z[20]*Z[32])+Z[20]*Z[29]+Z[24]*Z[31];
	Z[14] = 0.01*Z[19]+0.004657894736842105263*atan(412.2033898305084746*Z[19]-146.3322033898305085)+0.35145;
	Z[33] = ( (500.*Z[11]-107919.+304000.*Z[19]<0.) ? -500.*Z[11]+107920.-304000.*Z[19] : 1. );
	Z[26] = Z[26]+Z[27]+Z[28];
	Z[27] = Y[14]*Z[8];
	Z[28] = Z[22]*Y[18]+Z[27];
	Z[4] = -(Z[3]*(Z[17]*(Z[7]*Z[13]-Z[4]*Z[10])+Z[28]*(Z[17]*Z[32]+Z[29])+Z[31]*(Z[23]-Z[26])-Z[5]*Z[25])+Z[21]*(Z[9]*Z[13]+Z[10]*Z[12]+Z[17]*(Z[6]*Z[20]*Y[43]-Z[8]*Z[25])-Z[20]*Z[26]-Z[24]*Z[28]));
	Z[6] = Z[0]*Z[0];
	Z[7] = 1.+7.7841*Z[6]*Z[1]*Z[1];
	Z[7] = 1.0/Z[7];
	Z[0] = Y[314]*(1.+Z[6])*Z[1]*(2.79+2.1204*Z[0]*Z[1])*Z[7]+Y[18];
	Z[1] = cos(Z[16]);
	Z[1] = (1.0/(Z[1]*Z[1]));
	Z[0] = (Z[2]*(Z[0]*Z[8]*Z[17]+Z[2]*Y[52]-Z[30])+Z[18]*(Z[18]*Y[52]-Z[0]*Z[5]-Y[24])-(Z[15]+sin(Z[16]))*(Z[0]*Z[22]+Z[27]-Z[15]*Y[52]))*Z[1];
	Z[1] = 0.00006016949152542372881*Z[33]*(0.0002391864406779661017*Z[33]+0.9545)*exp(-0.56626+0.00009597627118644067797*Z[33]);
	Z[2] = ( (Z[1]>0.1) ? Z[1] : 0.1 );
	Z[2] = 1.0/Z[2];
	YP[0] = Z[2]*(Z[0]*Z[14]-Y[0]*fabs(Z[4])-Z[4]);
	Z[0] = Z[359];
	Z[1] = Z[0];
	Z[2] = Z[360];
	Z[3] = Z[2];
	Z[4] = Z[357];
	Z[5] = Z[362];
	Z[6] = Z[358];
	Z[7] = Z[361];
	Z[8] = Z[2]*Z[5];
	Z[9] = Z[7]*Z[6];
	Z[10] = Z[4]*Z[8]+Z[9];
	Z[11] = asin(Z[10]);
	Z[12] = 1.-Z[10]*Z[10];
	Z[13] = (1.0/(sqrt(Z[12])));
	Z[14] = Z[2]*Z[7];
	Z[15] = Z[6]*Z[5];
	Z[16] = Z[15]-Z[4]*Z[14];
	Z[17] = Z[16]/sqrt(Z[12]);
	Z[14] = Z[14]-Z[4]*Z[15];
	Z[15] = Z[0]*Z[5];
	Z[18] = Z[15]*Y[47];
	Z[19] = 0.7361;
	Z[20] = -1.4755;
	Z[21] = Z[10]*Z[19];
	Z[22] = Z[20]*Z[14];
	Z[23] = 0.25*Z[15];
	Z[12] = fabs(Z[12])+1e-20;
	Z[12] = (Z[21]+Z[22]+Z[23]+Y[21]-Z[18])/sqrt(Z[12]);
	Z[8] = Z[4]*Z[9]+Z[8];
	Z[9] = Z[0]*Z[6]*Y[16]+Z[8]*Y[20]+Z[14]*Y[22];
	Z[24] = Z[0]*Z[2];
	Z[25] = Z[16]*Y[20]+Z[10]*Y[22]-Z[24]*Y[16];
	Z[26] = Y[18]*Z[4];
	Z[27] = Z[26]+Y[24];
	Z[28] = Z[8]*Z[20]+Z[16]*Z[19]-0.25*Z[0]*Z[7];
	Z[29] = Y[14]*Z[5];
	Z[30] = Y[18]*Z[0]*Z[7];
	Z[31] = Z[29]-Z[30];
	Z[19] = Y[47]*Z[4]-Z[0]*(Z[6]*Z[20]-Z[2]*Z[19])-0.25*Z[4];
	Z[20] = Y[16]*Z[4]+Z[0]*(Z[5]*Y[22]-Z[7]*Y[20])-Y[48];
	Z[32] = Y[47]*Z[7];
	Z[14] = Z[0]*(Z[5]*Z[20]+Z[27]*Z[32])+Z[9]*Z[14]+Z[10]*Z[25]+Z[19]*Z[31]+Z[27]*Z[28];
	Z[33] = 0.01*Z[12]+0.004657894736842105263*atan(412.2033898305084746*Z[12]-146.3322033898305085)+0.35145;
	Z[34] = Y[14]*Z[7];
	Z[15] = Z[15]*Y[18];
	Z[35] = cos(Z[11]);
	Z[35] = (1.0/(Z[35]*Z[35]));
	Z[10] = (Z[16]*(Z[16]*Y[56]+Z[29]-Z[30])+(Z[10]-sin(Z[11]))*(Z[10]*Y[56]+Z[15]+Z[34])-Z[24]*(Y[24]+Z[26]-Z[24]*Y[56]))*Z[35];
	Z[24] = ( (500.*Z[14]-107919.+304000.*Z[12]<0.) ? -500.*Z[14]+107920.-304000.*Z[12] : 1. );
	Z[21] = Z[21]+Z[22]+Z[23];
	Z[15] = Z[34]+Z[15];
	Z[0] = (Z[0]*(Z[5]*Z[27]*Y[47]-Z[7]*Z[20])+Z[8]*Z[9]+Z[16]*Z[25]-Z[15]*Z[19]-Z[21]*Z[27])*Z[3]*Z[1]*Z[13]-Z[17]*(Z[0]*(Z[2]*Z[25]-Z[6]*Z[9])+Z[15]*(Z[0]*Z[32]+Z[28])+Z[31]*(Z[18]-Z[21])-Z[4]*Z[20]);
	Z[2] = 0.00006016949152542372881*Z[24]*(0.0002391864406779661017*Z[24]+0.9545)*exp(-0.56626+0.00009597627118644067797*Z[24]);
	Z[4] = ( (Z[2]>0.1) ? Z[2] : 0.1 );
	Z[4] = 1.0/Z[4];
	YP[1] = 1.*Z[4]*(Z[10]*Z[33]-Y[1]*fabs(Z[0])-Z[0]);
	Z[0] = Z[363];
	Z[1] = 0.76*Z[0]+2.79;
	Z[1] = 1.0/Z[1];
	Z[2] = atan(2.79*Z[0]*Z[1]);
	Z[3] = sin(Z[2]);
	Z[4] = Z[358];
	Z[5] = Z[357];
	Z[6] = Z[362];
	Z[7] = Z[360];
	Z[8] = Z[361];
	Z[9] = Z[4]*Z[6];
	Z[10] = Z[7]*Z[8];
	Z[11] = Z[10]-Z[5]*Z[9];
	Z[2] = cos(Z[2]);
	Z[12] = Z[7]*Z[6];
	Z[13] = Z[4]*Z[8];
	Z[14] = Z[5]*Z[12]+Z[13];
	Z[15] = Z[3]*Z[11]-Z[2]*Z[14];
	Z[16] = -asin(Z[15]);
	Z[17] = Z[359];
	Z[18] = Z[17]*(Z[2]*Z[7]+Z[3]*Z[4]);
	Z[19] = 1.-Z[15]*Z[15];
	Z[20] = (1.0/(sqrt(Z[19])));
	Z[21] = -Z[18]*Z[20];
	Z[22] = Z[6]*Z[17];
	Z[23] = Z[22]*Y[45];
	Z[24] = 0.8424;
	Z[25] = 1.3745;
	Z[26] = Z[25]*Z[11];
	Z[27] = Z[24]*Z[14];
	Z[28] = 0.25*Z[22];
	Z[19] = fabs(Z[19])+1e-20;
	Z[19] = (Z[28]+Z[26]+Y[21]-Z[27]-Z[23])/sqrt(Z[19]);
	Z[12] = Z[5]*Z[13]+Z[12];
	Z[9] = Z[9]-Z[5]*Z[10];
	Z[2] = Z[12]*Z[3]-Z[2]*Z[9];
	Z[3] = -Z[2]*Z[20];
	Z[10] = Z[4]*Z[17]*Y[16]+Z[12]*Y[20]+Z[11]*Y[22];
	Z[13] = Z[9]*Y[20]+Z[14]*Y[22]-Z[7]*Z[17]*Y[16];
	Z[20] = Z[5]*Y[18]+Y[24];
	Z[29] = Z[12]*Z[25]-Z[9]*Z[24]-0.25*Z[17]*Z[8];
	Z[30] = Y[14]*Z[6];
	Z[31] = Z[30]-Z[8]*Z[17]*Y[18];
	Z[24] = Y[45]*Z[5]-Z[17]*(Z[4]*Z[25]+Z[7]*Z[24])-0.25*Z[5];
	Z[25] = Y[16]*Z[5]+Z[17]*(Z[6]*Y[22]-Z[8]*Y[20])-Y[46];
	Z[32] = Y[45]*Z[8];
	Z[11] = Z[11]*Z[10]+Z[13]*Z[14]+Z[17]*(Z[6]*Z[25]+Z[20]*Z[32])+Z[20]*Z[29]+Z[24]*Z[31];
	Z[14] = 0.01*Z[19]+0.004657894736842105263*atan(412.2033898305084746*Z[19]-146.3322033898305085)+0.35145;
	Z[33] = ( (500.*Z[11]-107919.+304000.*Z[19]<0.) ? -500.*Z[11]+107920.-304000.*Z[19] : 1. );
	Z[26] = Z[28]+Z[26]-Z[27];
	Z[27] = Y[14]*Z[8];
	Z[28] = Z[22]*Y[18]+Z[27];
	Z[4] = -(Z[3]*(Z[17]*(Z[7]*Z[13]-Z[4]*Z[10])+Z[28]*(Z[17]*Z[32]+Z[29])+Z[31]*(Z[23]-Z[26])-Z[5]*Z[25])+Z[21]*(Z[9]*Z[13]+Z[10]*Z[12]+Z[17]*(Z[6]*Z[20]*Y[45]-Z[8]*Z[25])-Z[20]*Z[26]-Z[24]*Z[28]));
	Z[6] = Z[0]*Z[0];
	Z[7] = 1.+7.7841*Z[6]*Z[1]*Z[1];
	Z[7] = 1.0/Z[7];
	Z[0] = Y[314]*(1.+Z[6])*Z[1]*(2.79-2.1204*Z[0]*Z[1])*Z[7]+Y[18];
	Z[1] = cos(Z[16]);
	Z[1] = (1.0/(Z[1]*Z[1]));
	Z[0] = (Z[2]*(Z[0]*Z[8]*Z[17]+Z[2]*Y[54]-Z[30])-Z[18]*(Z[0]*Z[5]+Y[24]-Z[18]*Y[54])-(Z[15]+sin(Z[16]))*(Z[0]*Z[22]+Z[27]-Z[15]*Y[54]))*Z[1];
	Z[1] = 0.00006016949152542372881*Z[33]*(0.0002391864406779661017*Z[33]+0.9545)*exp(-0.56626+0.00009597627118644067797*Z[33]);
	Z[2] = ( (Z[1]>0.1) ? Z[1] : 0.1 );
	Z[2] = 1.0/Z[2];
	YP[2] = Z[2]*(Z[0]*Z[14]-Y[2]*fabs(Z[4])-Z[4]);
	Z[0] = Z[359];
	Z[1] = Z[0];
	Z[2] = Z[360];
	Z[3] = Z[2];
	Z[4] = Z[357];
	Z[5] = Z[362];
	Z[6] = Z[358];
	Z[7] = Z[361];
	Z[8] = Z[2]*Z[5];
	Z[9] = Z[7]*Z[6];
	Z[10] = Z[4]*Z[8]+Z[9];
	Z[11] = asin(Z[10]);
	Z[12] = 1.-Z[10]*Z[10];
	Z[13] = (1.0/(sqrt(Z[12])));
	Z[14] = Z[2]*Z[7];
	Z[15] = Z[6]*Z[5];
	Z[16] = Z[15]-Z[4]*Z[14];
	Z[17] = Z[16]/sqrt(Z[12]);
	Z[14] = Z[14]-Z[4]*Z[15];
	Z[15] = Z[0]*Z[5];
	Z[18] = Z[15]*Y[49];
	Z[19] = 0.8389;
	Z[20] = -1.4755;
	Z[21] = Z[20]*Z[14];
	Z[22] = Z[10]*Z[19];
	Z[23] = 0.25*Z[15];
	Z[12] = fabs(Z[12])+1e-20;
	Z[12] = (Z[23]+Z[21]+Y[21]-Z[22]-Z[18])/sqrt(Z[12]);
	Z[8] = Z[4]*Z[9]+Z[8];
	Z[9] = Z[0]*Z[6]*Y[16]+Z[8]*Y[20]+Z[14]*Y[22];
	Z[24] = Z[0]*Z[2];
	Z[25] = Z[16]*Y[20]+Z[10]*Y[22]-Z[24]*Y[16];
	Z[26] = Y[18]*Z[4];
	Z[27] = Z[26]+Y[24];
	Z[28] = Z[8]*Z[20]-Z[16]*Z[19]-0.25*Z[0]*Z[7];
	Z[29] = Y[14]*Z[5];
	Z[30] = Y[18]*Z[0]*Z[7];
	Z[31] = Z[29]-Z[30];
	Z[19] = Y[49]*Z[4]-Z[0]*(Z[2]*Z[19]+Z[6]*Z[20])-0.25*Z[4];
	Z[20] = Y[16]*Z[4]+Z[0]*(Z[5]*Y[22]-Z[7]*Y[20])-Y[50];
	Z[32] = Y[49]*Z[7];
	Z[14] = Z[0]*(Z[5]*Z[20]+Z[27]*Z[32])+Z[9]*Z[14]+Z[10]*Z[25]+Z[19]*Z[31]+Z[27]*Z[28];
	Z[33] = 0.01*Z[12]+0.004657894736842105263*atan(412.2033898305084746*Z[12]-146.3322033898305085)+0.35145;
	Z[34] = Y[14]*Z[7];
	Z[15] = Z[15]*Y[18];
	Z[35] = cos(Z[11]);
	Z[35] = (1.0/(Z[35]*Z[35]));
	Z[10] = (Z[16]*(Z[16]*Y[58]+Z[29]-Z[30])+(Z[10]-sin(Z[11]))*(Z[10]*Y[58]+Z[15]+Z[34])-Z[24]*(Y[24]+Z[26]-Z[24]*Y[58]))*Z[35];
	Z[24] = ( (500.*Z[14]-107919.+304000.*Z[12]<0.) ? -500.*Z[14]+107920.-304000.*Z[12] : 1. );
	Z[21] = Z[23]+Z[21]-Z[22];
	Z[15] = Z[34]+Z[15];
	Z[0] = (Z[0]*(Z[5]*Z[27]*Y[49]-Z[7]*Z[20])+Z[8]*Z[9]+Z[16]*Z[25]-Z[15]*Z[19]-Z[21]*Z[27])*Z[3]*Z[1]*Z[13]-Z[17]*(Z[0]*(Z[2]*Z[25]-Z[6]*Z[9])+Z[15]*(Z[0]*Z[32]+Z[28])+Z[31]*(Z[18]-Z[21])-Z[4]*Z[20]);
	Z[2] = 0.00006016949152542372881*Z[24]*(0.0002391864406779661017*Z[24]+0.9545)*exp(-0.56626+0.00009597627118644067797*Z[24]);
	Z[4] = ( (Z[2]>0.1) ? Z[2] : 0.1 );
	Z[4] = 1.0/Z[4];
	YP[3] = Z[4]*(Z[10]*Z[33]-Y[3]*fabs(Z[0])-Z[0]);
	YP[12] = 25.*Y[128]-50.*Y[12];
	if( Y[337]==1. )
		Y[113] = 0.;
	else
		Y[113] = 1.;
	if( Y[337]==1. )
		Y[112] = 1.;
	else
		Y[112] = 0.;
	YP[4] = -50.*Y[4]+500000.*Y[113];
	if( Y[402]==1. )
		Y[103] = 1.*(Y[451]-1.)*Y[64]*Y[448]*Y[7];
	else
		Y[103] = ((1.-Y[451])*Y[64]*Y[448]*Y[7])/Y[451];
	if( Y[400]==1. )
		Y[106] = (1.-Y[452])*Y[67]*Y[7];
	else
		Y[106] = (1.-1.0/Y[452])*Y[67]*Y[7];
	if( Y[403]==1. ) {
		Z[0] = Y[456]+1.;
		Z[0] = 1.0/Z[0];
		Y[108] = (1.-Y[453])*Y[68]*Y[456]*(Y[7]*Y[449]-Y[6])*Z[0];
	}
	else if( Y[403]==0. ) {
		Z[0] = Y[456]+1.;
		Z[0] = 1.0/Z[0];
		Y[108] = -((Y[453]-1.)*Y[68]*Y[456]*(Y[6]-Y[7]*Y[449])*Z[0])/Y[453];
	}
	else
		Y[108] = 0.;
	if( Y[401]==1. ) {
		Z[0] = Y[456]+1.;
		Z[0] = 1.0/Z[0];
		Y[109] = -(Y[454]-1.)*Y[69]*(Y[6]-Y[7]*Y[449])*Z[0];
	}
	else if( Y[401]==0. ) {
		Z[0] = Y[456]+1.;
		Z[0] = 1.0/Z[0];
		Y[109] = ((1.-Y[454])*Y[69]*(Y[7]*Y[449]-Y[6])*Z[0])/Y[454];
	}
	else
		Y[109] = 0.;
	Z[0] = 50.;
	YP[8] = Z[0]*(Y[112]-Y[8]);
	Z[0] = Y[456]+1.;
	Z[0] = 1.0/Z[0];
	YP[9] = (Y[6]+(Y[7]*Y[449])/Y[456])*Z[0]*Y[456];
	YP[10] = Y[7];
	Z[0] = Z[363];
	Z[1] = -0.76*Z[0]+2.79;
	Z[1] = 1.0/Z[1];
	Z[2] = atan(2.79*Z[0]*Z[1]);
	Z[3] = sin(Z[2]);
	Z[4] = Z[358];
	Z[5] = Z[357];
	Z[6] = Z[362];
	Z[7] = Z[360];
	Z[8] = Z[361];
	Z[9] = Z[4]*Z[6];
	Z[10] = Z[7]*Z[8];
	Z[11] = Z[10]-Z[5]*Z[9];
	Z[2] = cos(Z[2]);
	Z[12] = Z[7]*Z[6];
	Z[13] = Z[4]*Z[8];
	Z[14] = Z[5]*Z[12]+Z[13];
	Z[15] = Z[3]*Z[11]-Z[2]*Z[14];
	Z[16] = -asin(Z[15]);
	Z[17] = Z[359];
	Z[18] = Z[17]*(Z[2]*Z[7]+Z[3]*Z[4]);
	Z[19] = 1.-Z[15]*Z[15];
	Z[20] = (1.0/(sqrt(Z[19])));
	Z[21] = -Z[18]*Z[20];
	Z[22] = Z[6]*Z[17];
	Z[23] = Z[22]*Y[43];
	Z[24] = 0.7396;
	Z[25] = 1.3745;
	Z[26] = Z[25]*Z[11];
	Z[27] = Z[24]*Z[14];
	Z[28] = 0.25*Z[22];
	Z[19] = fabs(Z[19])+1e-20;
	Z[29] = (1.0/(sqrt(Z[19])));
	Z[30] = (Z[26]+Z[27]+Z[28]+Y[21]-Z[23])*Z[29];
	Z[12] = Z[5]*Z[13]+Z[12];
	Z[9] = Z[9]-Z[5]*Z[10];
	Z[2] = Z[12]*Z[3]-Z[2]*Z[9];
	Z[3] = -Z[2]*Z[20];
	Z[10] = Z[4]*Z[17]*Y[16]+Z[12]*Y[20]+Z[11]*Y[22];
	Z[13] = Z[9]*Y[20]+Z[14]*Y[22]-Z[7]*Z[17]*Y[16];
	Z[20] = Z[5]*Y[18]+Y[24];
	Z[31] = Z[9]*Z[24]+Z[12]*Z[25]-0.25*Z[17]*Z[8];
	Z[32] = Y[14]*Z[6];
	Z[33] = Z[8]*Z[17]*Y[18]-Z[32];
	Z[24] = Y[43]*Z[5]-Z[17]*(Z[4]*Z[25]-Z[7]*Z[24])-0.25*Z[5];
	Z[25] = Y[44]-Y[16]*Z[5]-Z[17]*(Z[6]*Y[22]-Z[8]*Y[20]);
	Z[34] = Y[43]*Z[8];
	Z[11] = Z[11]*Z[10]+Z[13]*Z[14]+Z[20]*Z[31]-Z[17]*(Z[6]*Z[25]-Z[20]*Z[34])-Z[24]*Z[33];
	Z[14] = -Z[30]*Z[19]*Z[29];
	Z[19] = Z[30]*Z[15];
	Z[29] = -Z[19]*Z[21];
	Z[19] = -Z[19]*Z[3];
	Z[35] = ( (500.*Z[11]-107919.+304000.*Z[30]<0.) ? -500.*Z[11]+107920.-304000.*Z[30] : 1. );
	Z[36] = 0.7610845*sin(2.*atan(0.00008547658753529114608*Z[35]))*(1.+0.90729*fabs(Z[16]));
	Z[26] = Z[26]+Z[27]+Z[28];
	Z[27] = Y[14]*Z[8];
	Z[28] = Z[22]*Y[18]+Z[27];
	Z[4] = Z[17]*(Z[4]*Z[10]-Z[7]*Z[13]);
	Z[7] = (-(Z[17]*Z[34]+Z[31]))*Z[28];
	Z[23] = (Z[23]-Z[26])*Z[33];
	Z[31] = Z[5]*Z[25];
	Z[6] = (-(Z[6]*Z[20]*Y[43]+Z[8]*Z[25]))*Z[17];
	Z[24] = Z[24]*Z[28];
	Z[10] = Z[10]*Z[12];
	Z[9] = Z[9]*Z[13];
	Z[12] = Z[20]*Z[26];
	Z[13] = Z[3]*(Z[4]+Z[7]+Z[23]-Z[31])+Z[21]*(Z[12]+Z[24]+Z[6]-Z[9]-Z[10]);
	Z[20] = Z[0]*Z[0];
	Z[25] = 1.+7.7841*Z[20]*Z[1]*Z[1];
	Z[25] = 1.0/Z[25];
	Z[0] = Y[314]*(1.+Z[20])*Z[1]*(2.79+2.1204*Z[0]*Z[1])*Z[25]+Y[18];
	Z[1] = Z[0]*Z[22]+Z[27]-Z[15]*Y[52];
	Z[0] = Z[21]*(Z[4]+Z[7]+Z[23]-Z[14]*(Z[0]*Z[8]*Z[17]+Z[2]*Y[52]-Z[32])-Z[19]*Z[1]-Z[31])-Z[3]*(Z[6]+Z[12]+Z[24]-Z[1]*Z[29]-Z[14]*(Z[18]*Y[52]-Z[0]*Z[5]-Y[24])-Z[9]-Z[10]);
	Z[1] = ( (Z[36]>0.1) ? Z[36] : 0.1 );
	Z[1] = 1.0/Z[1];
	YP[60] = Z[1]*(Z[0]-Y[60]*fabs(Z[13]));
	Z[0] = Z[359];
	Z[1] = Z[0];
	Z[2] = Z[360];
	Z[3] = Z[2];
	Z[4] = Z[357];
	Z[5] = Z[362];
	Z[6] = Z[358];
	Z[7] = Z[361];
	Z[8] = Z[2]*Z[5];
	Z[9] = Z[7]*Z[6];
	Z[10] = Z[4]*Z[8]+Z[9];
	Z[11] = asin(Z[10]);
	Z[12] = 1.-Z[10]*Z[10];
	Z[13] = (1.0/(sqrt(Z[12])));
	Z[14] = Z[2]*Z[7];
	Z[15] = Z[6]*Z[5];
	Z[16] = Z[15]-Z[4]*Z[14];
	Z[17] = Z[16]/sqrt(Z[12]);
	Z[18] = Z[0]*Z[5];
	Z[19] = Z[18]*Y[47];
	Z[14] = Z[14]-Z[4]*Z[15];
	Z[15] = 0.7361;
	Z[20] = -1.4755;
	Z[21] = Z[20]*Z[14];
	Z[22] = Z[15]*Z[10];
	Z[23] = 0.25*Z[18];
	Z[12] = fabs(Z[12])+1e-20;
	Z[24] = (1.0/(sqrt(Z[12])));
	Z[25] = (Y[21]+Z[23]+Z[21]+Z[22]-Z[19])*Z[24];
	Z[8] = Z[4]*Z[9]+Z[8];
	Z[9] = Z[0]*Z[6]*Y[16]+Z[8]*Y[20]+Z[14]*Y[22];
	Z[26] = Z[0]*Z[2];
	Z[27] = Z[26]*Y[16]-Z[16]*Y[20]-Z[10]*Y[22];
	Z[28] = Y[18]*Z[4];
	Z[29] = Z[28]+Y[24];
	Z[30] = Z[8]*Z[20]+Z[15]*Z[16]-0.25*Z[0]*Z[7];
	Z[31] = Y[18]*Z[0]*Z[7];
	Z[32] = Y[14]*Z[5];
	Z[33] = Z[31]-Z[32];
	Z[15] = Y[47]*Z[4]-Z[0]*(Z[6]*Z[20]-Z[2]*Z[15])-0.25*Z[4];
	Z[20] = Y[48]+Z[0]*(Z[7]*Y[20]-Z[5]*Y[22])-Y[16]*Z[4];
	Z[34] = Y[47]*Z[7];
	Z[14] = Z[9]*Z[14]+Z[29]*Z[30]-Z[0]*(Z[5]*Z[20]-Z[29]*Z[34])-Z[10]*Z[27]-Z[15]*Z[33];
	Z[12] = -Z[25]*Z[12]*Z[24];
	Z[24] = Z[10]*Z[25];
	Z[35] = -Z[24]*Z[3]*Z[1]*Z[13];
	Z[24] = Z[17]*Z[24];
	Z[36] = ( (500.*Z[14]-107919.+304000.*Z[25]<0.) ? -500.*Z[14]+107920.-304000.*Z[25] : 1. );
	Z[37] = 0.7610845*sin(2.*atan(0.00008547658753529114608*Z[36]))*(1.+0.90729*fabs(Z[11]));
	Z[21] = Z[21]+Z[22]+Z[23];
	Z[18] = Z[18]*Y[18];
	Z[22] = Y[14]*Z[7];
	Z[23] = Z[22]+Z[18];
	Z[2] = Z[0]*(Z[2]*Z[27]+Z[6]*Z[9]);
	Z[6] = (Z[19]-Z[21])*Z[33];
	Z[19] = (-(Z[0]*Z[34]+Z[30]))*Z[23];
	Z[4] = Z[4]*Z[20];
	Z[0] = (Z[5]*Z[29]*Y[47]+Z[7]*Z[20])*Z[0];
	Z[5] = Z[15]*Z[23];
	Z[7] = Z[8]*Z[9];
	Z[8] = Z[16]*Z[27];
	Z[9] = Z[29]*Z[21];
	Z[15] = Z[17]*(Z[6]+Z[19]+Z[2]-Z[4])+(Z[7]+Z[0]-Z[9]-Z[8]-Z[5])*Z[3]*Z[1]*Z[13];
	Z[10] = Z[10]*Y[56]+Z[18]+Z[22];
	Z[0] = Z[17]*(Z[10]*Z[35]+Z[12]*(Z[26]*Y[56]-Y[24]-Z[28])+Z[0]+Z[7]-Z[5]-Z[8]-Z[9])-(Z[2]+Z[6]+Z[19]-Z[12]*(Z[31]-Z[16]*Y[56]-Z[32])-Z[24]*Z[10]-Z[4])*Z[3]*Z[1]*Z[13];
	Z[2] = ( (Z[37]>0.1) ? Z[37] : 0.1 );
	Z[2] = 1.0/Z[2];
	YP[61] = 1.*Z[2]*(Z[0]-Y[61]*fabs(Z[15]));
	Z[0] = Z[363];
	Z[1] = 0.76*Z[0]+2.79;
	Z[1] = 1.0/Z[1];
	Z[2] = atan(2.79*Z[0]*Z[1]);
	Z[3] = sin(Z[2]);
	Z[4] = Z[358];
	Z[5] = Z[357];
	Z[6] = Z[362];
	Z[7] = Z[360];
	Z[8] = Z[361];
	Z[9] = Z[4]*Z[6];
	Z[10] = Z[7]*Z[8];
	Z[11] = Z[10]-Z[5]*Z[9];
	Z[2] = cos(Z[2]);
	Z[12] = Z[7]*Z[6];
	Z[13] = Z[4]*Z[8];
	Z[14] = Z[5]*Z[12]+Z[13];
	Z[15] = Z[3]*Z[11]-Z[2]*Z[14];
	Z[16] = -asin(Z[15]);
	Z[17] = Z[359];
	Z[18] = Z[17]*(Z[2]*Z[7]+Z[3]*Z[4]);
	Z[19] = 1.-Z[15]*Z[15];
	Z[20] = (1.0/(sqrt(Z[19])));
	Z[21] = -Z[18]*Z[20];
	Z[22] = Z[6]*Z[17];
	Z[23] = Z[22]*Y[45];
	Z[24] = 0.8424;
	Z[25] = 1.3745;
	Z[26] = Z[25]*Z[11];
	Z[27] = Z[24]*Z[14];
	Z[28] = 0.25*Z[22];
	Z[19] = fabs(Z[19])+1e-20;
	Z[29] = (1.0/(sqrt(Z[19])));
	Z[30] = (Z[28]+Z[26]+Y[21]-Z[27]-Z[23])*Z[29];
	Z[12] = Z[5]*Z[13]+Z[12];
	Z[9] = Z[9]-Z[5]*Z[10];
	Z[2] = Z[12]*Z[3]-Z[2]*Z[9];
	Z[3] = -Z[2]*Z[20];
	Z[10] = Z[4]*Z[17]*Y[16]+Z[12]*Y[20]+Z[11]*Y[22];
	Z[13] = Z[9]*Y[20]+Z[14]*Y[22]-Z[7]*Z[17]*Y[16];
	Z[20] = Z[5]*Y[18]+Y[24];
	Z[31] = Z[12]*Z[25]-Z[9]*Z[24]-0.25*Z[17]*Z[8];
	Z[32] = Y[14]*Z[6];
	Z[33] = Z[32]-Z[8]*Z[17]*Y[18];
	Z[24] = Y[45]*Z[5]-Z[17]*(Z[4]*Z[25]+Z[7]*Z[24])-0.25*Z[5];
	Z[25] = Y[16]*Z[5]+Z[17]*(Z[6]*Y[22]-Z[8]*Y[20])-Y[46];
	Z[34] = Y[45]*Z[8];
	Z[11] = Z[11]*Z[10]+Z[13]*Z[14]+Z[17]*(Z[6]*Z[25]+Z[20]*Z[34])+Z[20]*Z[31]+Z[24]*Z[33];
	Z[14] = -Z[30]*Z[19]*Z[29];
	Z[19] = Z[30]*Z[15];
	Z[29] = -Z[19]*Z[21];
	Z[19] = -Z[19]*Z[3];
	Z[35] = ( (500.*Z[11]-107919.+304000.*Z[30]<0.) ? -500.*Z[11]+107920.-304000.*Z[30] : 1. );
	Z[36] = 0.7610845*sin(2.*atan(0.00008547658753529114608*Z[35]))*(1.+0.90729*fabs(Z[16]));
	Z[26] = Z[28]+Z[26]-Z[27];
	Z[27] = Y[14]*Z[8];
	Z[28] = Z[22]*Y[18]+Z[27];
	Z[4] = Z[17]*(Z[7]*Z[13]-Z[4]*Z[10]);
	Z[7] = (Z[17]*Z[34]+Z[31])*Z[28];
	Z[23] = (Z[23]-Z[26])*Z[33];
	Z[31] = Z[5]*Z[25];
	Z[6] = Z[17]*(Z[6]*Z[20]*Y[45]-Z[8]*Z[25]);
	Z[24] = Z[24]*Z[28];
	Z[20] = Z[20]*Z[26];
	Z[10] = Z[10]*Z[12];
	Z[9] = Z[9]*Z[13];
	Z[12] = -(Z[3]*(Z[4]+Z[7]+Z[23]-Z[31])+Z[21]*(Z[10]+Z[9]+Z[6]-Z[20]-Z[24]));
	Z[13] = Z[0]*Z[0];
	Z[25] = 1.+7.7841*Z[13]*Z[1]*Z[1];
	Z[25] = 1.0/Z[25];
	Z[0] = Y[314]*(1.+Z[13])*Z[1]*(2.79-2.1204*Z[0]*Z[1])*Z[25]+Y[18];
	Z[1] = Z[0]*Z[22]+Z[27]-Z[15]*Y[54];
	Z[0] = Z[3]*(Z[1]*Z[29]+Z[6]+Z[9]+Z[10]-Z[14]*(Z[0]*Z[5]+Y[24]-Z[18]*Y[54])-Z[20]-Z[24])-Z[21]*(Z[14]*(Z[0]*Z[8]*Z[17]+Z[2]*Y[54]-Z[32])+Z[19]*Z[1]+Z[4]+Z[7]+Z[23]-Z[31]);
	Z[1] = ( (Z[36]>0.1) ? Z[36] : 0.1 );
	Z[1] = 1.0/Z[1];
	YP[62] = 1.*Z[1]*(Z[0]-Y[62]*fabs(Z[12]));
	Z[0] = Z[359];
	Z[1] = Z[0];
	Z[2] = Z[360];
	Z[3] = Z[2];
	Z[4] = Z[357];
	Z[5] = Z[362];
	Z[6] = Z[358];
	Z[7] = Z[361];
	Z[8] = Z[2]*Z[5];
	Z[9] = Z[7]*Z[6];
	Z[10] = Z[4]*Z[8]+Z[9];
	Z[11] = asin(Z[10]);
	Z[12] = 1.-Z[10]*Z[10];
	Z[13] = (1.0/(sqrt(Z[12])));
	Z[14] = Z[2]*Z[7];
	Z[15] = Z[6]*Z[5];
	Z[16] = Z[15]-Z[4]*Z[14];
	Z[17] = Z[16]/sqrt(Z[12]);
	Z[14] = Z[14]-Z[4]*Z[15];
	Z[15] = Z[0]*Z[5];
	Z[18] = Z[15]*Y[49];
	Z[19] = 0.8389;
	Z[20] = -1.4755;
	Z[21] = Z[20]*Z[14];
	Z[22] = Z[10]*Z[19];
	Z[23] = 0.25*Z[15];
	Z[12] = fabs(Z[12])+1e-20;
	Z[24] = (1.0/(sqrt(Z[12])));
	Z[25] = (Z[23]+Z[21]+Y[21]-Z[22]-Z[18])*Z[24];
	Z[8] = Z[4]*Z[9]+Z[8];
	Z[9] = Z[0]*Z[6]*Y[16]+Z[8]*Y[20]+Z[14]*Y[22];
	Z[26] = Z[0]*Z[2];
	Z[27] = Z[16]*Y[20]+Z[10]*Y[22]-Z[26]*Y[16];
	Z[28] = Y[18]*Z[4];
	Z[29] = Z[28]+Y[24];
	Z[30] = Z[8]*Z[20]-Z[16]*Z[19]-0.25*Z[0]*Z[7];
	Z[31] = Y[14]*Z[5];
	Z[32] = Y[18]*Z[0]*Z[7];
	Z[33] = Z[31]-Z[32];
	Z[19] = Y[49]*Z[4]-Z[0]*(Z[2]*Z[19]+Z[6]*Z[20])-0.25*Z[4];
	Z[20] = Y[16]*Z[4]+Z[0]*(Z[5]*Y[22]-Z[7]*Y[20])-Y[50];
	Z[34] = Y[49]*Z[7];
	Z[14] = Z[0]*(Z[5]*Z[20]+Z[29]*Z[34])+Z[9]*Z[14]+Z[10]*Z[27]+Z[19]*Z[33]+Z[29]*Z[30];
	Z[12] = -Z[25]*Z[12]*Z[24];
	Z[24] = Z[10]*Z[25];
	Z[35] = -Z[24]*Z[3]*Z[1]*Z[13];
	Z[24] = Z[17]*Z[24];
	Z[36] = ( (500.*Z[14]-107919.+304000.*Z[25]<0.) ? -500.*Z[14]+107920.-304000.*Z[25] : 1. );
	Z[37] = 0.7610845*sin(2.*atan(0.00008547658753529114608*Z[36]))*(1.+0.90729*fabs(Z[11]));
	Z[21] = Z[23]+Z[21]-Z[22];
	Z[22] = Y[14]*Z[7];
	Z[15] = Z[15]*Y[18];
	Z[23] = Z[15]+Z[22];
	Z[2] = Z[0]*(Z[6]*Z[9]-Z[2]*Z[27]);
	Z[6] = (-(Z[0]*Z[34]+Z[30]))*Z[23];
	Z[18] = (Z[21]-Z[18])*Z[33];
	Z[4] = Z[4]*Z[20];
	Z[0] = (Z[5]*Z[29]*Y[49]-Z[7]*Z[20])*Z[0];
	Z[5] = Z[19]*Z[23];
	Z[7] = Z[8]*Z[9];
	Z[8] = Z[16]*Z[27];
	Z[9] = Z[29]*Z[21];
	Z[19] = Z[17]*(Z[2]+Z[6]+Z[18]+Z[4])+(Z[0]+Z[7]+Z[8]-Z[9]-Z[5])*Z[3]*Z[1]*Z[13];
	Z[10] = Z[10]*Y[58]+Z[15]+Z[22];
	Z[0] = Z[17]*(Z[10]*Z[35]+Z[0]+Z[7]+Z[8]-Z[12]*(Y[24]+Z[28]-Z[26]*Y[58])-Z[5]-Z[9])-(Z[12]*(Z[16]*Y[58]+Z[31]-Z[32])+Z[2]+Z[4]+Z[6]+Z[18]-Z[24]*Z[10])*Z[3]*Z[1]*Z[13];
	Z[2] = ( (Z[37]>0.1) ? Z[37] : 0.1 );
	Z[2] = 1.0/Z[2];
	YP[63] = Z[2]*(Z[0]-Y[63]*fabs(Z[19]));
	if( Y[394]==1. )
		Y[115] = 100.;
	else
		Y[115] = Y[316];
	if( Y[395]==1. )
		Y[172] = 0.;
	else
		Y[172] = Y[115];
	Y[274] = YP[14];
	Y[275] = YP[16];
	Y[276] = YP[18];
	Y[277] = YP[20];
	Y[278] = YP[22];
	Y[279] = YP[24];
}

static void otp(double T, double *Y, double *YP)
{
	double Z[50];

	UNUSED(T);
	UNUSED(YP);
	Z[0] = cos(Y[17]);
	Z[1] = cos(Y[13]);
	Z[2] = sin(Y[17]);
	Z[3] = sin(Y[13]);
	Z[4] = sin(Y[23]);
	Z[5] = cos(Y[23]);
	Z[6] = Y[18]*Z[3];
	Z[7] = Z[6]+Y[24];
	Z[8] = Z[3]*Y[24]+Y[18];
	Z[9] = Y[14]*Z[4];
	Z[10] = Z[2]*Z[4];
	Z[11] = Z[0]*Z[4];
	Z[12] = Z[5]*Z[2];
	Z[13] = Z[3]*Z[11]+Z[12];
	Z[14] = Y[14]*Z[0];
	Z[15] = Z[0]*Z[5];
	Z[16] = Z[10]-Z[3]*Z[15];
	Z[17] = Y[16]*Y[18];
	Z[18] = Z[3]*Y[16];
	Z[14] = (Z[0]*(-(Z[1]*Z[9]+Z[5]*Z[8]))+Z[10]*Z[7])*Y[20]+Z[1]*(Z[2]*Z[17]-Z[0]*Y[275])+Z[18]*Z[14]-(Z[5]*(Z[2]*Z[7]-Z[1]*Z[14])+Z[8]*Z[11])*Y[22]-Z[13]*Y[277]-Z[16]*Y[278];
	Z[19] = Y[14]*Z[1];
	Z[10] = Z[15]-Z[3]*Z[10];
	Z[11] = Z[12]*Z[3]+Z[11];
	Z[8] = (Z[4]*(Z[0]*Z[7]+Z[2]*Z[19])+Z[12]*Z[8])*Y[20]+Z[2]*(Z[1]*Y[275]-Z[18]*Y[14])+Z[17]*Z[0]*Z[1]-(Z[2]*(Z[5]*Z[19]-Z[4]*Z[8])+Z[15]*Z[7])*Y[22]-Z[10]*Y[277]-Z[11]*Y[278];
	Z[12] = Z[4]*Y[20]-Z[5]*Y[22];
	Z[15] = Z[1]*(Y[14]*Y[16]+Z[4]*(-(Y[22]*Y[24]+Y[277]))+Z[5]*(Y[278]-Y[20]*Y[24]))+Z[3]*(Y[14]*Z[12]+Y[275]);
	Z[17] = Z[0]*Z[1];
	Z[20] = Z[17]*Y[16]+Z[13]*Y[20]+Z[16]*Y[22];
	Z[21] = Z[1]*Z[2];
	Z[22] = Z[10]*Y[20]+Z[11]*Y[22]-Z[21]*Y[16];
	Z[12] = Z[18]-Z[1]*Z[12];
	Z[18] = Y[14]*Z[12]-(Z[0]*Z[22]+Z[2]*Z[20])*Y[18];
	Z[23] = Z[0]*Z[20]-Z[2]*Z[22];
	Z[6] = Y[14]*(Z[6]-Y[24])-Y[276]*Z[1];
	Z[24] = Y[274]-Z[1]*Y[18]*Y[24];
	Z[25] = Z[4]*Z[6]+Z[5]*Z[24];
	Z[26] = -1.4755*Z[16];
	Z[27] = 0.194502*Z[1];
	Z[28] = Z[26]-Z[5]*Z[27];
	Z[6] = Z[4]*Z[24]-Z[5]*Z[6];
	Z[24] = -1.4755*Z[13];
	Z[27] = Z[4]*Z[27]+Z[24];
	Z[29] = Y[18]*Z[1];
	Z[30] = Z[5]*Y[14]-Z[4]*Z[29];
	Z[31] = -1.4755*Z[17]-0.194502*Z[3];
	Z[32] = Z[7]*Z[27];
	Z[33] = Z[30]*Z[31];
	Z[34] = Z[32]-Z[33];
	Z[9] = Z[5]*Z[29]+Z[9];
	Z[29] = Z[7]*Z[28];
	Z[35] = Z[9]*Z[31];
	Z[36] = Z[29]-Z[35];
	Z[37] = (Z[2]*Z[8]+Z[18]-Z[0]*Z[14])*Z[1];
	Z[38] = (Z[15]-Z[23]*Y[14])*Z[3];
	Z[39] = Z[9]*Z[36]+Z[25]*Z[28]+Z[30]*Z[34]+Z[37]+Z[38]-Z[6]*Z[27];
	Z[40] = Z[22]*Y[24]-Z[19]*Z[20];
	Z[41] = Z[2]*(Z[20]*Y[24]+Z[19]*Z[22]);
	Z[42] = Y[18]*Z[23]+(Z[3]*Z[23]-Z[1]*Z[12])*Y[24];
	Z[19] = Z[19]*Y[18]+Z[3]*Y[276]+Y[279];
	Z[43] = Z[30]*Z[28];
	Z[44] = Z[9]*Z[27];
	Z[45] = Z[43]-Z[44];
	Z[15] = Z[1]*Z[15];
	Z[46] = Z[13]*Z[14];
	Z[47] = Z[8]*Z[10];
	Z[48] = Z[5]*Z[42];
	Z[49] = (Z[0]*Z[40]+Z[15]+Z[41]-Z[3]*Z[18])*Z[4];
	Z[28] = Z[7]*Z[34]+Z[19]*Z[28]+Z[46]+Z[47]+Z[49]-Z[6]*Z[31]-Z[9]*Z[45]-Z[48];
	Z[14] = Z[16]*Z[14];
	Z[8] = Z[8]*Z[11];
	Z[34] = Z[42]*Z[4];
	Z[15] = (Z[0]*Z[40]+Z[15]+Z[41]-Z[3]*Z[18])*Z[5];
	Z[18] = Z[7]*Z[36]+Z[25]*Z[31]+Z[30]*Z[45]+Z[8]+Z[14]-Z[19]*Z[27]-Z[15]-Z[34];
	Y[280] = Z[17]*Z[39]-Z[13]*Z[28]-Z[16]*Z[18];
	Y[281] = -(Z[10]*Z[28]+Z[11]*Z[18]+Z[21]*Z[39]);
	Y[282] = Z[1]*(Z[4]*Z[28]-Z[5]*Z[18])+Z[3]*Z[39];
	Y[283] = Z[7];
	Y[284] = Z[30];
	Y[285] = Z[9];
	Z[18] = -0.6394;
	Z[27] = 0.0079;
	Z[28] = 1.872*Z[1];
	Z[31] = Z[11]*Z[27]+Z[16]*Z[18]-Z[5]*Z[28];
	Z[28] = Z[4]*Z[28]+Z[10]*Z[27]+Z[13]*Z[18];
	Z[18] = Z[1]*(Z[0]*Z[18]-Z[2]*Z[27])-1.872*Z[3];
	Z[27] = Z[7]*Z[28]-Z[18]*Z[30];
	Z[36] = Z[7]*Z[31]-Z[9]*Z[18];
	Z[37] = Z[9]*Z[36]+Z[25]*Z[31]+Z[27]*Z[30]+Z[37]+Z[38]-Z[6]*Z[28];
	Z[38] = Z[30]*Z[31]-Z[9]*Z[28];
	Z[6] = Z[7]*Z[27]+Z[19]*Z[31]+Z[46]+Z[47]+Z[49]-Z[6]*Z[18]-Z[9]*Z[38]-Z[48];
	Z[8] = Z[7]*Z[36]+Z[18]*Z[25]+Z[30]*Z[38]+Z[8]+Z[14]-Z[19]*Z[28]-Z[15]-Z[34];
	Y[286] = Z[17]*Z[37]-Z[6]*Z[13]-Z[8]*Z[16];
	Y[287] = -(Z[6]*Z[10]+Z[8]*Z[11]+Z[21]*Z[37]);
	Y[288] = Z[1]*(Z[4]*Z[6]-Z[5]*Z[8])+Z[3]*Z[37];
	Y[289] = Z[7];
	Y[290] = Z[30];
	Y[291] = Z[9];
	Y[292] = Z[22];
	Y[293] = Z[12];
	Z[6] = tan(Y[318]);
	Z[7] = 0.76*Z[6];
	Z[8] = -Z[7]+2.79;
	Z[8] = 1.0/Z[8];
	Z[6] = 2.79*Z[6];
	Z[8] = atan(Z[6]*Z[8]);
	Z[9] = cos(Z[8]);
	Z[8] = sin(Z[8]);
	Z[14] = 0.7396;
	Z[15] = 1.3745*Z[0];
	Z[18] = 0.25*Z[3];
	Z[19] = Z[1]*(Z[15]-Z[2]*Z[14])+Y[15]+Z[18]-Y[43]*Z[3];
	Z[25] = Z[1]*Z[4];
	Z[27] = 1.3745*Z[13];
	Z[28] = 0.25*Z[25];
	Z[30] = Z[25]*Y[43]+Z[10]*Z[14]+Y[19]+Z[27]-Z[28];
	Z[31] = Z[1]*Z[5];
	Z[34] = 1.3745*Z[16];
	Z[36] = 0.25*Z[31];
	Z[14] = Z[11]*Z[14]+Y[21]+Z[34]+Z[36]-Z[31]*Y[43];
	Y[294] = Z[1]*(Z[0]*Z[9]-Z[2]*Z[8])*Z[19]+(Z[8]*Z[10]+Z[9]*Z[13])*Z[30]+(Z[8]*Z[11]+Z[9]*Z[16])*Z[14];
	Y[295] = -(Z[14]*(Z[8]*Z[16]-Z[9]*Z[11])+Z[19]*Z[1]*(Z[0]*Z[8]+Z[2]*Z[9])+Z[30]*(Z[8]*Z[13]-Z[9]*Z[10]));
	Y[296] = Z[1]*(Z[5]*Z[14]-Z[4]*Z[30])+Z[19]*Z[3];
	Z[7] = Z[7]+2.79;
	Z[7] = 1.0/Z[7];
	Z[6] = atan(Z[7]*Z[6]);
	Z[7] = cos(Z[6]);
	Z[6] = sin(Z[6]);
	Z[8] = 0.8424;
	Z[9] = Z[1]*(Z[2]*Z[8]+Z[15])+Y[15]+Z[18]-Y[45]*Z[3];
	Z[14] = Z[25]*Y[45]+Y[19]+Z[27]-Z[8]*Z[10]-Z[28];
	Z[8] = Y[21]+Z[34]+Z[36]-Z[31]*Y[45]-Z[8]*Z[11];
	Y[297] = Z[1]*(Z[0]*Z[7]-Z[2]*Z[6])*Z[9]+(Z[6]*Z[10]+Z[7]*Z[13])*Z[14]+(Z[6]*Z[11]+Z[7]*Z[16])*Z[8];
	Y[298] = -(Z[8]*(Z[6]*Z[16]-Z[7]*Z[11])+Z[9]*Z[1]*(Z[0]*Z[6]+Z[2]*Z[7])+Z[14]*(Z[6]*Z[13]-Z[10]*Z[7]));
	Y[299] = Z[1]*(Z[5]*Z[8]-Z[4]*Z[14])+Z[3]*Z[9];
	Z[6] = Z[23]*Z[1];
	Z[7] = Z[12]*Z[3];
	Y[300] = Z[7]+Z[6];
	Z[8] = Z[13]*Z[20];
	Z[9] = Z[10]*Z[22];
	Z[14] = Z[12]*Z[25];
	Y[301] = Z[9]+Z[8]-Z[14];
	Z[15] = Z[16]*Z[20];
	Z[19] = Z[11]*Z[22];
	Z[12] = Z[31]*Z[12];
	Y[302] = Z[12]+Z[15]+Z[19];
	Z[20] = 0.7361;
	Z[0] = -1.4755*Z[0];
	Y[303] = Z[1]*(Z[0]-Z[2]*Z[20])+Y[15]+Z[18]-Y[47]*Z[3];
	Y[304] = Z[25]*Y[47]+Z[10]*Z[20]+Y[19]+Z[24]-Z[28];
	Y[305] = Z[11]*Z[20]+Y[21]+Z[26]+Z[36]-Z[31]*Y[47];
	Z[20] = 0.8389;
	Y[306] = Z[1]*(Z[2]*Z[20]+Z[0])+Y[15]+Z[18]-Y[49]*Z[3];
	Y[307] = Z[25]*Y[49]+Y[19]+Z[24]-Z[10]*Z[20]-Z[28];
	Y[308] = Y[21]+Z[26]+Z[36]-Z[31]*Y[49]-Z[11]*Z[20];
	Z[0] = Z[43]+Z[7]+Z[6]-Z[44];
	Z[2] = Z[14]+Z[29]-Z[9]-Z[8]-Z[35];
	Z[6] = Z[12]+Z[15]+Z[19]+Z[32]-Z[33];
	Y[309] = Z[0]*Z[17]+Z[6]*Z[16]-Z[2]*Z[13];
	Y[310] = Z[6]*Z[11]-Z[0]*Z[21]-Z[2]*Z[10];
	Y[311] = Z[0]*Z[3]+Z[1]*(Z[2]*Z[4]+Z[5]*Z[6]);
	Z[0] = Y[456]+1.;
	Z[0] = 1.0/Z[0];
	Z[1] = 9.54929658551372013;
	Y[312] = Z[1]*(Y[6]+(Y[7]*Y[449])/Y[456])*Z[0]*Y[456];
	Y[313] = Z[1]*Y[448]*Y[7];
}

static void Rp(double T, double *Y, double *R)
{
	double Z[1];

	UNUSED(T);
	R[0] = Y[5]-Y[59];
	Z[0] = -0.5;
	R[1] = Z[0]*(Y[54]+Y[52])+Y[7]+Y[59];
}

static void Jp(double T, double *Y, double *J)
{
	int ti1, ti2;

	UNUSED(T);
	UNUSED(Y);
	for(ti1=0;ti1<=1;ti1++)
		for(ti2=0;ti2<=63;ti2++)
			J[ti1*64+ti2] = 0.;
	J[5] = 1.;
	J[59] = -1.;
	J[71] = 1.;
	J[116] = -0.5;
	J[118] = -0.5;
	J[123] = 1.;
}

static void eev(double T, double *Y, double *Ypre, double *EA)
{
	double Z[5];

	UNUSED(Ypre);
	EA[0] = -Y[4];
	EA[1] = Y[317]-0.6;
	EA[2] = -Y[317]+0.1385;
	EA[3] = -Y[11];
	EA[4] = -Y[12];
	EA[5] = Y[83]-0.14;
	EA[6] = Y[91]-Y[92];
	EA[7] = Y[93]-Y[94];
	EA[8] = -Y[87]+0.5;
	EA[9] = Y[468]-Y[343];
	EA[10] = -Y[88]+0.5;
	EA[11] = Y[343]-Y[469];
	EA[12] = -Y[89]+0.5;
	EA[13] = -Y[90]+0.5;
	EA[14] = -Y[86];
	EA[15] = -1.+0.6666666666666666667*Y[345];
	EA[16] = Y[84]-Y[85];
	EA[17] = -1.+0.6666666666666666667*Y[82];
	EA[18] = Y[70]-0.5;
	EA[19] = -Y[75]+0.5;
	EA[20] = -Y[76]+0.5;
	EA[21] = Y[459]-Y[81];
	EA[22] = Y[471]-Y[342];
	EA[23] = -Y[80]+0.5;
	EA[24] = Y[79]+1.-Y[464];
	EA[25] = Y[459]-Y[78];
	EA[26] = -Y[77]+0.5;
	EA[27] = Y[71]-Y[72];
	EA[28] = -Y[74];
	EA[29] = -Y[73];
	EA[30] = Y[66]+1.;
	EA[31] = -1.+0.01*Y[316];
	EA[32] = -Y[316];
	EA[33] = Y[0]-0.5;
	EA[34] = Y[1]-0.5;
	EA[35] = Y[2]-0.5;
	EA[36] = Y[3]-0.5;
	EA[37] = Y[67]*Y[7];
	Z[0] = Y[456]+1.;
	Z[0] = 1.0/Z[0];
	Z[0] = (Y[7]*Y[449]-Y[6])*Z[0];
	EA[38] = -Z[0]*Y[69];
	Z[1] = Y[448]*Y[7];
	EA[39] = -Z[1]*Y[64];
	EA[40] = Z[0]*Y[68]*Y[456];
	EA[41] = -Z[0];
	EA[42] = -Z[1];
	EA[43] = Z[0]*Y[456];
	EA[44] = Y[52];
	EA[45] = Y[54];
	EA[46] = Y[56];
	EA[47] = Y[58];
	EA[48] = Y[5];
	EA[49] = Y[7];
	EA[50] = Y[68];
	EA[51] = Y[69];
	EA[52] = Y[64];
	EA[53] = Y[67];
	Z[0] = 1e-10*Y[52];
	EA[54] = Z[0]-1.;
	Z[1] = 1e-10*Y[54];
	EA[55] = Z[1]-1.;
	Z[2] = 1e-10*Y[56];
	EA[56] = Z[2]-1.;
	Z[3] = 1e-10*Y[58];
	EA[57] = Z[3]-1.;
	Z[4] = 1e-10*Y[5];
	EA[58] = Z[4]-1.;
	EA[59] = -(1.+Z[0]);
	EA[60] = -(1.+Z[1]);
	EA[61] = -(1.+Z[2]);
	EA[62] = -(1.+Z[3]);
	EA[63] = -(Y[11]+Y[95]);
	EA[64] = -(Y[11]+Y[96]);
	EA[65] = -(Y[12]+Y[97]);
	EA[66] = -(Y[12]+Y[98]);
	EA[67] = Y[95]-Y[11];
	EA[68] = Y[96]-Y[11];
	EA[69] = Y[97]-Y[12];
	EA[70] = Y[98]-Y[12];
	EA[71] = -(Y[4]+Y[65]);
	EA[72] = Y[65]-Y[4];
	EA[73] = -(1.+Z[4]);
	EA[74] = -Y[99];
	EA[75] = -Y[100];
	EA[76] = -Y[101];
	EA[77] = -Y[102];
	EA[78] = T-Y[443];
	EA[79] = T-Y[444];
}

static int eex(int N, double T, double *Y, double *Ypre)
{
	if( N<17 ) {
		if( N==1 )
			Y[363] = 1.-Y[363];
		else if( N==2 )
			Y[364] = 1.-Y[364];
		else if( N==3 )
			Y[365] = 1.-Y[365];
		else if( N==4 )
			Y[366] = 1.-Y[366];
		else if( N==5 )
			Y[367] = 1.-Y[367];
		else if( N==6 )
			Y[368] = 1.-Y[368];
		else if( N==7 )
			Y[369] = 1.-Y[369];
		else if( N==8 )
			Y[370] = 1.-Y[370];
		else if( N==9 )
			Y[371] = 1.-Y[371];
		else if( N==10 )
			Y[372] = 1.-Y[372];
		else if( N==11 )
			Y[373] = 1.-Y[373];
		else if( N==12 )
			Y[374] = 1.-Y[374];
		else if( N==13 )
			Y[375] = 1.-Y[375];
		else if( N==14 )
			Y[376] = 1.-Y[376];
		else if( N==15 )
			Y[377] = 1.-Y[377];
		else if( N==16 )
			Y[378] = 1.-Y[378];
	}
	else if( N<33 ) {
		if( N==17 )
			Y[379] = 1.-Y[379];
		else if( N==18 )
			Y[380] = 1.-Y[380];
		else if( N==19 )
			Y[381] = 1.-Y[381];
		else if( N==20 )
			Y[382] = 1.-Y[382];
		else if( N==21 )
			Y[383] = 1.-Y[383];
		else if( N==22 )
			Y[384] = 1.-Y[384];
		else if( N==23 )
			Y[385] = 1.-Y[385];
		else if( N==24 )
			Y[386] = 1.-Y[386];
		else if( N==25 )
			Y[387] = 1.-Y[387];
		else if( N==26 )
			Y[388] = 1.-Y[388];
		else if( N==27 )
			Y[389] = 1.-Y[389];
		else if( N==28 )
			Y[390] = 1.-Y[390];
		else if( N==29 )
			Y[391] = 1.-Y[391];
		else if( N==30 )
			Y[392] = 1.-Y[392];
		else if( N==31 )
			Y[393] = 1.-Y[393];
		else if( N==32 )
			Y[394] = 1.-Y[394];
	}
	else if( N<49 ) {
		if( N==33 )
			Y[395] = 1.-Y[395];
		else if( N==34 )
			Y[396] = 1.-Y[396];
		else if( N==35 )
			Y[397] = 1.-Y[397];
		else if( N==36 )
			Y[398] = 1.-Y[398];
		else if( N==37 )
			Y[399] = 1.-Y[399];
		else if( N==38 )
			Y[400] = 1.-Y[400];
		else if( N==39 )
			Y[401] = 1.-Y[401];
		else if( N==40 )
			Y[402] = 1.-Y[402];
		else if( N==41 )
			Y[403] = 1.-Y[403];
		else if( N==42 )
			Y[404] = 1.-Y[404];
		else if( N==43 )
			Y[405] = 1.-Y[405];
		else if( N==44 )
			Y[406] = 1.-Y[406];
		else if( N==45 )
			Y[407] = 1.-Y[407];
		else if( N==46 )
			Y[408] = 1.-Y[408];
		else if( N==47 )
			Y[409] = 1.-Y[409];
		else if( N==48 )
			Y[410] = 1.-Y[410];
	}
	else if( N<65 ) {
		if( N==49 )
			Y[411] = 1.-Y[411];
		else if( N==50 )
			Y[412] = 1.-Y[412];
		else if( N==51 )
			Y[413] = 1.-Y[413];
		else if( N==52 )
			Y[414] = 1.-Y[414];
		else if( N==53 )
			Y[415] = 1.-Y[415];
		else if( N==54 )
			Y[416] = 1.-Y[416];
		else if( N==55 )
			Y[417] = 1.-Y[417];
		else if( N==56 )
			Y[418] = 1.-Y[418];
		else if( N==57 )
			Y[419] = 1.-Y[419];
		else if( N==58 )
			Y[420] = 1.-Y[420];
		else if( N==59 )
			Y[421] = 1.-Y[421];
		else if( N==60 )
			Y[422] = 1.-Y[422];
		else if( N==61 )
			Y[423] = 1.-Y[423];
		else if( N==62 )
			Y[424] = 1.-Y[424];
		else if( N==63 )
			Y[425] = 1.-Y[425];
		else if( N==64 )
			Y[426] = 1.-Y[426];
	}
	else if( N<81 ) {
		if( N==65 )
			Y[427] = 1.-Y[427];
		else if( N==66 )
			Y[428] = 1.-Y[428];
		else if( N==67 )
			Y[429] = 1.-Y[429];
		else if( N==68 )
			Y[430] = 1.-Y[430];
		else if( N==69 )
			Y[431] = 1.-Y[431];
		else if( N==70 )
			Y[432] = 1.-Y[432];
		else if( N==71 )
			Y[433] = 1.-Y[433];
		else if( N==72 )
			Y[434] = 1.-Y[434];
		else if( N==73 )
			Y[435] = 1.-Y[435];
		else if( N==74 )
			Y[436] = 1.-Y[436];
		else if( N==75 )
			Y[437] = 1.-Y[437];
		else if( N==76 )
			Y[438] = 1.-Y[438];
		else if( N==77 )
			Y[439] = 1.-Y[439];
		else if( N==78 )
			Y[440] = 1.-Y[440];
		else if( N==79 ) {
			Y[441] = 1.;
			Y[443] = Y[443]+0.05;
		}
		else if( N==80 ) {
			Y[442] = 1.;
			Y[444] = Y[444]+Y[467];
		}
	}
	else if( N==81 ) {
		if( Y[361]==1. ) {
			Y[443] = 0.05*( (((int)trunc(ceil(20.*T)))<0) ? 0. : ceil(20.*T) )+1e-20;
			Y[444] = Y[467]*( (((int)trunc(ceil(T/Y[467])))<0) ? 0. : ceil(T/Y[467]) )+1e-20;
		}
		if( !(fabs(Y[448])>0.) ) {
			Y[362] = 1.;
			return(1);
		}
		if( !(fabs(Y[449])>0.) ) {
			Y[362] = 2.;
			return(1);
		}
		if( !(1.0/Y[456]>1.) ) {
			Y[362] = 3.;
			return(1);
		}
		if( (Y[442]==1.) && (Y[442]!=Ypre[442]) )
			Y[340] = Y[172];
		if( (Y[442]==1.) && (Y[442]!=Ypre[442]) )
			Y[341] = 3.6*Y[181];
		if( (Y[442]==1.) && (Y[442]!=Ypre[442]) )
			Y[342] = (30.*Y[448]*Y[7])/3.14159265358979324;
		if( (Y[442]==1.) && (Y[442]!=Ypre[442]) )
			Y[343] = (-30.*(Y[6]+(Y[7]*Y[449])/Y[456])*Y[456])/(3.14159265358979324*(-(Y[456]+1.)));
		if( (Y[442]==1.) && (Y[442]!=Ypre[442]) ) {
			if( T<=0.5*Y[467] )
				Y[346] = 1.;
			else
				Y[346] = 0.;
		}
		if( (Y[442]==1.) && (Y[442]!=Ypre[442]) ) {
			if( T<=0.5*Y[467] )
				Y[347] = 1.;
			else
				Y[347] = 0.;
		}
		if( (Y[442]==1.) && (Y[442]!=Ypre[442]) ) {
			if( T<=0.5*Y[467] )
				Y[348] = 1.;
			else
				Y[348] = 0.;
		}
		if( (Y[442]==1.) && (Y[442]!=Ypre[442]) ) {
			if( T<=0.5*Y[467] )
				Y[349] = 1.;
			else
				Y[349] = 0.;
		}
		if( (Y[441]==1.) && (Y[441]!=Ypre[441]) )
			Y[344] = Ypre[86];
		if( (Y[441]==1.) && (Y[441]!=Ypre[441]) )
			Y[345] = Ypre[82];
		if( (Y[441]==1.) && (Y[441]!=Ypre[441]) ) {
			if( T<=0.025 )
				Y[350] = 1.;
			else
				Y[350] = 0.;
		}
		if( (Y[441]==1.) && (Y[441]!=Ypre[441]) ) {
			if( T<=0.025 )
				Y[351] = 1.;
			else
				Y[351] = 0.;
		}
		if( (Y[371]==1.) && (Y[372]==1.) )
			Y[358] = 1.;
		else
			Y[358] = 0.;
		if( (Y[373]==1.) && (Y[374]==1.) )
			Y[359] = 1.;
		else
			Y[359] = 0.;
		if( (Y[375]==1.) && (Y[376]==1.) )
			Y[360] = 1.;
		else
			Y[360] = 0.;
		if( (Y[382]==1.) || (Y[383]==1.) )
			Y[352] = 1.;
		else
			Y[352] = 0.;
		if( (Y[384]==1.) && (Y[385]==1.) )
			Y[354] = 1.;
		else
			Y[354] = 0.;
		if( (Y[386]==1.) && (Y[387]==1.) )
			Y[357] = 1.;
		else
			Y[357] = 0.;
		if( (Y[388]==1.) && (Y[385]==1.) )
			Y[353] = 1.;
		else
			Y[353] = 0.;
		if( ( ( (Ypre[320]==0.) && ( (Y[426]==1.) || ( (Ypre[327]==1.) && (Y[426]==1.) ) ) ) || ( (Ypre[320]==1.) && (Y[424]==1.) ) ) || ( (Y[361]==1.) && (Y[56]<0.) ) )
			Y[327] = 1.;
		else
			Y[327] = 0.;
		if( ( ( (Ypre[320]==0.) && ( (Y[430]==1.) || ( (Ypre[328]==1.) && (Y[430]==1.) ) ) ) || ( (Ypre[320]==-1.) && (Y[419]==1.) ) ) || ( (Y[361]==1.) && (Y[56]>0.) ) )
			Y[328] = 1.;
		else
			Y[328] = 0.;
		if( ( ( (Ypre[322]==0.) && ( (Y[427]==1.) || ( (Ypre[329]==1.) && (Y[427]==1.) ) ) ) || ( (Ypre[322]==1.) && (Y[425]==1.) ) ) || ( (Y[361]==1.) && (Y[58]<0.) ) )
			Y[329] = 1.;
		else
			Y[329] = 0.;
		if( ( ( (Ypre[322]==0.) && ( (Y[431]==1.) || ( (Ypre[330]==1.) && (Y[431]==1.) ) ) ) || ( (Ypre[322]==-1.) && (Y[420]==1.) ) ) || ( (Y[361]==1.) && (Y[58]>0.) ) )
			Y[330] = 1.;
		else
			Y[330] = 0.;
		if( ( ( (Ypre[324]==0.) && ( (Y[428]==1.) || ( (Ypre[331]==1.) && (Y[428]==1.) ) ) ) || ( (Ypre[324]==1.) && (Y[422]==1.) ) ) || ( (Y[361]==1.) && (Y[52]<0.) ) )
			Y[331] = 1.;
		else
			Y[331] = 0.;
		if( ( ( (Ypre[324]==0.) && ( (Y[432]==1.) || ( (Ypre[332]==1.) && (Y[432]==1.) ) ) ) || ( (Ypre[324]==-1.) && (Y[417]==1.) ) ) || ( (Y[361]==1.) && (Y[52]>0.) ) )
			Y[332] = 1.;
		else
			Y[332] = 0.;
		if( ( ( (Ypre[326]==0.) && ( (Y[429]==1.) || ( (Ypre[333]==1.) && (Y[429]==1.) ) ) ) || ( (Ypre[326]==1.) && (Y[423]==1.) ) ) || ( (Y[361]==1.) && (Y[54]<0.) ) )
			Y[333] = 1.;
		else
			Y[333] = 0.;
		if( ( ( (Ypre[326]==0.) && ( (Y[433]==1.) || ( (Ypre[334]==1.) && (Y[433]==1.) ) ) ) || ( (Ypre[326]==-1.) && (Y[418]==1.) ) ) || ( (Y[361]==1.) && (Y[54]>0.) ) )
			Y[334] = 1.;
		else
			Y[334] = 0.;
		if( ( ( (Ypre[336]==0.) && ( (Y[434]==1.) || ( (Ypre[338]==1.) && (Y[434]==1.) ) ) ) || ( (Ypre[336]==1.) && (Y[436]==1.) ) ) || ( (Y[361]==1.) && (Y[5]<0.) ) )
			Y[338] = 1.;
		else
			Y[338] = 0.;
		if( ( ( (Ypre[336]==0.) && ( (Y[435]==1.) || ( (Ypre[339]==1.) && (Y[435]==1.) ) ) ) || ( (Ypre[336]==-1.) && (Y[421]==1.) ) ) || ( (Y[361]==1.) && (Y[5]>0.) ) )
			Y[339] = 1.;
		else
			Y[339] = 0.;
		if( (Y[368]==1.) && (Y[393]==1.) )
			Y[337] = 1.;
		else
			Y[337] = 0.;
		if( (Y[354]==1.) && (Y[386]==1.) )
			Y[356] = 1.;
		else
			Y[356] = 0.;
		if( (Y[353]==1.) && (Y[389]==1.) )
			Y[355] = 1.;
		else
			Y[355] = 0.;
		if( Y[366]==1. )
			Y[320] = 2.;
		else {
			if( ( ( (Ypre[320]==1.) || (Ypre[320]==2.) ) || (Y[328]==1.) ) && (Y[409]==1.) )
				Y[320] = 1.;
			else {
				if( ( ( (Ypre[320]==-1.) || (Ypre[320]==2.) ) || (Y[327]==1.) ) && (Y[409]==0.) )
					Y[320] = -1.;
				else
					Y[320] = 0.;
			}
		}
		if( Y[366]==1. )
			Y[322] = 2.;
		else {
			if( ( ( (Ypre[322]==1.) || (Ypre[322]==2.) ) || (Y[330]==1.) ) && (Y[410]==1.) )
				Y[322] = 1.;
			else {
				if( ( ( (Ypre[322]==-1.) || (Ypre[322]==2.) ) || (Y[329]==1.) ) && (Y[410]==0.) )
					Y[322] = -1.;
				else
					Y[322] = 0.;
			}
		}
		if( Y[367]==1. )
			Y[324] = 2.;
		else {
			if( ( ( (Ypre[324]==1.) || (Ypre[324]==2.) ) || (Y[332]==1.) ) && (Y[407]==1.) )
				Y[324] = 1.;
			else {
				if( ( ( (Ypre[324]==-1.) || (Ypre[324]==2.) ) || (Y[331]==1.) ) && (Y[407]==0.) )
					Y[324] = -1.;
				else
					Y[324] = 0.;
			}
		}
		if( Y[367]==1. )
			Y[326] = 2.;
		else {
			if( ( ( (Ypre[326]==1.) || (Ypre[326]==2.) ) || (Y[334]==1.) ) && (Y[408]==1.) )
				Y[326] = 1.;
			else {
				if( ( ( (Ypre[326]==-1.) || (Ypre[326]==2.) ) || (Y[333]==1.) ) && (Y[408]==0.) )
					Y[326] = -1.;
				else
					Y[326] = 0.;
			}
		}
		if( Y[363]==1. )
			Y[336] = 2.;
		else {
			if( ( ( (Ypre[336]==1.) || (Ypre[336]==2.) ) || (Y[339]==1.) ) && (Y[411]==1.) )
				Y[336] = 1.;
			else {
				if( ( ( (Ypre[336]==-1.) || (Ypre[336]==2.) ) || (Y[338]==1.) ) && (Y[411]==0.) )
					Y[336] = -1.;
				else
					Y[336] = 0.;
			}
		}
		if( ( !(Y[366]==1.) ) && ( ( !( ( ( ( (Ypre[320]==2.) || (Ypre[320]==1.) ) || (Y[328]==1.) ) || (Ypre[320]==-1.) ) || (Y[327]==1.) ) ) || ( ( ( ( (Y[320]==0.) && ( !(Y[328]==1.) ) ) && ( !(Y[327]==1.) ) ) && ( !(Ypre[328]==1.) ) ) && ( !(Ypre[327]==1.) ) ) ) )
			Y[319] = 1.;
		else
			Y[319] = 0.;
		if( ( !(Y[366]==1.) ) && ( ( !( ( ( ( (Ypre[322]==2.) || (Ypre[322]==1.) ) || (Y[330]==1.) ) || (Ypre[322]==-1.) ) || (Y[329]==1.) ) ) || ( ( ( ( (Y[322]==0.) && ( !(Y[330]==1.) ) ) && ( !(Y[329]==1.) ) ) && ( !(Ypre[330]==1.) ) ) && ( !(Ypre[329]==1.) ) ) ) )
			Y[321] = 1.;
		else
			Y[321] = 0.;
		if( ( !(Y[367]==1.) ) && ( ( !( ( ( ( (Ypre[324]==2.) || (Ypre[324]==1.) ) || (Y[332]==1.) ) || (Ypre[324]==-1.) ) || (Y[331]==1.) ) ) || ( ( ( ( (Y[324]==0.) && ( !(Y[332]==1.) ) ) && ( !(Y[331]==1.) ) ) && ( !(Ypre[332]==1.) ) ) && ( !(Ypre[331]==1.) ) ) ) )
			Y[323] = 1.;
		else
			Y[323] = 0.;
		if( ( !(Y[367]==1.) ) && ( ( !( ( ( ( (Ypre[326]==2.) || (Ypre[326]==1.) ) || (Y[334]==1.) ) || (Ypre[326]==-1.) ) || (Y[333]==1.) ) ) || ( ( ( ( (Y[326]==0.) && ( !(Y[334]==1.) ) ) && ( !(Y[333]==1.) ) ) && ( !(Ypre[334]==1.) ) ) && ( !(Ypre[333]==1.) ) ) ) )
			Y[325] = 1.;
		else
			Y[325] = 0.;
		if( ( !(Y[363]==1.) ) && ( ( !( ( ( ( (Ypre[336]==2.) || (Ypre[336]==1.) ) || (Y[339]==1.) ) || (Ypre[336]==-1.) ) || (Y[338]==1.) ) ) || ( ( ( ( (Y[336]==0.) && ( !(Y[339]==1.) ) ) && ( !(Y[338]==1.) ) ) && ( !(Ypre[339]==1.) ) ) && ( !(Ypre[338]==1.) ) ) ) )
			Y[335] = 1.;
		else
			Y[335] = 0.;
		if( Y[361]==1. )
			Y[361] = 0.;
		if( Y[441]==1. )
			Y[441] = 0.;
		if( Y[442]==1. )
			Y[442] = 0.;
	}
	return(0);
}

static int cpr(double T, double *Y)
{
	double v;
	int k;

	UNUSED(T);
	k = 0;
	if( Y[4]<=0. )
		v = 1.;
	else
		v = 0.;
	if( Y[363]!=v ) {
		Y[363] = v;
		k = 1;
	}
	if( Y[317]>0.6 )
		v = 1.;
	else
		v = 0.;
	if( Y[364]!=v ) {
		Y[364] = v;
		k = 1;
	}
	if( Y[317]<0.1385 )
		v = 1.;
	else
		v = 0.;
	if( Y[365]!=v ) {
		Y[365] = v;
		k = 1;
	}
	if( Y[11]<=0. )
		v = 1.;
	else
		v = 0.;
	if( Y[366]!=v ) {
		Y[366] = v;
		k = 1;
	}
	if( Y[12]<=0. )
		v = 1.;
	else
		v = 0.;
	if( Y[367]!=v ) {
		Y[367] = v;
		k = 1;
	}
	if( Y[83]>0.14 )
		v = 1.;
	else
		v = 0.;
	if( Y[368]!=v ) {
		Y[368] = v;
		k = 1;
	}
	if( Y[92]<=Y[91] )
		v = 1.;
	else
		v = 0.;
	if( Y[369]!=v ) {
		Y[369] = v;
		k = 1;
	}
	if( Y[94]<=Y[93] )
		v = 1.;
	else
		v = 0.;
	if( Y[370]!=v ) {
		Y[370] = v;
		k = 1;
	}
	if( Y[87]<0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[371]!=v ) {
		Y[371] = v;
		k = 1;
	}
	if( Y[343]<Y[468] )
		v = 1.;
	else
		v = 0.;
	if( Y[372]!=v ) {
		Y[372] = v;
		k = 1;
	}
	if( Y[88]<0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[373]!=v ) {
		Y[373] = v;
		k = 1;
	}
	if( Y[469]<Y[343] )
		v = 1.;
	else
		v = 0.;
	if( Y[374]!=v ) {
		Y[374] = v;
		k = 1;
	}
	if( Y[89]<0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[375]!=v ) {
		Y[375] = v;
		k = 1;
	}
	if( Y[90]<0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[376]!=v ) {
		Y[376] = v;
		k = 1;
	}
	if( Y[86]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[377]!=v ) {
		Y[377] = v;
		k = 1;
	}
	if( Y[345]>1.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[378]!=v ) {
		Y[378] = v;
		k = 1;
	}
	if( Y[85]<=Y[84] )
		v = 1.;
	else
		v = 0.;
	if( Y[379]!=v ) {
		Y[379] = v;
		k = 1;
	}
	if( Y[82]>1.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[380]!=v ) {
		Y[380] = v;
		k = 1;
	}
	if( Y[70]>=0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[381]!=v ) {
		Y[381] = v;
		k = 1;
	}
	if( Y[75]<0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[382]!=v ) {
		Y[382] = v;
		k = 1;
	}
	if( Y[76]<0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[383]!=v ) {
		Y[383] = v;
		k = 1;
	}
	if( Y[81]<Y[459] )
		v = 1.;
	else
		v = 0.;
	if( Y[384]!=v ) {
		Y[384] = v;
		k = 1;
	}
	if( Y[342]<Y[471] )
		v = 1.;
	else
		v = 0.;
	if( Y[385]!=v ) {
		Y[385] = v;
		k = 1;
	}
	if( Y[80]<0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[386]!=v ) {
		Y[386] = v;
		k = 1;
	}
	if( Y[464]-1.<=Y[79] )
		v = 1.;
	else
		v = 0.;
	if( Y[387]!=v ) {
		Y[387] = v;
		k = 1;
	}
	if( Y[78]<Y[459] )
		v = 1.;
	else
		v = 0.;
	if( Y[388]!=v ) {
		Y[388] = v;
		k = 1;
	}
	if( Y[77]<0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[389]!=v ) {
		Y[389] = v;
		k = 1;
	}
	if( Y[72]<Y[71] )
		v = 1.;
	else
		v = 0.;
	if( Y[390]!=v ) {
		Y[390] = v;
		k = 1;
	}
	if( Y[74]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[391]!=v ) {
		Y[391] = v;
		k = 1;
	}
	if( Y[73]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[392]!=v ) {
		Y[392] = v;
		k = 1;
	}
	if( Y[66]>-1. )
		v = 1.;
	else
		v = 0.;
	if( Y[393]!=v ) {
		Y[393] = v;
		k = 1;
	}
	if( Y[316]>100. )
		v = 1.;
	else
		v = 0.;
	if( Y[394]!=v ) {
		Y[394] = v;
		k = 1;
	}
	if( Y[316]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[395]!=v ) {
		Y[395] = v;
		k = 1;
	}
	if( Y[0]>=0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[396]!=v ) {
		Y[396] = v;
		k = 1;
	}
	if( Y[1]>=0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[397]!=v ) {
		Y[397] = v;
		k = 1;
	}
	if( Y[2]>=0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[398]!=v ) {
		Y[398] = v;
		k = 1;
	}
	if( Y[3]>=0.5 )
		v = 1.;
	else
		v = 0.;
	if( Y[399]!=v ) {
		Y[399] = v;
		k = 1;
	}
	if( Y[67]*Y[7]>=0. )
		v = 1.;
	else
		v = 0.;
	if( Y[400]!=v ) {
		Y[400] = v;
		k = 1;
	}
	if( (Y[69]*(Y[6]-Y[7]*Y[449]))/(Y[456]+1.)>=0. )
		v = 1.;
	else
		v = 0.;
	if( Y[401]!=v ) {
		Y[401] = v;
		k = 1;
	}
	if( Y[64]*Y[448]*Y[7]<=0. )
		v = 1.;
	else
		v = 0.;
	if( Y[402]!=v ) {
		Y[402] = v;
		k = 1;
	}
	if( (Y[68]*Y[456]*(Y[6]-Y[7]*Y[449]))/(Y[456]+1.)<=0. )
		v = 1.;
	else
		v = 0.;
	if( Y[403]!=v ) {
		Y[403] = v;
		k = 1;
	}
	if( (Y[6]-Y[7]*Y[449])/(Y[456]+1.)>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[404]!=v ) {
		Y[404] = v;
		k = 1;
	}
	if( Y[448]*Y[7]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[405]!=v ) {
		Y[405] = v;
		k = 1;
	}
	if( (Y[456]*(Y[6]-Y[7]*Y[449]))/(Y[456]+1.)<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[406]!=v ) {
		Y[406] = v;
		k = 1;
	}
	if( Y[52]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[407]!=v ) {
		Y[407] = v;
		k = 1;
	}
	if( Y[54]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[408]!=v ) {
		Y[408] = v;
		k = 1;
	}
	if( Y[56]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[409]!=v ) {
		Y[409] = v;
		k = 1;
	}
	if( Y[58]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[410]!=v ) {
		Y[410] = v;
		k = 1;
	}
	if( Y[5]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[411]!=v ) {
		Y[411] = v;
		k = 1;
	}
	if( Y[7]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[412]!=v ) {
		Y[412] = v;
		k = 1;
	}
	if( Y[68]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[413]!=v ) {
		Y[413] = v;
		k = 1;
	}
	if( Y[69]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[414]!=v ) {
		Y[414] = v;
		k = 1;
	}
	if( Y[64]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[415]!=v ) {
		Y[415] = v;
		k = 1;
	}
	if( Y[67]>0. )
		v = 1.;
	else
		v = 0.;
	if( Y[416]!=v ) {
		Y[416] = v;
		k = 1;
	}
	if( Y[52]>1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[417]!=v ) {
		Y[417] = v;
		k = 1;
	}
	if( Y[54]>1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[418]!=v ) {
		Y[418] = v;
		k = 1;
	}
	if( Y[56]>1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[419]!=v ) {
		Y[419] = v;
		k = 1;
	}
	if( Y[58]>1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[420]!=v ) {
		Y[420] = v;
		k = 1;
	}
	if( Y[5]>1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[421]!=v ) {
		Y[421] = v;
		k = 1;
	}
	if( Y[52]<-1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[422]!=v ) {
		Y[422] = v;
		k = 1;
	}
	if( Y[54]<-1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[423]!=v ) {
		Y[423] = v;
		k = 1;
	}
	if( Y[56]<-1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[424]!=v ) {
		Y[424] = v;
		k = 1;
	}
	if( Y[58]<-1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[425]!=v ) {
		Y[425] = v;
		k = 1;
	}
	if( Y[95]<-Y[11] )
		v = 1.;
	else
		v = 0.;
	if( Y[426]!=v ) {
		Y[426] = v;
		k = 1;
	}
	if( Y[96]<-Y[11] )
		v = 1.;
	else
		v = 0.;
	if( Y[427]!=v ) {
		Y[427] = v;
		k = 1;
	}
	if( Y[97]<-Y[12] )
		v = 1.;
	else
		v = 0.;
	if( Y[428]!=v ) {
		Y[428] = v;
		k = 1;
	}
	if( Y[98]<-Y[12] )
		v = 1.;
	else
		v = 0.;
	if( Y[429]!=v ) {
		Y[429] = v;
		k = 1;
	}
	if( Y[11]<Y[95] )
		v = 1.;
	else
		v = 0.;
	if( Y[430]!=v ) {
		Y[430] = v;
		k = 1;
	}
	if( Y[11]<Y[96] )
		v = 1.;
	else
		v = 0.;
	if( Y[431]!=v ) {
		Y[431] = v;
		k = 1;
	}
	if( Y[12]<Y[97] )
		v = 1.;
	else
		v = 0.;
	if( Y[432]!=v ) {
		Y[432] = v;
		k = 1;
	}
	if( Y[12]<Y[98] )
		v = 1.;
	else
		v = 0.;
	if( Y[433]!=v ) {
		Y[433] = v;
		k = 1;
	}
	if( Y[65]<-Y[4] )
		v = 1.;
	else
		v = 0.;
	if( Y[434]!=v ) {
		Y[434] = v;
		k = 1;
	}
	if( Y[4]<Y[65] )
		v = 1.;
	else
		v = 0.;
	if( Y[435]!=v ) {
		Y[435] = v;
		k = 1;
	}
	if( Y[5]<-1e10 )
		v = 1.;
	else
		v = 0.;
	if( Y[436]!=v ) {
		Y[436] = v;
		k = 1;
	}
	if( Y[99]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[437]!=v ) {
		Y[437] = v;
		k = 1;
	}
	if( Y[100]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[438]!=v ) {
		Y[438] = v;
		k = 1;
	}
	if( Y[101]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[439]!=v ) {
		Y[439] = v;
		k = 1;
	}
	if( Y[102]<0. )
		v = 1.;
	else
		v = 0.;
	if( Y[440]!=v ) {
		Y[440] = v;
		k = 1;
	}
	return(k);
}

static void inpfn(double T, double *U)
{
	UNUSED(T);
	U[0] = 0.;
	U[1] = 0.;
	U[2] = 0.;
}

/*
	Projection: Use Rp,Jp constraint residual and Jacobian functions to
	project the input solution x back onto the constraint manfold.

	Return codes:
	0 - Successful completion
	1 - Entry of Residual or Jacobian is undefined/infinity
	2 - Row of Jacobian is zero, but residual is nonzero
	3 - Iteration limit reached
*/
static int Projection(
	double t,		/* Current time */
	double *x,		/* Current solution (updated) */
	double tol,		/* Tolerance limit for iteration */
	int maxiter,	/* Max iteration limit */
	double *w		/* Weight vector */
)
{
	int i, j, k, r, c, iter, nc2;
	M_INT ip[NCON],per[NDIFF];
	double scl, resmag, val, val2, R[NCON],J[NCON*NDIFF],A[NCON*NCON];
#if NCON*NCON>NDIFF
	double iA[NCON*NCON];
#else
	double iA[NDIFF];
#endif

	for(iter=0;iter<maxiter;iter++) {

		/* Compute the Jacobian and Residual at the current solution */
		Rp(t, x, R);
		Jp(t, x, J);

		/* Scale the columns by the weight factor */
		if( w ) {
			for(j=0;j<NDIFF;j++)
				for(i=0;i<NCON;i++)
					J[NDIFF*i+j] /= w[j];
		}

		/* Rescale rows of Jacobian so that maximum coeff is 1, validating */
		resmag = 0.0;
		for(i=0;i<NCON;i++) {
			if( IS_UNDEF(R[i]) ) return(1);
			val = 0.0;
			for(j=0;j<NDIFF;j++) {
				if( IS_UNDEF(J[i*NDIFF+j]) ) return(1);
				val2 = fabs(J[i*NDIFF+j]);
				if( val2>val ) val = val2;
			}
			if( val==0. ) {
				if( R[i]!=0. )
					return(2);
			}
			else {
				val = 1.0/val;
				for(j=0;j<NDIFF;j++) J[i*NDIFF+j] *= val;
				R[i] *= val;
				resmag += R[i]*R[i];
			}
		}

		/* Compute J_hat from J
			The solving process will select the row with the largest residual,
			then choose the largest coeff, computing an approx.  of the condition
			as we go, stopping when the condition becomes too poor. */
		for(i=0;i<NDIFF;i++) per[i]=i;
		nc2 = NCON;
		scl = 1.0;
		i = 0;
		while( i<nc2 ) {
			/* Search for row with largest residual */
			resmag = fabs(R[i]); r = i;
			for(j=i+1;j<nc2;j++) {
				val2 = fabs(R[j]);
				if( val2>resmag ) { resmag = val2; r = j; }
			}
			/* Check for termination on the first row of this iteration */
			if( i==0 && ( resmag<=tol || iter>=maxiter )) {
				nc2 = NDIFF+1; break;
			}

			/* Row 'r' has largest residual 'val', locate column with
				largest coeff */
			val = fabs(J[r*NDIFF+i]); c = i;
			for(j=i+1;j<NDIFF;j++) {
				val2 = fabs(J[r*NDIFF+j]);
				if( val2>val ) { val = val2; c = j; }
			}

			if( scl*val<sqrt(tol) )  {
				/* Coefficient is too small - remove row */
				if( r!=nc2-1 ) {
					for(j=0;j<NDIFF;j++) J[r*NDIFF+j] = J[(nc2-1)*NDIFF+j];
					R[r] = R[nc2-1];
				}
				nc2--;
			}
			else {
				/* Adjust condition estimate */
				scl *= val;
				/* Row/Column exchanges */
				if( c!=i ) {
					for(j=0;j<nc2;j++) { val=J[j*NDIFF+i]; J[j*NDIFF+i]=J[j*NDIFF+c]; J[j*NDIFF+c]=val; }
					j=per[i]; per[i]=per[c]; per[c]=j;
				}
				if( r!=i ) {
					for(j=i;j<NDIFF;j++) { val=J[i*NDIFF+j]; J[i*NDIFF+j]=J[r*NDIFF+j]; J[r*NDIFF+j]=val; }
					val=R[i]; R[i]=R[r]; R[r]=val;
				}
				/* Rescale if necessary */
				if( J[i*NDIFF+i]!=1.0 ) {
					val = 1.0/J[i*NDIFF+i];
					J[i*NDIFF+i] = 1.0;
					for(j=i+1;j<NDIFF;j++) J[i*NDIFF+j] = J[i*NDIFF+j]*val;
					R[i] *= val;
				}
				/* Backsub */
				for(r=0;r<nc2;r++)
					if( r!=i && J[r*NDIFF+i]!=0.0 ) {
						for(c=i+1;c<NDIFF;c++) J[r*NDIFF+c] -= J[r*NDIFF+i]*J[i*NDIFF+c];
						R[r] -= J[r*NDIFF+i]*R[i];
						J[r*NDIFF+i] = 0.0;
					}
				if( i==NDIFF-1 ) {
					nc2=NDIFF;
					break;
				}
				else
					i++;
			}
		}
		if( nc2==NDIFF+1 )
			/* Termination: residual within bound on first row */
			break;

		/* Compute A = J_hat * J_hat^T */
		for(j=0;j<nc2;j++)
			for(i=0;i<=j;i++) {
				A[i*nc2+j] = 0.0;
				for(k=0;k<NDIFF;k++) A[i*nc2+j]+=J[i*NDIFF+k]*J[j*NDIFF+k];
			}
		for(i=0;i<nc2;i++)
			for(j=0;j<i;j++)
				A[i*nc2+j]=A[j*nc2+i];

		/* Construct (J_hat * J_hat^T)^(-1) in iA */
		for(i=0;i<nc2*nc2;i++) iA[i]=0.0;
		for(i=0;i<nc2;i++) iA[i*(1+nc2)]=1.0;
		DecompCInc(nc2, A, nc2, ip);
		MultiSolveCInc(nc2, A, nc2, ip, nc2, iA, nc2);

		/* Multiply iA (nc2 x nc2) with R (nc2 x 1) to A (nc2 x 1)
			A = (J_hat * J_hat^T)^(-1) * R */
		for(i=0;i<nc2;i++) {
			A[i] = 0.0;
			for(k=0;k<nc2;k++) A[i] += iA[i*nc2+k]*R[k];
		}

		/* Multiply J_hat^T (NDIFF x nc2) with A (nc2 x 1) to iA (NDIFF x 1)
			 iA = J_hat^T * (J_hat * J_hat^T)^(-1) * R */
		for(i=0;i<NDIFF;i++) {
			iA[i] = 0.0;
			for(k=0;k<nc2;k++) iA[i] += J[k*NDIFF+i]*A[k];
		}

		val=0.0; for(i=0;i<NDIFF;i++) val+=x[i]*x[i]; val=sqrt(val);
		val2=0.0; for(i=0;i<NDIFF;i++) val2+=iA[i]*iA[i]; val2=sqrt(val2);
		val = val2/((val>0.1*val2)?val:(0.1*val2));
		if( val>0.1 ) {
			/* Solution is very far off - Use relaxed */
			val2 = ( tol>0.1/val )?tol:(0.1/val);
			for(i=0;i<NDIFF;i++) x[per[i]]-=val2*iA[i];
		}
		else
			/* Direct newton */
			for(i=0;i<NDIFF;i++) x[per[i]]-=iA[i];
	}
	if( iter==maxiter ) return(3); else return(0);
}

/*
	ProjectInitial: Use weighted projection to find consistent initial
	data with fixed initial values.

	Return codes:
	0 - Successful completion
	2 - Projection not converging
	3 - Iteration limit reached
*/
static int ProjectInitial(
	double t,			/* t0 */
	double *x,			/* Current solution (updated) */
	double ptol,		/* Tolerance limit for iteration for projection */
	int pmaxiter,	/* Max iteration limit for projection */
	int *icmask,	/* Fixed IC mask vector */
	double tol,		/* Convergence tolerance */
	int maxiter,	/* Max limit for number of calls to projection */
	double W			/* Default fixed IC weight */
)
{
	int i, ip, iter;
	double delta1, delta2, val, w[NDIFF], ic[NDIFF];

	for(i=0;i<NDIFF;i++) {
		if( icmask[i]==0 )
			w[i] = 1.0;
		else {
			w[i] = W;
			ic[i] = x[i];
		}
	}

	delta1 = 1.0;
	for(iter=0;iter<maxiter;iter++) {
		/* Do weighted projection and check fixed IC deviation */
		ip=Projection(t,x,ptol,pmaxiter,w);
		if( ip>0 && ip!=3 ) return(2);

		delta2 = 0.0;
		for(i=0;i<NDIFF;i++)
			if( w[i]!=1.0 ) {
				val = 0.5*(fabs(x[i])+fabs(ic[i]));
				val = ( val > 1.0e-3 ) ? val : 1.0e-3;
				delta2+=fabs((x[i]-ic[i]))/(val);
			}

		/* Return if projection converged */
		if( delta2<=tol ) break;
		/* Check for adequate convergence rate */
		if( iter>2 && (delta2/delta1 > 0.9) ) return(2);
		/* Check iteration limit */
		if( iter==maxiter-1 ) { iter++; break; }

		/* Overwrite the solution vector with fixed IC values,
		   for next pass. */
		for(i=0;i<NDIFF;i++)
			if( w[i]!=1.0 ) x[i]=ic[i];

		delta1 = delta2;
	}
	/* Check iteration limit */
	if( iter==maxiter ) return(3); else return(0);
}

static void terminate(SolverStruct *S, int j)
{
	if(j==1) SolverError(S,1,"Modelica assertion (0 < abs(Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.R_mot2wh)) failed in Main.FullModel.'Brake Clutch Mode'.BG4: Error in initialization of LossyGear: ratio may not be zero");
	if(j==2) SolverError(S,1,"Modelica assertion (0 < abs(Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.R_ring2wh)) failed in Main.FullModel.'Brake Clutch Mode'.BG1: Error in initialization of LossyGear: ratio may not be zero");
	if(j==3) SolverError(S,1,"Modelica assertion (1 < Main.FullModel.'Brake Clutch Mode'.'Powertrain Parameters'.rho ^ (-1)) failed in Main.FullModel.'Brake Clutch Mode'.PG1: Error in initialization of Planetary Gear: ratio must be strictly greater than one");
}

static int RunEvents(SolverStruct *S, double *w, int *modes, int first, int termvar, int maxiter)
{
	double t,*y,*yp,*ypre,*tval;
	int *m=NULL,*oldmodes,*inc,*req;
	int i,flag,iter,evt,rc,failskip;

	/* Transfer data to approp. named arrays */
	t=w[0]; y=&w[1]; yp=&y[NEQ+NPAR]; ypre=&yp[NDFA]; tval=&ypre[NEQ];
	oldmodes=&modes[NZC]; inc=&oldmodes[NZC]; req=&inc[NEVT];
	/* Verify that no y values are undefined */
	for(i=0;i<NEQ;i++) if(IS_UNDEF(y[i])) {
		SolverError(S,0,"undefined value encountered on entry to RunEvents");
		return(-3);
	}

	/* Set the old modes to the new and ypre to y */
	for(i=0;i<NZC;i++) oldmodes[i]=modes[i];
	for(i=0;i<NEQ;i++) ypre[i]=y[i];

	if(!first) {
		/* Check for events */
		eev(t,y,ypre,tval);
		flag=0;
		for(i=0;i<NEVT;i++) {
#ifdef EVTHYST
			if( tval[i]>EVTHYST && modes[2*i]==0 ) {
				modes[2*i]=1;
				if(req[i]>0 && y[req[i]-1]==1.0) oldmodes[2*i]=1;
				else flag=1;
			}
			else if( tval[i]<EVTHYST && modes[2*i]==1 ) {
				modes[2*i]=0; oldmodes[2*i]=0;
			}
			if( tval[i]>-EVTHYST && modes[2*i+1]==0) {
				modes[2*i+1]=1; oldmodes[2*i+1]=1;
			}
			else if( tval[i]<-EVTHYST && modes[2*i+1]==1 ) {
				modes[2*i+1]=0;
				if(inc[i] || (req[i]>0 && y[req[i]-1]==0.0)) oldmodes[2*i+1]=0;
				else flag=1;
			}
#else
			if( tval[i]>0.0 && modes[i]==0 ) {
				modes[i]=1;
				if(req[i]>0 && y[req[i]-1]==1.0) oldmodes[i]=1;
				else flag=1;
			}
			else if( tval[i]<0.0 && modes[i]==1 ) {
				modes[i]=0;
				if(inc[i] || (req[i]>0 && y[req[i]-1]==0.0)) oldmodes[i]=0;
				else flag=1;
			}
#endif
		}
		/* If no events, return, but still need to update modes as we may
			have a sign change for a decrease on an increase-only trigger */
		if(!flag) {
			if(m) for(i=0;i<NZC;i++) m[i]=modes[i];
			return(0);
		}
	}

	/* Iteration loop */
	failskip=0;
	for(iter=0;;iter++) {
		if( !first || iter>0 )
			/* Event loop */
			for(evt=0;evt<NEVT;evt++)
#ifdef EVTHYST
				if(modes[2*evt]!=oldmodes[2*evt] || modes[2*evt+1]!=oldmodes[2*evt+1]) {
#else
				if(modes[evt]!=oldmodes[evt]) {
#endif
					rc=eex(evt+1,t,y,ypre);
					if(termvar>=0 && y[termvar]>0.0) {
						i=(int)y[termvar];
						terminate(S,i);
						return(i);
					}
					/* Handle RC */
#ifdef EVTHYST
					oldmodes[2*evt]=modes[2*evt]; oldmodes[2*evt+1]=modes[2*evt+1];
#else
					oldmodes[evt]=modes[evt];
#endif
				}

		/* Discrete equations */
		rc=eex(NEVT+1,t,y,ypre);
		/* Fail skip */
		if(rc==8 && !failskip) {
			failskip=1;
			iter--;
			if(termvar>=0) y[termvar]=0.0;
		}
		else
			failskip=0;
		if(termvar>=0 && y[termvar]>0.0) {
			i=(int)y[termvar];
			terminate(S,i);
			return(i);
		}
		/* Handle RC */

		/* Check for termination */
		for(i=0;i<NEQ;i++) if(y[i]!=ypre[i]) break;
		if( !failskip && i==NEQ ) {
			/* Update modes and return */
			if(m) for(i=0;i<NZC;i++) m[i]=modes[i];
			return(0);
		}

		/* Check iter limit */
		if( iter>=maxiter ) {
			SolverError(S,0,"event iteration limit exceeded");
			return(-1);
		}

		/* Update index-1 equations */
		if(!failskip && NIX1>0) {
			fp(NEQ,t,y,yp);
			if( IS_UNDEF(yp[0]) ) {
				SolverError(S,0,"index-1 and derivative evaluation failure");
				return(-2);
			}
		}
		/* Verify that no y values are undefined */
		for(i=0;i<NEQ;i++) if(IS_UNDEF(y[i])) {
			SolverError(S,0,"undefined value encountered during event iteration");
			return(-4);
		}

		/* Projection */
		if(!first && !failskip && EVTPROJ) i=Projection(t,y,CONTOL,CONITER,NULL);

		/* Update pre */
		for(i=0;i<NEQ;i++) ypre[i]=y[i];
		if(failskip) continue;

		/* Evaluate event triggers, and update modes */
		eev(t,y,ypre,tval);
		for(i=0;i<NEVT;i++) {
#ifdef EVTHYST
			if( tval[i]>EVTHYST && modes[2*i]==0 ) {
				modes[2*i]=1;
				if(req[i]>0 && y[req[i]-1]==1.0) oldmodes[2*i]=1;
			}
			else if( tval[i]<EVTHYST && modes[2*i]==1 ) {
				modes[2*i]=0; oldmodes[2*i]=0;
			}
			if( tval[i]>-EVTHYST && modes[2*i+1]==0) {
				modes[2*i+1]=1; oldmodes[2*i+1]=1;
			}
			else if( tval[i]<-EVTHYST && modes[2*i+1]==1 ) {
				modes[2*i+1]=0;
				if(inc[i] || (req[i]>0 && y[req[i]-1]==0.0)) oldmodes[2*i+1]=0;
			}
#else
			if( tval[i]>0.0 && modes[i]==0 ) {
				modes[i]=1;
				if(req[i]>0 && y[req[i]-1]==1.0) oldmodes[i]=1;
			}
			else if( tval[i]<0.0 && modes[i]==1 ) {
				modes[i]=0;
				if(req[i]>0 && y[req[i]-1]==0.0) oldmodes[i]=0;
				if(inc[i]) oldmodes[i]=0;
			}
#endif
		}
	}
	return(0);
}

static void numdiffinp(double *w, int initial)
{
	double dt1,dt2,idt1,idt2,idt12,*nd1,*nd2;

	nd1=w+1+2*NEQ+NPAR+NDFA+NEVT;
	nd2=nd1+3;
	if(!initial && w[0]-nd1[0]>0.0) {
		dt1=w[0]-nd1[0]; idt1=1.0/dt1;
		if(nd1[0]-nd2[0]>0.0) {
			dt2=w[0]-nd2[0]; idt2=1.0/dt2;
			idt12=1.0/(nd2[0]-nd1[0]);
			w[315]=(idt1+idt2)*w[319]+idt12*(dt2*idt1*nd1[1]-dt1*idt2*nd2[1]);
			w[316]=(idt1+idt2)*w[315]+idt12*(dt2*idt1*nd1[2]-dt1*idt2*nd2[2]);
		}
		else {
			w[315]=idt1*(w[319]-nd1[1]);
			w[316]=idt1*(w[315]-nd1[2]);
		}
	}
	if(initial || w[0]-nd1[0]>1e-10) {
		nd2[0]=nd1[0]; nd1[0]=w[0];
		nd2[1]=nd1[1]; nd1[1]=w[319];
		nd2[2]=nd1[2]; nd1[2]=w[315];
	}
}

static void SolverUpdate(double *u, int internal, SolverStruct *S)
{
	int i;

	inpfn(S->w[0],u);
	for(i=0;i<NINP;i++) S->w[i+NDIFF+NIX1-NINP+1]=u[i];
	numdiffinp(S->w,0);
	fp(NEQ,S->w[0],&S->w[1],&S->w[NEQ+NPAR+1]);
	if(IS_UNDEF(S->w[NEQ+NPAR+1])) {
		SolverError(S,0,"index-1 and derivative evaluation failure");
		return;
	}
	if(internal) return;
	i=Projection(S->w[0],&S->w[1],CONTOL,CONITER,NULL);
	if(i>0 && i!=3) {
		SolverError(S,0,"constraint projection failure");
		return;
	}
	fp(NEQ,S->w[0],&S->w[1],&S->w[NEQ+NPAR+1]);
	if(IS_UNDEF(S->w[NEQ+NPAR+1])) {
		SolverError(S,0,"index-1 and derivative evaluation failure");
		return;
	}
	if(RunEvents(S,S->w,S->iw,0,362,EVTITER)) return;
}

static void SolverOutputs(double *y, SolverStruct *S)
{
	otp(S->w[0],&S->w[1],&S->w[NEQ+NPAR+1]);
	y[ 0]=S->w[281];
	y[ 1]=S->w[282];
	y[ 2]=S->w[283];
	y[ 3]=S->w[41];
	y[ 4]=S->w[42];
	y[ 5]=S->w[43];
	y[ 6]=S->w[284];
	y[ 7]=S->w[285];
	y[ 8]=S->w[286];
	y[ 9]=S->w[287];
	y[10]=S->w[288];
	y[11]=S->w[289];
	y[12]=S->w[26];
	y[13]=S->w[27];
	y[14]=S->w[28];
	y[15]=S->w[290];
	y[16]=S->w[291];
	y[17]=S->w[292];
	y[18]=S->w[182];
	y[19]=S->w[293];
	y[20]=S->w[294];
	y[21]=S->w[29];
	y[22]=S->w[30];
	y[23]=S->w[31];
	y[24]=S->w[295];
	y[25]=S->w[296];
	y[26]=S->w[297];
	y[27]=S->w[100];
	y[28]=S->w[32];
	y[29]=S->w[33];
	y[30]=S->w[34];
	y[31]=S->w[298];
	y[32]=S->w[299];
	y[33]=S->w[300];
	y[34]=S->w[102];
	y[35]=S->w[16];
	y[36]=S->w[20];
	y[37]=S->w[22];
	y[38]=S->w[301];
	y[39]=S->w[302];
	y[40]=S->w[303];
	y[41]=S->w[38];
	y[42]=S->w[39];
	y[43]=S->w[40];
	y[44]=S->w[304];
	y[45]=S->w[305];
	y[46]=S->w[306];
	y[47]=S->w[101];
	y[48]=S->w[35];
	y[49]=S->w[36];
	y[50]=S->w[37];
	y[51]=S->w[307];
	y[52]=S->w[308];
	y[53]=S->w[309];
	y[54]=S->w[103];
	y[55]=S->w[310];
	y[56]=S->w[311];
	y[57]=S->w[312];
	y[58]=S->w[313];
	y[59]=S->w[314];
	y[60]=S->w[60];
	y[61]=S->w[ 1];
	y[62]=S->w[ 2];
	y[63]=S->w[ 3];
	y[64]=S->w[ 4];
	y[65]=S->w[ 5];
	y[66]=S->w[ 6];
	y[67]=S->w[ 7];
	y[68]=S->w[ 8];
	y[69]=S->w[ 9];
	y[70]=S->w[10];
	y[71]=S->w[11];
	y[72]=S->w[12];
	y[73]=S->w[13];
	y[74]=S->w[14];
	y[75]=S->w[16];
	y[76]=S->w[18];
	y[77]=S->w[20];
	y[78]=S->w[22];
	y[79]=S->w[24];
	y[80]=S->w[26];
	y[81]=S->w[27];
	y[82]=S->w[28];
	y[83]=S->w[29];
	y[84]=S->w[30];
	y[85]=S->w[31];
	y[86]=S->w[32];
	y[87]=S->w[33];
	y[88]=S->w[34];
	y[89]=S->w[35];
	y[90]=S->w[36];
	y[91]=S->w[37];
	y[92]=S->w[38];
	y[93]=S->w[39];
	y[94]=S->w[40];
	y[95]=S->w[41];
	y[96]=S->w[42];
	y[97]=S->w[43];
	y[98]=S->w[44];
	y[99]=S->w[46];
	y[100]=S->w[48];
	y[101]=S->w[50];
	y[102]=S->w[52];
	y[103]=S->w[54];
	y[104]=S->w[56];
	y[105]=S->w[58];
	y[106]=S->w[61];
	y[107]=S->w[62];
	y[108]=S->w[63];
	y[109]=S->w[64];
}

static void RK4Step(double *u, SolverStruct *S)
{
	int i;
	double y[NEQ+1],yp1[NDFA],yp2[NDFA],yp3[NDFA];

	for(i=0;i<NEQ+1;i++) y[i]=S->w[i];
	for(i=0;i<NDIFF;i++) yp1[i]=S->w[1+NEQ+NPAR+i];
	S->w[0]+=0.5*S->h;
	for(i=0;i<NDIFF;i++) S->w[i+1]+=0.5*S->h*S->w[1+NEQ+NPAR+i];
	SolverUpdate(u,1,S);
	for(i=0;i<NDIFF;i++) yp2[i]=S->w[1+NEQ+NPAR+i];
	for(i=0;i<NDIFF;i++) S->w[i+1]=y[i+1]+0.5*S->h*S->w[1+NEQ+NPAR+i];
	SolverUpdate(u,1,S);
	for(i=0;i<NDIFF;i++) yp3[i]=S->w[1+NEQ+NPAR+i];
	S->w[0]=y[0]+S->h;
	for(i=0;i<NDIFF;i++) S->w[i+1]=y[i+1]+S->h*S->w[1+NEQ+NPAR+i];
	SolverUpdate(u,1,S);
	for(i=0;i<NDIFF;i++) S->w[i+1]=y[i+1]+S->h/6.0*(yp1[i]+2.0*(yp2[i]+yp3[i])+S->w[1+NEQ+NPAR+i]);
	SolverUpdate(u,0,S);
}

static void SolverSetup(double t0, double *ic, double *u, double *p, double *y, double h, SolverStruct *S)
{
	int i, j;

	S->h = h;
	S->iw=(int *)malloc(2*(NEVT+NZC)*sizeof(int));
	S->w[0] = t0;
	S->w[1] =  0.00000000000000000e+00;
	S->w[2] =  0.00000000000000000e+00;
	S->w[3] =  0.00000000000000000e+00;
	S->w[4] =  0.00000000000000000e+00;
	S->w[5] =  0.00000000000000000e+00;
	S->w[6] =  0.00000000000000000e+00;
	S->w[7] =  8.82911392405063395e+01;
	S->w[8] =  0.00000000000000000e+00;
	S->w[9] =  0.00000000000000000e+00;
	S->w[10] =  0.00000000000000000e+00;
	S->w[11] =  0.00000000000000000e+00;
	S->w[12] =  0.00000000000000000e+00;
	S->w[13] =  0.00000000000000000e+00;
	S->w[14] =  0.00000000000000000e+00;
	S->w[15] =  0.00000000000000000e-01;
	S->w[16] =  0.00000000000000000e+00;
	S->w[17] =  0.00000000000000000e-01;
	S->w[18] =  0.00000000000000000e+00;
	S->w[19] =  0.00000000000000000e-01;
	S->w[20] =  0.00000000000000000e+00;
	S->w[21] =  0.00000000000000000e-01;
	S->w[22] =  5.34100000000000019e-01;
	S->w[23] =  0.00000000000000000e-01;
	S->w[24] =  0.00000000000000000e+00;
	S->w[25] =  0.00000000000000000e+00;
	S->w[26] =  0.00000000000000000e+00;
	S->w[27] =  0.00000000000000000e+00;
	S->w[28] =  0.00000000000000000e+00;
	S->w[29] =  0.00000000000000000e+00;
	S->w[30] =  0.00000000000000000e+00;
	S->w[31] =  0.00000000000000000e+00;
	S->w[32] =  0.00000000000000000e+00;
	S->w[33] =  0.00000000000000000e+00;
	S->w[34] =  0.00000000000000000e+00;
	S->w[35] =  0.00000000000000000e+00;
	S->w[36] =  0.00000000000000000e+00;
	S->w[37] =  0.00000000000000000e+00;
	S->w[38] =  0.00000000000000000e+00;
	S->w[39] =  0.00000000000000000e+00;
	S->w[40] =  0.00000000000000000e+00;
	S->w[41] =  0.00000000000000000e+00;
	S->w[42] =  0.00000000000000000e+00;
	S->w[43] =  0.00000000000000000e+00;
	S->w[44] =  4.44502000000000008e-01;
	S->w[45] =  0.00000000000000000e+00;
	S->w[46] =  4.44502000000000008e-01;
	S->w[47] =  0.00000000000000000e+00;
	S->w[48] =  4.44502000000000008e-01;
	S->w[49] =  0.00000000000000000e+00;
	S->w[50] =  4.44502000000000008e-01;
	S->w[51] =  0.00000000000000000e+00;
	S->w[52] =  0.00000000000000000e+00;
	S->w[53] =  0.00000000000000000e+00;
	S->w[54] =  0.00000000000000000e+00;
	S->w[55] =  0.00000000000000000e+00;
	S->w[56] =  0.00000000000000000e+00;
	S->w[57] =  0.00000000000000000e+00;
	S->w[58] =  0.00000000000000000e+00;
	S->w[59] =  0.00000000000000000e+00;
	S->w[60] =  0.00000000000000000e+00;
	S->w[61] =  0.00000000000000000e+00;
	S->w[62] =  0.00000000000000000e+00;
	S->w[63] =  0.00000000000000000e+00;
	S->w[64] =  0.00000000000000000e+00;
	S->w[65] = -9.05656882353374115e+00;
	S->w[66] = -1.21944517834735792e-03;
	S->w[67] =  0.00000000000000000e+00;
	S->w[68] =  0.00000000000000000e+00;
	S->w[69] =  2.30631740383616695e+01;
	S->w[70] =  9.43743265839931311e+00;
	S->w[71] =  0.00000000000000000e+00;
	S->w[72] =  9.48058959496251297e-01;
	S->w[73] =  5.19410405037486755e-02;
	S->w[74] = -3.31629998917456760e+02;
	S->w[75] = -2.87298929080878224e+02;
	S->w[76] =  0.00000000000000000e+00;
	S->w[77] =  1.00000000000000000e+00;
	S->w[78] =  0.00000000000000000e+00;
	S->w[79] =  3.11932779639771070e+02;
	S->w[80] = -1.84415860094153672e+00;
	S->w[81] =  0.00000000000000000e+00;
	S->w[82] =  3.11932779639771070e+02;
	S->w[83] =  1.00000000000000000e+00;
	S->w[84] =  1.38500000000000012e-01;
	S->w[85] =  8.96209824507075647e-01;
	S->w[86] =  1.03790175492924394e-01;
	S->w[87] =  3.11932779639771070e+02;
	S->w[88] =  2.00000000000000000e+00;
	S->w[89] =  1.00000000000000000e+00;
	S->w[90] =  0.00000000000000000e+00;
	S->w[91] =  1.00000000000000000e+00;
	S->w[92] =  9.97593535802056119e-01;
	S->w[93] =  2.40646419625829226e-03;
	S->w[94] =  9.97593535802056119e-01;
	S->w[95] =  1.68569584003597662e-12;
	S->w[96] = -4.35932100753127710e-05;
	S->w[97] = -4.35932100753127710e-05;
	S->w[98] = -4.35932100753127710e-05;
	S->w[99] = -4.35932100753127710e-05;
	S->w[100] =  0.00000000000000000e-01;
	S->w[101] =  0.00000000000000000e+00;
	S->w[102] =  0.00000000000000000e-01;
	S->w[103] =  0.00000000000000000e+00;
	S->w[104] =  0.00000000000000000e+00;
	S->w[105] = -1.21944517834735784e+01;
	S->w[106] =  0.00000000000000000e+00;
	S->w[107] =  0.00000000000000000e+00;
	S->w[108] =  0.00000000000000000e+00;
	S->w[109] =  1.17669255297763726e+01;
	S->w[110] =  8.95958796683479974e+00;
	S->w[111] = -1.41561489875989793e-01;
	S->w[112] = -5.75006066967609826e+01;
	S->w[113] =  0.00000000000000000e+00;
	S->w[114] =  1.00000000000000000e+00;
	S->w[115] =  0.00000000000000000e+00;
	S->w[116] =  1.00000000000000000e+02;
	S->w[117] =  2.35113669167319301e+01;
	S->w[118] =  4.07973983416396388e-02;
	S->w[119] =  1.13463095212114009e+01;
	S->w[120] =  6.21627079736110977e-01;
	S->w[121] =  8.35565923637019564e-02;
	S->w[122] =  5.77479674769299090e+04;
	S->w[123] =  1.73163269178706819e-05;
	S->w[124] =  1.69207314135021228e-02;
	S->w[125] =  2.00660904256433193e-05;
	S->w[126] =  1.92413499683435248e+02;
	S->w[127] =  3.74334738903678438e-02;
	S->w[128] =  0.00000000000000000e+00;
	S->w[129] =  0.00000000000000000e+00;
	S->w[130] =  0.00000000000000000e+00;
	S->w[131] =  0.00000000000000000e+00;
	S->w[132] =  0.00000000000000000e+00;
	S->w[133] =  2.73822217490536310e+01;
	S->w[134] =  2.73822217490536310e+01;
	S->w[135] = -1.84415860094153672e+00;
	S->w[136] = -1.84415860094153672e+00;
	S->w[137] = -1.84415860094153672e+00;
	S->w[138] =  9.33912014697380166e-01;
	S->w[139] =  3.49939809374308852e-01;
	S->w[140] =  7.40773768619724993e-01;
	S->w[141] =  7.98596788116186076e+01;
	S->w[142] =  1.23671032917374319e-02;
	S->w[143] =  4.85220868899801274e-17;
	S->w[144] =  1.00000000000000000e+00;
	S->w[145] =  1.25424439178697809e+05;
	S->w[146] =  7.97286424945474293e-06;
	S->w[147] =  1.83234406478826571e-02;
	S->w[148] =  1.74931259218182424e-04;
	S->w[149] =  9.99825099336375200e-01;
	S->w[150] =  1.17815759733307743e+01;
	S->w[151] =  7.82376134278383595e-02;
	S->w[152] =  1.84312945365224330e+01;
	S->w[153] =  7.01236216875940344e-02;
	S->w[154] =  5.40499107392072436e-02;
	S->w[155] =  5.35749032191480836e+01;
	S->w[156] =  1.00000000000000000e+00;
	S->w[157] =  1.00000000000000000e+00;
	S->w[158] =  1.00000000000000000e+00;
	S->w[159] =  4.14823511969619403e+02;
	S->w[160] =  2.40486641859987294e-03;
	S->w[161] =  2.66128054161551031e+00;
	S->w[162] =  2.73128482953878760e-01;
	S->w[163] =  7.69263723569370422e-02;
	S->w[164] =  9.28568587109091070e-01;
	S->w[165] =  6.34804362879498658e+04;
	S->w[166] =  1.53131903533222697e+02;
	S->w[167] =  1.07266841187209497e-07;
	S->w[168] =  1.57149760483203180e-05;
	S->w[169] =  1.00000000000000000e+00;
	S->w[170] =  1.00000000000000000e+00;
	S->w[171] =  1.00000000000000000e+00;
	S->w[172] =  1.00000000000000000e+00;
	S->w[173] =  1.00000000000000000e+02;
	S->w[174] =  0.00000000000000000e+00;
	S->w[175] = -1.84415860094153672e+00;
	S->w[176] =  2.73822217490536310e+01;
	S->w[177] =  3.11932779639771070e+02;
	S->w[178] = -4.35932100753127660e-01;
	S->w[179] = -4.35932100753127660e-01;
	S->w[180] = -4.35932100753127660e-01;
	S->w[181] = -4.35932100753127660e-01;
	S->w[182] =  0.00000000000000000e+00;
	S->w[183] =  0.00000000000000000e-01;
	S->w[184] =  0.00000000000000000e-01;
	S->w[185] =  0.00000000000000000e+00;
	S->w[186] =  0.00000000000000000e+00;
	S->w[187] =  0.00000000000000000e+00;
	S->w[188] =  0.00000000000000000e+00;
	S->w[189] =  9.48799999999999955e+00;
	S->w[190] =  1.86499999999999999e+00;
	S->w[191] =  1.02000000000000002e+00;
	S->w[192] =  1.18100000000000005e+00;
	S->w[193] =  7.55299999999999994e+00;
	S->w[194] =  1.75400000000000000e+00;
	S->w[195] =  8.61999999999999988e-01;
	S->w[196] =  7.20999999999999974e-01;
	S->w[197] =  0.00000000000000000e-01;
	S->w[198] =  3.39598000000000011e-01;
	S->w[199] =  0.00000000000000000e+00;
	S->w[200] =  0.00000000000000000e+00;
	S->w[201] =  3.93243911779701634e+01;
	S->w[202] =  4.68220799999999872e+03;
	S->w[203] =  4.70814816075122963e+02;
	S->w[204] =  0.00000000000000000e-01;
	S->w[205] =  9.48799999999999955e+00;
	S->w[206] =  1.86499999999999999e+00;
	S->w[207] =  1.02000000000000002e+00;
	S->w[208] =  1.18100000000000005e+00;
	S->w[209] =  7.55299999999999994e+00;
	S->w[210] =  1.75400000000000000e+00;
	S->w[211] =  8.61999999999999988e-01;
	S->w[212] =  7.20999999999999974e-01;
	S->w[213] =  0.00000000000000000e+00;
	S->w[214] =  3.39598000000000011e-01;
	S->w[215] =  0.00000000000000000e+00;
	S->w[216] =  0.00000000000000000e+00;
	S->w[217] =  3.93243911779701634e+01;
	S->w[218] =  4.68220799999999872e+03;
	S->w[219] =  4.70814816075122963e+02;
	S->w[220] =  0.00000000000000000e-01;
	S->w[221] =  9.48799999999999955e+00;
	S->w[222] =  1.86499999999999999e+00;
	S->w[223] =  1.02000000000000002e+00;
	S->w[224] =  1.18100000000000005e+00;
	S->w[225] =  7.55299999999999994e+00;
	S->w[226] =  1.75400000000000000e+00;
	S->w[227] =  8.61999999999999988e-01;
	S->w[228] =  7.20999999999999974e-01;
	S->w[229] =  0.00000000000000000e+00;
	S->w[230] =  3.39598000000000011e-01;
	S->w[231] =  0.00000000000000000e+00;
	S->w[232] =  0.00000000000000000e+00;
	S->w[233] =  3.93243911779701634e+01;
	S->w[234] =  4.68220799999999872e+03;
	S->w[235] = -4.70814816075122963e+02;
	S->w[236] =  0.00000000000000000e-01;
	S->w[237] =  9.48799999999999955e+00;
	S->w[238] =  1.86499999999999999e+00;
	S->w[239] =  1.02000000000000002e+00;
	S->w[240] =  1.18100000000000005e+00;
	S->w[241] =  7.55299999999999994e+00;
	S->w[242] =  1.75400000000000000e+00;
	S->w[243] =  8.61999999999999988e-01;
	S->w[244] =  7.20999999999999974e-01;
	S->w[245] =  0.00000000000000000e+00;
	S->w[246] =  3.39598000000000011e-01;
	S->w[247] =  0.00000000000000000e+00;
	S->w[248] =  0.00000000000000000e+00;
	S->w[249] =  3.93243911779701634e+01;
	S->w[250] =  4.68220799999999872e+03;
	S->w[251] = -4.70814816075122963e+02;
	S->w[252] =  0.00000000000000000e-01;
	S->w[253] =  0.00000000000000000e+00;
	S->w[254] =  0.00000000000000000e+00;
	S->w[255] =  0.00000000000000000e+00;
	S->w[256] =  0.00000000000000000e+00;
	S->w[257] =  0.00000000000000000e+00;
	S->w[258] =  0.00000000000000000e+00;
	S->w[259] =  0.00000000000000000e+00;
	S->w[260] =  0.00000000000000000e+00;
	S->w[261] =  0.00000000000000000e+00;
	S->w[262] =  0.00000000000000000e+00;
	S->w[263] =  0.00000000000000000e+00;
	S->w[264] =  0.00000000000000000e+00;
	S->w[265] =  0.00000000000000000e+00;
	S->w[266] =  0.00000000000000000e+00;
	S->w[267] =  0.00000000000000000e+00;
	S->w[268] =  0.00000000000000000e+00;
	S->w[269] =  0.00000000000000000e+00;
	S->w[270] =  0.00000000000000000e+00;
	S->w[271] =  0.00000000000000000e-01;
	S->w[272] =  0.00000000000000000e-01;
	S->w[273] =  0.00000000000000000e-01;
	S->w[274] =  0.00000000000000000e-01;
	S->w[275] =  4.35932100753127660e-01;
	S->w[276] =  2.30083850908241721e-03;
	S->w[277] = -1.79186517926064270e-03;
	S->w[278] =  7.42184976530277929e-02;
	S->w[279] =  6.38143320176450035e-01;
	S->w[280] = -5.99009195671467931e-01;
	S->w[281] = -8.24888269516023120e-02;
	S->w[282] = -3.96460918514650040e-02;
	S->w[283] =  1.28136113483769587e+00;
	S->w[284] =  0.00000000000000000e+00;
	S->w[285] =  0.00000000000000000e+00;
	S->w[286] =  0.00000000000000000e-01;
	S->w[287] = -8.13749898365855429e-01;
	S->w[288] = -1.04598099804834188e+00;
	S->w[289] =  9.12146132752201577e-01;
	S->w[290] =  0.00000000000000000e+00;
	S->w[291] =  0.00000000000000000e+00;
	S->w[292] =  0.00000000000000000e-01;
	S->w[293] =  0.00000000000000000e-01;
	S->w[294] =  0.00000000000000000e+00;
	S->w[295] =  1.37450000000000006e+00;
	S->w[296] =  7.39600000000000035e-01;
	S->w[297] =  3.39598000000000011e-01;
	S->w[298] =  1.37450000000000006e+00;
	S->w[299] = -8.42400000000000038e-01;
	S->w[300] =  3.39598000000000011e-01;
	S->w[301] =  0.00000000000000000e+00;
	S->w[302] =  0.00000000000000000e+00;
	S->w[303] =  0.00000000000000000e+00;
	S->w[304] = -1.47550000000000003e+00;
	S->w[305] =  7.36099999999999977e-01;
	S->w[306] =  3.39598000000000011e-01;
	S->w[307] = -1.47550000000000003e+00;
	S->w[308] = -8.38899999999999979e-01;
	S->w[309] =  3.39598000000000011e-01;
	S->w[310] =  0.00000000000000000e+00;
	S->w[311] =  0.00000000000000000e-01;
	S->w[312] =  0.00000000000000000e+00;
	S->w[313] =  2.38732414637843050e+02;
	S->w[314] =  0.00000000000000000e+00;
	S->w[315] =  0.00000000000000000e+00;
	S->w[316] =  0.00000000000000000e+00;
	S->w[317] =  1.00000000000000000e+02;
	S->w[318] =  0.00000000000000000e+00;
	S->w[319] =  0.00000000000000000e+00;
	S->w[320] =  0.00000000000000000e+00;
	S->w[321] =  3.00000000000000000e+00;
	S->w[322] =  0.00000000000000000e+00;
	S->w[323] =  3.00000000000000000e+00;
	S->w[324] =  0.00000000000000000e+00;
	S->w[325] =  3.00000000000000000e+00;
	S->w[326] =  0.00000000000000000e+00;
	S->w[327] =  3.00000000000000000e+00;
	S->w[328] =  0.00000000000000000e+00;
	S->w[329] =  0.00000000000000000e+00;
	S->w[330] =  0.00000000000000000e+00;
	S->w[331] =  0.00000000000000000e+00;
	S->w[332] =  0.00000000000000000e+00;
	S->w[333] =  0.00000000000000000e+00;
	S->w[334] =  0.00000000000000000e+00;
	S->w[335] =  0.00000000000000000e+00;
	S->w[336] =  0.00000000000000000e+00;
	S->w[337] =  3.00000000000000000e+00;
	S->w[338] =  0.00000000000000000e+00;
	S->w[339] =  0.00000000000000000e+00;
	S->w[340] =  0.00000000000000000e+00;
	S->w[341] =  1.00000000000000000e+02;
	S->w[342] =  0.00000000000000000e+00;
	S->w[343] =  0.00000000000000000e+00;
	S->w[344] =  2.38732414637843021e+02;
	S->w[345] =  0.00000000000000000e+00;
	S->w[346] =  1.00000000000000000e+00;
	S->w[347] =  0.00000000000000000e+00;
	S->w[348] =  0.00000000000000000e+00;
	S->w[349] =  0.00000000000000000e+00;
	S->w[350] =  0.00000000000000000e+00;
	S->w[351] =  0.00000000000000000e+00;
	S->w[352] =  0.00000000000000000e+00;
	S->w[353] =  1.00000000000000000e+00;
	S->w[354] =  0.00000000000000000e+00;
	S->w[355] =  0.00000000000000000e+00;
	S->w[356] =  0.00000000000000000e+00;
	S->w[357] =  0.00000000000000000e+00;
	S->w[358] =  0.00000000000000000e+00;
	S->w[359] =  0.00000000000000000e+00;
	S->w[360] =  0.00000000000000000e+00;
	S->w[361] =  0.00000000000000000e+00;
	S->w[362] =  1.00000000000000000e+00;
	S->w[363] =  0.00000000000000000e+00;
	S->w[364] =  1.00000000000000000e+00;
	S->w[365] =  0.00000000000000000e+00;
	S->w[366] =  1.00000000000000000e+00;
	S->w[367] =  1.00000000000000000e+00;
	S->w[368] =  1.00000000000000000e+00;
	S->w[369] =  0.00000000000000000e+00;
	S->w[370] =  1.00000000000000000e+00;
	S->w[371] =  1.00000000000000000e+00;
	S->w[372] =  0.00000000000000000e+00;
	S->w[373] =  0.00000000000000000e+00;
	S->w[374] =  0.00000000000000000e+00;
	S->w[375] =  0.00000000000000000e+00;
	S->w[376] =  1.00000000000000000e+00;
	S->w[377] =  0.00000000000000000e+00;
	S->w[378] =  0.00000000000000000e+00;
	S->w[379] =  0.00000000000000000e+00;
	S->w[380] =  1.00000000000000000e+00;
	S->w[381] =  0.00000000000000000e+00;
	S->w[382] =  0.00000000000000000e+00;
	S->w[383] =  1.00000000000000000e+00;
	S->w[384] =  0.00000000000000000e+00;
	S->w[385] =  0.00000000000000000e+00;
	S->w[386] =  1.00000000000000000e+00;
	S->w[387] =  1.00000000000000000e+00;
	S->w[388] =  0.00000000000000000e+00;
	S->w[389] =  0.00000000000000000e+00;
	S->w[390] =  1.00000000000000000e+00;
	S->w[391] =  1.00000000000000000e+00;
	S->w[392] =  1.00000000000000000e+00;
	S->w[393] =  1.00000000000000000e+00;
	S->w[394] =  1.00000000000000000e+00;
	S->w[395] =  0.00000000000000000e+00;
	S->w[396] =  0.00000000000000000e+00;
	S->w[397] =  0.00000000000000000e+00;
	S->w[398] =  0.00000000000000000e+00;
	S->w[399] =  0.00000000000000000e+00;
	S->w[400] =  0.00000000000000000e+00;
	S->w[401] =  1.00000000000000000e+00;
	S->w[402] =  1.00000000000000000e+00;
	S->w[403] =  1.00000000000000000e+00;
	S->w[404] =  0.00000000000000000e+00;
	S->w[405] =  1.00000000000000000e+00;
	S->w[406] =  0.00000000000000000e+00;
	S->w[407] =  0.00000000000000000e+00;
	S->w[408] =  0.00000000000000000e+00;
	S->w[409] =  0.00000000000000000e+00;
	S->w[410] =  0.00000000000000000e+00;
	S->w[411] =  0.00000000000000000e+00;
	S->w[412] =  0.00000000000000000e+00;
	S->w[413] =  0.00000000000000000e+00;
	S->w[414] =  1.00000000000000000e+00;
	S->w[415] =  1.00000000000000000e+00;
	S->w[416] =  0.00000000000000000e+00;
	S->w[417] =  0.00000000000000000e+00;
	S->w[418] =  0.00000000000000000e+00;
	S->w[419] =  0.00000000000000000e+00;
	S->w[420] =  0.00000000000000000e+00;
	S->w[421] =  0.00000000000000000e+00;
	S->w[422] =  0.00000000000000000e+00;
	S->w[423] =  0.00000000000000000e+00;
	S->w[424] =  0.00000000000000000e+00;
	S->w[425] =  0.00000000000000000e+00;
	S->w[426] =  0.00000000000000000e+00;
	S->w[427] =  1.00000000000000000e+00;
	S->w[428] =  1.00000000000000000e+00;
	S->w[429] =  1.00000000000000000e+00;
	S->w[430] =  1.00000000000000000e+00;
	S->w[431] =  0.00000000000000000e+00;
	S->w[432] =  0.00000000000000000e+00;
	S->w[433] =  0.00000000000000000e+00;
	S->w[434] =  0.00000000000000000e+00;
	S->w[435] =  1.00000000000000000e+00;
	S->w[436] =  0.00000000000000000e+00;
	S->w[437] =  0.00000000000000000e+00;
	S->w[438] =  0.00000000000000000e+00;
	S->w[439] =  0.00000000000000000e+00;
	S->w[440] =  0.00000000000000000e+00;
	S->w[441] =  0.00000000000000000e+00;
	S->w[442] =  0.00000000000000000e+00;
	S->w[443] =  0.00000000000000000e+00;
	S->w[444] =  0.00000000000000000e+00;
	S->w[445] =  0.00000000000000000e+00;
	S->w[446] =  1.40000000000000013e-01;
	S->w[447] =  1.49999999999999994e-02;
	S->w[448] =  1.49999999999999994e-01;
	S->w[449] =  1.03900000000000006e+01;
	S->w[450] =  4.08000000000000007e+00;
	S->w[451] =  0.00000000000000000e+00;
	S->w[452] =  1.00000000000000000e+00;
	S->w[453] =  1.00000000000000000e+00;
	S->w[454] =  9.79999999999999982e-01;
	S->w[455] =  9.84999999999999987e-01;
	S->w[456] =  3.00000000000000000e+00;
	S->w[457] =  3.95000000000000018e-01;
	S->w[458] =  2.50000000000000000e+01;
	S->w[459] =  1.00000000000000000e+01;
	S->w[460] =  1.00000000000000000e+01;
	S->w[461] =  2.00000000000000000e+02;
	S->w[462] = -1.00000000000000000e+02;
	S->w[463] =  6.00000000000000000e+01;
	S->w[464] = -6.00000000000000000e+01;
	S->w[465] =  3.00000000000000000e+00;
	S->w[466] =  3.00000000000000000e+02;
	S->w[467] = -2.50000000000000000e+02;
	S->w[468] =  5.00000000000000028e-02;
	S->w[469] =  1.00000000000000000e+00;
	S->w[470] =  9.50000000000000000e+02;
	S->w[471] =  1.00000000000000006e-01;
	S->w[472] =  1.00000000000000000e+01;
	S->iw[2*NZC+0] = 0; S->iw[2*NZC+NEVT+0] = 364;
	S->iw[2*NZC+1] = 0; S->iw[2*NZC+NEVT+1] = 365;
	S->iw[2*NZC+2] = 0; S->iw[2*NZC+NEVT+2] = 366;
	S->iw[2*NZC+3] = 0; S->iw[2*NZC+NEVT+3] = 367;
	S->iw[2*NZC+4] = 0; S->iw[2*NZC+NEVT+4] = 368;
	S->iw[2*NZC+5] = 0; S->iw[2*NZC+NEVT+5] = 369;
	S->iw[2*NZC+6] = 0; S->iw[2*NZC+NEVT+6] = 370;
	S->iw[2*NZC+7] = 0; S->iw[2*NZC+NEVT+7] = 371;
	S->iw[2*NZC+8] = 0; S->iw[2*NZC+NEVT+8] = 372;
	S->iw[2*NZC+9] = 0; S->iw[2*NZC+NEVT+9] = 373;
	S->iw[2*NZC+10] = 0; S->iw[2*NZC+NEVT+10] = 374;
	S->iw[2*NZC+11] = 0; S->iw[2*NZC+NEVT+11] = 375;
	S->iw[2*NZC+12] = 0; S->iw[2*NZC+NEVT+12] = 376;
	S->iw[2*NZC+13] = 0; S->iw[2*NZC+NEVT+13] = 377;
	S->iw[2*NZC+14] = 0; S->iw[2*NZC+NEVT+14] = 378;
	S->iw[2*NZC+15] = 0; S->iw[2*NZC+NEVT+15] = 379;
	S->iw[2*NZC+16] = 0; S->iw[2*NZC+NEVT+16] = 380;
	S->iw[2*NZC+17] = 0; S->iw[2*NZC+NEVT+17] = 381;
	S->iw[2*NZC+18] = 0; S->iw[2*NZC+NEVT+18] = 382;
	S->iw[2*NZC+19] = 0; S->iw[2*NZC+NEVT+19] = 383;
	S->iw[2*NZC+20] = 0; S->iw[2*NZC+NEVT+20] = 384;
	S->iw[2*NZC+21] = 0; S->iw[2*NZC+NEVT+21] = 385;
	S->iw[2*NZC+22] = 0; S->iw[2*NZC+NEVT+22] = 386;
	S->iw[2*NZC+23] = 0; S->iw[2*NZC+NEVT+23] = 387;
	S->iw[2*NZC+24] = 0; S->iw[2*NZC+NEVT+24] = 388;
	S->iw[2*NZC+25] = 0; S->iw[2*NZC+NEVT+25] = 389;
	S->iw[2*NZC+26] = 0; S->iw[2*NZC+NEVT+26] = 390;
	S->iw[2*NZC+27] = 0; S->iw[2*NZC+NEVT+27] = 391;
	S->iw[2*NZC+28] = 0; S->iw[2*NZC+NEVT+28] = 392;
	S->iw[2*NZC+29] = 0; S->iw[2*NZC+NEVT+29] = 393;
	S->iw[2*NZC+30] = 0; S->iw[2*NZC+NEVT+30] = 394;
	S->iw[2*NZC+31] = 0; S->iw[2*NZC+NEVT+31] = 395;
	S->iw[2*NZC+32] = 0; S->iw[2*NZC+NEVT+32] = 396;
	S->iw[2*NZC+33] = 0; S->iw[2*NZC+NEVT+33] = 397;
	S->iw[2*NZC+34] = 0; S->iw[2*NZC+NEVT+34] = 398;
	S->iw[2*NZC+35] = 0; S->iw[2*NZC+NEVT+35] = 399;
	S->iw[2*NZC+36] = 0; S->iw[2*NZC+NEVT+36] = 400;
	S->iw[2*NZC+37] = 0; S->iw[2*NZC+NEVT+37] = 401;
	S->iw[2*NZC+38] = 0; S->iw[2*NZC+NEVT+38] = 402;
	S->iw[2*NZC+39] = 0; S->iw[2*NZC+NEVT+39] = 403;
	S->iw[2*NZC+40] = 0; S->iw[2*NZC+NEVT+40] = 404;
	S->iw[2*NZC+41] = 0; S->iw[2*NZC+NEVT+41] = 405;
	S->iw[2*NZC+42] = 0; S->iw[2*NZC+NEVT+42] = 406;
	S->iw[2*NZC+43] = 0; S->iw[2*NZC+NEVT+43] = 407;
	S->iw[2*NZC+44] = 0; S->iw[2*NZC+NEVT+44] = 408;
	S->iw[2*NZC+45] = 0; S->iw[2*NZC+NEVT+45] = 409;
	S->iw[2*NZC+46] = 0; S->iw[2*NZC+NEVT+46] = 410;
	S->iw[2*NZC+47] = 0; S->iw[2*NZC+NEVT+47] = 411;
	S->iw[2*NZC+48] = 0; S->iw[2*NZC+NEVT+48] = 412;
	S->iw[2*NZC+49] = 0; S->iw[2*NZC+NEVT+49] = 413;
	S->iw[2*NZC+50] = 0; S->iw[2*NZC+NEVT+50] = 414;
	S->iw[2*NZC+51] = 0; S->iw[2*NZC+NEVT+51] = 415;
	S->iw[2*NZC+52] = 0; S->iw[2*NZC+NEVT+52] = 416;
	S->iw[2*NZC+53] = 0; S->iw[2*NZC+NEVT+53] = 417;
	S->iw[2*NZC+54] = 0; S->iw[2*NZC+NEVT+54] = 418;
	S->iw[2*NZC+55] = 0; S->iw[2*NZC+NEVT+55] = 419;
	S->iw[2*NZC+56] = 0; S->iw[2*NZC+NEVT+56] = 420;
	S->iw[2*NZC+57] = 0; S->iw[2*NZC+NEVT+57] = 421;
	S->iw[2*NZC+58] = 0; S->iw[2*NZC+NEVT+58] = 422;
	S->iw[2*NZC+59] = 0; S->iw[2*NZC+NEVT+59] = 423;
	S->iw[2*NZC+60] = 0; S->iw[2*NZC+NEVT+60] = 424;
	S->iw[2*NZC+61] = 0; S->iw[2*NZC+NEVT+61] = 425;
	S->iw[2*NZC+62] = 0; S->iw[2*NZC+NEVT+62] = 426;
	S->iw[2*NZC+63] = 0; S->iw[2*NZC+NEVT+63] = 427;
	S->iw[2*NZC+64] = 0; S->iw[2*NZC+NEVT+64] = 428;
	S->iw[2*NZC+65] = 0; S->iw[2*NZC+NEVT+65] = 429;
	S->iw[2*NZC+66] = 0; S->iw[2*NZC+NEVT+66] = 430;
	S->iw[2*NZC+67] = 0; S->iw[2*NZC+NEVT+67] = 431;
	S->iw[2*NZC+68] = 0; S->iw[2*NZC+NEVT+68] = 432;
	S->iw[2*NZC+69] = 0; S->iw[2*NZC+NEVT+69] = 433;
	S->iw[2*NZC+70] = 0; S->iw[2*NZC+NEVT+70] = 434;
	S->iw[2*NZC+71] = 0; S->iw[2*NZC+NEVT+71] = 435;
	S->iw[2*NZC+72] = 0; S->iw[2*NZC+NEVT+72] = 436;
	S->iw[2*NZC+73] = 0; S->iw[2*NZC+NEVT+73] = 437;
	S->iw[2*NZC+74] = 0; S->iw[2*NZC+NEVT+74] = 438;
	S->iw[2*NZC+75] = 0; S->iw[2*NZC+NEVT+75] = 439;
	S->iw[2*NZC+76] = 0; S->iw[2*NZC+NEVT+76] = 440;
	S->iw[2*NZC+77] = 0; S->iw[2*NZC+NEVT+77] = 441;
	S->iw[2*NZC+78] = 1; S->iw[2*NZC+NEVT+78] = 0;
	S->iw[2*NZC+79] = 1; S->iw[2*NZC+NEVT+79] = 0;
	eev(S->w[0],&S->w[1],&S->w[1],&S->w[2*NEQ+NPAR+NDFA+1]);
#ifdef EVTHYST
	for(i=0;i<NEVT;i++) {
		if(S->iw[2*NZC+NEVT+i]>0) {
			if(S->w[S->iw[2*NZC+NEVT+i]]==0.0) { S->iw[2*i]=0; S->iw[2*i+1]=0; }
			else                               { S->iw[2*i]=1; S->iw[2*i+1]=1; }
		}
		else {
			S->iw[2*i]=(S->w[2*NEQ+NPAR+NDFA+1+i]>EVTHYST ? 1 : 0);
			S->iw[2*i+1]=(S->w[2*NEQ+NPAR+NDFA+1+i]>-EVTHYST ? 1 : 0);
		}
	}
#else
	for(i=0;i<NEVT;i++)
		if(S->iw[2*NZC+NEVT+i]>0) {
			if(S->w[S->iw[2*NZC+NEVT+i]]==0.0) S->iw[i]=0; else S->iw[i]=1;
		}
		else
			S->iw[i]=(S->w[2*NEQ+NPAR+NDFA+1+i]>0.0 ? 1 : 0);
#endif

	for(i=0;i<NDIFF;i++) S->w[i+NEQ+NPAR+1]=0.0;

	inpfn(S->w[0],u);
	for(i=0;i<NINP;i++) S->w[i+NDIFF+NIX1-NINP+1]=u[i];
	numdiffinp(S->w,1);
	numdiffinp(S->w,1);
	if(ic) for(i=0,j=0;i<NDIFF;i++) if(icvis[i]) { if(!IS_UNDEF(ic[j])) S->w[i+1]=ic[j]; j++; }
	if(p) for(i=0;i<NPAR;i++) S->w[i+NEQ+1]=p[i];
	RunEvents(S,S->w,S->iw,1,362,EVTITER);
	i=cpr(S->w[0],&S->w[1]);
	S->w[NEQ+NPAR+1]=0.0;
	fp(NEQ,S->w[0],&S->w[1],&S->w[NEQ+NPAR+1]);
	if(IS_UNDEF(S->w[NEQ+NPAR+1])) {
		SolverError(S,0,"index-1 and derivative evaluation failure");
		return;
	}
#if INITCONITER>0
	for(j=0;j<20;j++) {
#endif
#if INITCONITER>0
		i=ProjectInitial(S->w[0],&S->w[1],INITCONTOL,INITCONITER,icmask,INITTOL,INITITER,INITWEIGHT);
		if(i>0 && i!=3) {
			SolverError(S,0,"constraint projection failure");
			return;
		}
		fp(NEQ,S->w[0],&S->w[1],&S->w[NEQ+NPAR+1]);
		if(IS_UNDEF(S->w[NEQ+NPAR+1])) {
			SolverError(S,0,"index-1 and derivative evaluation failure");
			return;
		}
#endif
		i=cpr(S->w[0],&S->w[1]);
		if(i>0) {
			fp(NEQ,S->w[0],&S->w[1],&S->w[NEQ+NPAR+1]);
			if(IS_UNDEF(S->w[NEQ+NPAR+1])) {
				SolverError(S,0,"index-1 and derivative evaluation failure");
				return;
			}
		}
#if INITCONITER>0
		if(i<1) break;
	}
#endif
	eev(S->w[0],&S->w[1],&S->w[1],&S->w[2*NEQ+NPAR+NDFA+1]);
	RunEvents(S,S->w,S->iw,0,362,EVTITER);
	SolverOutputs(y,S);
}

/*
	Parametrized simulation driver
*/
#define EPT 0

#ifdef FROM_MAPLE
#include <time.h>

EXP long M_DECL ParamDriverMC(double t0, double dt, long npts, long stepsperpt, double *ic, double *p, double *out, char *errbuf, long internal, ALGEB halt)
#else
EXP long M_DECL ParamDriverMC(double t0, double dt, long npts, long stepsperpt, double *ic, double *p, double *out, char *errbuf, long internal)
#endif
{
	double u[NINP],y[NOUT+1];
	long i,j,k;
#ifdef FROM_MAPLE
	long ictr=0,pct=0;
	char buf[200];
	double tv1,tv2;
#endif
	SolverStruct S;

	/* Setup */
	y[0]=0.0; y[NOUT]=0.0; /* Compiler warnings */
	for(i=0;i<(npts+EPT*(npts-1))*(NOUT+1);i++) out[i]=*dsn_undef;
	S.w=malloc((7+2*NEQ+NPAR+NDFA+NEVT)*sizeof(double));
	if(internal==0) S.err=0; else S.err=-1;
	S.buf=errbuf;
	SolverSetup(t0,ic,u,p,y,dt,&S);
	/* Output */
	out[0]=t0; for(j=0;j<NOUT;j++) out[j+1]=y[j];
	/* Integration loop */
#ifdef FROM_MAPLE
	tv1=clock()/(1.0*CLOCKS_PER_SEC);
#endif
	k=1;
	for(i=1;i<npts;i++) {
		for(j=0;j<stepsperpt;j++) {
			/* Take a step with states */
			RK4Step(u,&S);
			if( S.err>0 ) break;
#ifdef FROM_MAPLE
			ictr++;
			if(ictr>=100) {
				if( kv->getInterruptValue() ) {
					free(S.w);
					return(i);
				}
				tv2=clock()/(1.0*CLOCKS_PER_SEC);
				if(tv2-tv1>0.5) {
					if( halt!=NULL && !kv->isUnassignedName(halt) ) {
						free(S.w);
						return(i);
					}
					tv1=tv2;
				}
				ictr=0;
			}
#endif

		}
#ifdef FROM_MAPLE
		j=(100*i)/(npts-1);
		if(j>pct) {
			pct=j;
			sprintf(buf,"ProgressUpdate: %li %f",(long)pct,S.w[0]);
			kv->userinfo(1,"MapleSimProgressUpdate",buf);
		}
#endif
		/* Output */
#if EPT==1
		out[k*(NOUT+1)]=S.w[0]; for(j=0;j<NOUT;j++) out[k*(NOUT+1)+j+1]=S.py[j];
		k++;
#endif
		SolverOutputs(y,&S);
		out[k*(NOUT+1)]=S.w[0]; for(j=0;j<NOUT;j++) out[k*(NOUT+1)+j+1]=y[j];
		k++;
	}
#ifdef _SOLVER_TERMINATE
	if(i==npts)
		SolverTerminate(&S);
#endif

	free(S.w);
	return(k);
}

/*
	Old interface - maintain for backward compatibility
*/
EXP long M_DECL ParamDriverC(double t0, double dt, long npts, double *ic, double *p, double *out, char *errbuf, long internal)
{
#ifdef FROM_MAPLE
	ALGEB a=NULL;

	return ParamDriverMC(t0,dt,npts,1,ic,p,out,errbuf,internal,a);
#else
	return ParamDriverMC(t0,dt,npts,1,ic,p,out,errbuf,internal);
#endif
}

#ifdef FROM_MAPLE
EXP ALGEB M_DECL ParamDriver( MKernelVector kv_in, ALGEB *args )
{
	double t0,tf,dt,*ic,*p,*out;
	M_INT nargs,bounds[4],npts,naout,stepsperpt,sppa=0,i;
	RTableSettings s;
	ALGEB outd,halt;
	char buf[10000];

	kv=kv_in;
	nargs=kv->numArgs((ALGEB)args);
	if( nargs<5 || nargs>7 )
		kv->error("incorrect number of arguments");

	/* Process time vals */
	if( !kv->isNumeric(args[1]) )
		kv->error("argument #1, the initial time, must be numeric");
	t0=kv->mapleToFloat64(args[1]);
	if( !kv->isNumeric(args[2]) )
		kv->error("argument #2, the final time, must be numeric");
	tf=kv->mapleToFloat64(args[2]);
	if( t0>=tf )
		kv->error("the final time must be larger than the initial time");
	if( !kv->isNumeric(args[3]) )
		kv->error("argument #3, the time step, must be a positive numeric value");
	dt=kv->mapleToFloat64(args[3]);
	if(dt<=0)
		kv->error("argument #3, the time step, must be a positive numeric value");

	/* Check for presence of stepsperpt argument */
	if( kv->isInteger(args[4]) && (stepsperpt=kv->mapleToInteger32(args[4]))>0 )
		sppa=1;
	else
		stepsperpt=1;
	npts=(M_INT)floor((tf+1e-10*dt-t0)/(stepsperpt*dt))+1;

	/* Processing ic in */
	if( NDIFF==0 )
		ic=NULL;
	else if( kv->isInteger(args[4+sppa]) && kv->mapleToInteger32(args[4+sppa])==0 )
		ic=NULL;
	else if( !kv->isRTable(args[4+sppa]) ) {
		ic=NULL;
		kv->error("argument #%1, the initial data, must be a 1..ndiff rtable",kv->toMapleInteger(4+sppa));
	}
	else {
		kv->rtableGetSettings(&s,args[4+sppa]);
		if( s.storage != RTABLE_RECT || s.data_type != RTABLE_FLOAT64 ||
			 s.num_dimensions != 1 || kv->rtableLowerBound(args[4+sppa],1)!=1 ||
			 kv->rtableUpperBound(args[4+sppa],1) != NSDIFF )
			kv->error("argument #%1, the initial data, must be a 1..ndiff rtable",kv->toMapleInteger(4+sppa));
		ic=(double *)kv->rtableData(args[4+sppa]);
	}

	/* Processing parameters in */
	if( NPAR==0 )
		p=NULL;
	else if( kv->isInteger(args[5+sppa]) && kv->mapleToInteger32(args[5+sppa])==0 )
		p=NULL;
	else if( !kv->isRTable(args[5+sppa]) ) {
		p=NULL;
		kv->error("argument #%1, the parameter data, must be a 1..npar rtable",kv->toMapleInteger(5+sppa));
	}
	else {
		kv->rtableGetSettings(&s,args[5+sppa]);
		if( s.storage != RTABLE_RECT || s.data_type != RTABLE_FLOAT64 ||
			 s.num_dimensions != 1 || kv->rtableLowerBound(args[5+sppa],1)!=1 ||
			 kv->rtableUpperBound(args[5+sppa],1) != NPAR )
			kv->error("argument #%1, the parameter data, must be a 1..npar rtable",kv->toMapleInteger(5+sppa));
		p=(double *)kv->rtableData(args[5+sppa]);
	}

	/* Output data table */
	if( nargs==6+sppa ) {
		outd=NULL;
		if( !kv->isRTable(args[6+sppa]) ) {
			out=NULL;
			naout=0;
			kv->error("argument #%1, the output data, must be a 1..npts,1..nout+1 C_order rtable",kv->toMapleInteger(6+sppa));
		}
		else {
			kv->rtableGetSettings(&s,args[6+sppa]);
			if( s.storage != RTABLE_RECT || s.data_type != RTABLE_FLOAT64 ||
			 	s.order != RTABLE_C || s.num_dimensions != 2 ||
			 	kv->rtableLowerBound(args[6+sppa],1)!=1 ||
			 	kv->rtableLowerBound(args[6+sppa],2)!=1 ||
			 	kv->rtableUpperBound(args[6+sppa],2) != NOUT+1 )
				kv->error("argument #%1, the output data, must be a 1..npts,1..nout+1 C_order rtable",kv->toMapleInteger(6+sppa));
			naout=kv->rtableUpperBound(args[6+sppa],1);
			if( naout<1 )
				kv->error("argument #%1, the output data, must have at least 1 output slot",kv->toMapleInteger(6+sppa));
			out=(double *)kv->rtableData(args[6+sppa]);
			if(naout<npts+EPT*(npts-1)) npts=(EPT+naout)/(EPT+1);
		}
	}
	else {
		kv->rtableGetDefaults(&s);
		bounds[0]=1; bounds[1]=npts+EPT*(npts+1);
		bounds[2]=1; bounds[3]=NOUT+1;
		s.storage=RTABLE_RECT;
		s.data_type=RTABLE_FLOAT64;
		s.order=RTABLE_C;
		s.num_dimensions=2;
		s.subtype=RTABLE_ARRAY;
		outd=kv->rtableCreate(&s,NULL,bounds);
		out=(double *)kv->rtableData(outd);
		naout=npts+EPT*(npts+1);
	}
	for(i=0;i<naout*(NOUT+1);i++) out[i]=*dsn_undef;

	halt=kv->toMapleName("_HALT_MAPLESIM_INTEGRATION",TRUE);

	i=ParamDriverMC(t0,dt,npts,stepsperpt,ic,p,out,buf,1,halt);

	/* All done */
	if(outd==NULL)
		return(kv->toMapleInteger(i));
	else
		return(outd);
}
#endif
// END: Copied from cFullModel_Sept26:439..6167
